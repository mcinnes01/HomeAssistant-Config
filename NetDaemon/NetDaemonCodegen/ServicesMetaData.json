{
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Shows a notification on the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Test notification",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title of the notification."
        },
        "notification_id": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Deletes a notification from the notifications panel.",
      "fields": {
        "notification_id": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification to be deleted."
        }
      }
    },
    "dismiss_all": {
      "name": "Dismiss all",
      "description": "Deletes all notifications from the notifications panel.",
      "fields": {}
    }
  },
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save persistent states",
      "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic action to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic action to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic action to toggle devices on/off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops Home Assistant.",
      "fields": {}
    },
    "restart": {
      "name": "Restart",
      "description": "Restarts Home Assistant.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Forces one or more entities to update their data.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to update",
          "description": "List of entities to force update."
        }
      }
    },
    "reload_core_config": {
      "name": "Reload Core configuration",
      "description": "Reloads the Core configuration from the YAML-configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Updates the Home Assistant location.",
      "fields": {
        "latitude": {
          "required": true,
          "example": 32.87336,
          "selector": {
            "number": {
              "mode": "box",
              "min": -90,
              "max": 90,
              "step": "any"
            }
          },
          "name": "Latitude",
          "description": "Latitude of your location."
        },
        "longitude": {
          "required": true,
          "example": 117.22743,
          "selector": {
            "number": {
              "mode": "box",
              "min": -180,
              "max": 180,
              "step": "any"
            }
          },
          "name": "Longitude",
          "description": "Longitude of your location."
        },
        "elevation": {
          "required": false,
          "example": 120,
          "selector": {
            "number": {
              "mode": "box",
              "step": "any"
            }
          },
          "name": "Elevation",
          "description": "Elevation of your location above sea level."
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reloads Jinja2 templates found in the \u0060custom_templates\u0060 folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reloads the specified config entry.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "text": null
          },
          "name": "Config entry ID",
          "description": "The configuration entry ID of the entry to be reloaded."
        }
      },
      "target": {
        "entity": [
          {}
        ],
        "device": [
          {}
        ]
      }
    },
    "reload_all": {
      "name": "Reload all",
      "description": "Reloads all YAML configuration that can be reloaded without restarting Home Assistant.",
      "fields": {}
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear",
      "description": "Deletes all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message to log."
        },
        "level": {
          "default": "error",
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Log level."
        },
        "logger": {
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          },
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to \u0060system_log.external\u0060."
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Sets the default log level for integrations.",
      "fields": {
        "level": {
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "fatal",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Default severity level for all integrations."
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Sets the log level for one or more integrations.",
      "fields": {}
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reloads persons from the YAML-configuration.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set the default theme",
      "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
      "fields": {
        "name": {
          "required": true,
          "example": "default",
          "selector": {
            "theme": {
              "include_default": true
            }
          },
          "name": "Theme",
          "description": "Name of a theme."
        },
        "mode": {
          "default": "light",
          "selector": {
            "select": {
              "options": [
                "dark",
                "light"
              ],
              "translation_key": "mode"
            }
          },
          "name": "Mode",
          "description": "Theme mode."
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reloads themes from the YAML-configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Starts purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged."
        },
        "repack": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file."
        },
        "apply_filter": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Apply filter",
          "description": "Apply \u0060entity_id\u0060 and \u0060event_type\u0060 filters in addition to time-based purge."
        }
      }
    },
    "purge_entities": {
      "name": "Purge entities",
      "description": "Starts a purge task to remove the data related to specific entities from your database.",
      "fields": {
        "entity_id": {
          "required": false,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to remove",
          "description": "List of entities for which the data is to be removed from the Recorder database."
        },
        "domains": {
          "example": "sun",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Domains to remove",
          "description": "List of domains for which the data needs to be removed from the Recorder database."
        },
        "entity_globs": {
          "example": "domain*.object_id*",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Entity globs to remove",
          "description": "List of glob patterns used to select the entities for which the data is to be removed from the Recorder database."
        },
        "keep_days": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
        }
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Starts the recording of events and state changes.",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stops the recording of events and state changes.",
      "fields": {}
    }
  },
  "hassio": {
    "addon_start": {
      "name": "Start add-on",
      "description": "Starts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to start."
        }
      }
    },
    "addon_stop": {
      "name": "Stop add-on",
      "description": "Stops an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to stop."
        }
      }
    },
    "addon_restart": {
      "name": "Restart add-on",
      "description": "Restarts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to restart."
        }
      }
    },
    "addon_update": {
      "name": "Update add-on",
      "description": "Updates an add-on. This action should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to update."
        }
      }
    },
    "addon_stdin": {
      "name": "Write data to add-on stdin",
      "description": "Writes data to the add-on\u0027s standard input.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to write to."
        }
      }
    },
    "host_shutdown": {
      "name": "Power off the host system",
      "description": "Powers off the host system.",
      "fields": {}
    },
    "host_reboot": {
      "name": "Reboot the host system",
      "description": "Reboots the host system.",
      "fields": {}
    },
    "backup_full": {
      "name": "Create a full backup",
      "description": "Creates a full backup.",
      "fields": {
        "name": {
          "example": "Backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from the backup."
        }
      }
    },
    "backup_partial": {
      "name": "Create a partial backup",
      "description": "Creates a partial backup.",
      "fields": {
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Includes Home Assistant settings in the backup."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from the backup."
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to include in the backup. Use the name slug of each add-on."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to include in the backup."
        },
        "name": {
          "example": "Partial backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        }
      }
    },
    "restore_full": {
      "name": "Restore from full backup",
      "description": "Restores from full backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    },
    "restore_partial": {
      "name": "Restore from partial backup",
      "description": "Restores from a partial backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Restores Home Assistant."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to restore from the backup."
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to restore from the backup. Use the name slug of each add-on."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Installs an update for a device or service.",
      "fields": {
        "version": {
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          },
          "name": "Version",
          "description": "The version to install. If omitted, the latest version will be installed."
        },
        "backup": {
          "filter": {
            "supported_features": [
              8
            ]
          },
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Backup",
          "description": "If supported by the integration, this creates a backup before starting the update."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Marks currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Enable remote access",
      "description": "Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Disable remote access",
      "description": "Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.",
      "fields": {}
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Sends a start command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent."
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Sends a stop command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent."
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Sends a restart command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent."
        }
      }
    }
  },
  "tts": {
    "speak": {
      "name": "Speak",
      "description": "Speaks something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player entity",
          "description": "Media players to play the message."
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The text you want to convert into speech so that you can listen to it on your device."
        },
        "cache": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cache",
          "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to use for speech generation."
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "A dictionary containing integration-specific options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "tts"
            ]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Removes all cached text-to-speech files and purges the memory.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launches a conversation from a transcribed text.",
      "fields": {
        "text": {
          "example": "Turn all lights on",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Text",
          "description": "Transcribed text input."
        },
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language of text. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
        },
        "conversation_id": {
          "example": "my_conversation_1",
          "selector": {
            "text": null
          },
          "name": "Conversation ID",
          "description": "ID of the conversation, to be able to continue a previous conversation"
        }
      },
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the intent configuration.",
      "fields": {
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to clear cached intents for. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to reload."
        }
      }
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "button"
            ]
          }
        ]
      }
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reloads the scenes from the YAML-configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activates a scene with configuration.",
      "fields": {
        "entities": {
          "required": true,
          "example": "light.kitchen: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 80\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state."
        },
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          },
          "name": "Scene entity ID",
          "description": "The entity ID of the new scene."
        },
        "entities": {
          "advanced": true,
          "example": "light.tv_back_light: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 200\n",
          "selector": {
            "object": null
          },
          "name": "Entity states",
          "description": "List of entities and their target state. If your entities are already in the target state right now, use \u0027Entities snapshot\u0027 instead."
        },
        "snapshot_entities": {
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities snapshot",
          "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine \u0027Entities snapshot\u0027 with \u0027Entity states\u0027."
        }
      }
    },
    "delete": {
      "name": "Delete",
      "description": "Deletes a dynamically created scene.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "homeassistant",
            "domain": [
              "scene"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activates a scene.",
      "fields": {
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "scene"
            ]
          }
        ]
      }
    }
  },
  "backup": {
    "create_automatic": {
      "name": "Create automatic backup",
      "description": "Creates a new backup with automatic backup settings.",
      "fields": {}
    }
  },
  "group": {
    "reload": {
      "name": "Reload",
      "description": "Reloads group configuration, entities, and notify services from YAML-configuration.",
      "fields": {}
    },
    "set": {
      "name": "Set",
      "description": "Creates/Updates a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "text": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        },
        "name": {
          "example": "My test group",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Name of the group."
        },
        "icon": {
          "example": "mdi:camera",
          "selector": {
            "icon": null
          },
          "name": "Icon",
          "description": "Name of the icon for the group."
        },
        "entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities",
          "description": "List of all members in the group. Cannot be used in combination with \u0060Add entities\u0060 or \u0060Remove entities\u0060."
        },
        "add_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Add entities",
          "description": "List of members to be added to the group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Remove entities\u0060."
        },
        "remove_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Remove entities",
          "description": "List of members to be removed from a group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Add entities\u0060."
        },
        "all": {
          "selector": {
            "boolean": null
          },
          "name": "All",
          "description": "Enable this option if the group should only be used when all entities are in state \u0060on\u0060."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "object": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        }
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on one or more lights and adjusts their properties, even when they are turned on already.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "color_temp_kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "brightness_step_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness step",
          "description": "Change brightness by a percentage."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "brightness_step": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": -225,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off one or more lights.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or off to on, based on their current state.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "color_temp_kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "options": [
                    {
                      "label": "Long",
                      "value": "long"
                    },
                    {
                      "label": "Short",
                      "value": "short"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Creates a custom entry in the logbook.",
      "fields": {
        "name": {
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Custom name for an entity, can be referenced using the \u0027Entity ID\u0027 field."
        },
        "message": {
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message of the logbook entry."
        },
        "entity_id": {
          "selector": {
            "entity": null
          },
          "name": "Entity ID",
          "description": "Entity to reference in the logbook entry."
        },
        "domain": {
          "example": "light",
          "selector": {
            "text": null
          },
          "name": "Domain",
          "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
        }
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reloads zones from the YAML-configuration.",
      "fields": {}
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the helper on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Sets the options.",
      "fields": {
        "options": {
          "required": true,
          "example": "[\u0022Item A\u0022, \u0022Item B\u0022, \u0022Item C\u0022]",
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Options",
          "description": "List of options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    }
  },
  "timer": {
    "reload": {
      "name": "Reload",
      "description": "Reloads timers from the YAML-configuration.",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Starts a timer or restarts it with a provided duration.",
      "fields": {
        "duration": {
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Custom duration to restart the timer with."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses a running timer, retaining the remaining duration for later continuation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Resets a timer\u0027s duration to the last known initial value without firing the timer finished event.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finishes a running timer earlier than scheduled.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Changes a timer by adding or subtracting a given duration.",
      "fields": {
        "duration": {
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Duration to add to or subtract from the running timer."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    }
  },
  "input_button": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Mimics the physical button press on the device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_button"
            ]
          }
        ]
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.001,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increment",
      "description": "Increments the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements the current value by 1 step.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Manually update the records of a seen legacy device tracker in the known_devices.yaml file.",
      "fields": {
        "mac": {
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device."
        },
        "dev_id": {
          "example": "phonedave",
          "selector": {
            "text": null
          },
          "name": "Device ID",
          "description": "ID of the device (find the ID in \u0060known_devices.yaml\u0060)."
        },
        "host_name": {
          "example": "Dave",
          "selector": {
            "text": null
          },
          "name": "Hostname",
          "description": "Hostname of the device."
        },
        "location_name": {
          "example": "home",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "Name of the location where the device is located. The options are: \u0060home\u0060, \u0060not_home\u0060, or the name of the zone."
        },
        "gps": {
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          },
          "name": "GPS coordinates",
          "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539])."
        },
        "gps_accuracy": {
          "selector": {
            "number": {
              "min": 0,
              "mode": "box",
              "unit_of_measurement": "m"
            }
          },
          "name": "GPS accuracy",
          "description": "Accuracy of the GPS coordinates."
        },
        "battery": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Battery level",
          "description": "Battery level of the device."
        }
      }
    }
  },
  "alarm_control_panel": {
    "alarm_disarm": {
      "name": "Disarm",
      "description": "Disarms the alarm.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to disarm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_home": {
      "name": "Arm home",
      "description": "Arms the alarm in the home mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "alarm_arm_away": {
      "name": "Arm away",
      "description": "Arms the alarm in the away mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "alarm_arm_night": {
      "name": "Arm night",
      "description": "Arms the alarm in the night mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "alarm_arm_vacation": {
      "name": "Arm vacation",
      "description": "Arms the alarm in the vacation mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "alarm_arm_custom_bypass": {
      "name": "Arm with custom bypass",
      "description": "Arms the alarm while allowing to bypass a custom area.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "alarm_trigger": {
      "name": "Trigger",
      "description": "Triggers the alarm manually.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "calendar": {
    "create_event": {
      "name": "Create event",
      "description": "Adds a new calendar event.",
      "fields": {
        "summary": {
          "required": true,
          "example": "Department Party",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Defines the short summary or subject for the event."
        },
        "description": {
          "example": "Meeting to provide technical review for \u0027Phoenix\u0027 design.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the event than the one provided by the summary."
        },
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2022-03-22",
          "selector": {
            "date": null
          },
          "name": "Start date",
          "description": "The date the all-day event should start."
        },
        "end_date": {
          "example": "2022-03-23",
          "selector": {
            "date": null
          },
          "name": "End date",
          "description": "The date the all-day event should end (exclusive)."
        },
        "in": {
          "example": "{\u0022days\u0022: 2} or {\u0022weeks\u0022: 2}",
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        },
        "location": {
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "The location of the event."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "get_events": {
      "name": "Get events",
      "description": "Retrieves events on a calendar within a time range.",
      "fields": {
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "Returns active events after this time (exclusive). When not set, defaults to now."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "Returns active events before this time (exclusive). Cannot be used with Duration."
        },
        "duration": {
          "selector": {
            "duration": null
          },
          "name": "Duration",
          "description": "Returns active events from Start time for the specified duration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "waste_collection_schedule": {
    "fetch_data": {
      "name": "Fetch data from all sources.",
      "description": "Fetch data from all sources.",
      "fields": {}
    }
  },
  "script": {
    "feed_cats": {
      "name": "Feed Cats",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "notify_alexa_everywhere": {
      "name": "Notify Alexa Everywhere",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "notify_all": {
      "name": "Notify All",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "room_controller_reset": {
      "name": "Room Controller Reset",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "new_script": {
      "name": "activate_alexa_actionable_notification",
      "description": "Activates an actionable notification on a specific echo device",
      "fields": {
        "text": {
          "description": "The text you would like alexa to speak.",
          "example": "What would you like the thermostat set to?",
          "required": false,
          "advanced": false
        },
        "event_id": {
          "description": "Correlation ID for event responses",
          "example": "ask_for_temperature",
          "required": false,
          "advanced": false
        },
        "alexa_device": {
          "description": "Alexa device you want to trigger",
          "example": "media_player.bedroom_echo",
          "required": false,
          "advanced": false
        }
      },
      "response": {
        "optional": true
      }
    },
    "alarm_triggered": {
      "name": "Alarm Triggered",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "yeelight_dimmer": {
      "name": "Yeelight Dimmer Up",
      "description": "",
      "fields": {
        "entitiy_id": {
          "name": "entitiy_id",
          "description": "The entity ID of your bulb",
          "example": "light.your_light",
          "required": true,
          "advanced": false
        },
        "button_state": {
          "name": "button_state",
          "description": "The entity ID of the input_text helper for your button state",
          "example": "input_text.your_button_state",
          "required": true,
          "advanced": false
        }
      },
      "response": {
        "optional": true
      }
    },
    "yeelight_dimmer_down": {
      "name": "Yeelight Dimmer Down",
      "description": "",
      "fields": {
        "entitiy_id": {
          "name": "entitiy_id",
          "description": "The entity ID of your bulb",
          "example": "light.your_light",
          "required": true,
          "advanced": false
        },
        "button_state": {
          "name": "button_state",
          "description": "The entity ID of the input_text helper for your button state",
          "example": "input_text.your_button_state",
          "required": true,
          "advanced": false
        }
      },
      "response": {
        "optional": true
      }
    },
    "camera_shed_snapshot_ai_notification": {
      "name": "Camera - shed - Snapshot, AI \u0026 Notification",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads all the available scripts.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Runs the sequence of actions defined in a script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stops a running script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Starts a script if it isn\u0027t running, stops it otherwise.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    }
  },
  "shopping_list": {
    "add_item": {
      "name": "Add item",
      "description": "Adds an item to the shopping list.",
      "fields": {
        "name": {
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "The name of the item to add."
        }
      }
    },
    "remove_item": {
      "name": "Remove item",
      "description": "Removes the first item with matching name from the shopping list.",
      "fields": {
        "name": {
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "The name of the item to remove."
        }
      }
    },
    "complete_item": {
      "name": "Complete item",
      "description": "Marks the first item with matching name as completed in the shopping list.",
      "fields": {
        "name": {
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "The name of the item to mark as completed (without removing)."
        }
      }
    },
    "incomplete_item": {
      "name": "Incomplete item",
      "description": "Marks the first item with matching name as incomplete in the shopping list.",
      "fields": {
        "name": {
          "example": "Beer",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "The name of the item to mark as incomplete."
        }
      }
    },
    "complete_all": {
      "name": "Complete all",
      "description": "Marks all items as completed in the shopping list (without removing them from the list).",
      "fields": {}
    },
    "incomplete_all": {
      "name": "Incomplete all",
      "description": "Marks all items as incomplete in the shopping list.",
      "fields": {}
    },
    "clear_completed_items": {
      "name": "Clear completed items",
      "description": "Removes completed items from the shopping list.",
      "fields": {}
    },
    "sort": {
      "name": "Sort all items",
      "description": "Sorts all items by name in the shopping list.",
      "fields": {
        "reverse": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Sort reverse",
          "description": "Whether to sort in reverse (descending) order."
        }
      }
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "Sets the date and/or time.",
      "fields": {
        "date": {
          "example": "\u00222019-04-20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date",
          "description": "The target date."
        },
        "time": {
          "example": "\u002205:04:20\u0022",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The target time."
        },
        "datetime": {
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date \u0026 time",
          "description": "The target date \u0026 time."
        },
        "timestamp": {
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Timestamp",
          "description": "The target date \u0026 time, expressed by a UNIX timestamp."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_datetime"
            ]
          }
        ]
      }
    }
  },
  "netdaemon": {
    "register_service": {
      "name": "",
      "description": "Register a new service for netdaemon, used by the daemon and not to be used by users",
      "fields": {
        "service": {
          "description": "The name of the service to register"
        },
        "class": {
          "description": "The class that implements the service call"
        },
        "method": {
          "description": "The method to call"
        }
      }
    },
    "reload_apps": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "entity_create": {
      "name": "",
      "description": "Create an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_update": {
      "name": "",
      "description": "Update an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_remove": {
      "name": "",
      "description": "Remove an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        }
      }
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reloads schedules from the YAML-configuration.",
      "fields": {}
    },
    "get_schedule": {
      "name": "Get schedule",
      "description": "Retrieves the configured time ranges of one or multiple schedules.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "schedule"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "octopus_energy": {
    "purge_invalid_external_statistic_ids": {
      "name": "Purge invalid external statistics",
      "description": "Removes external statistics for all meters that don\u0027t have an active tariff",
      "fields": {}
    },
    "join_octoplus_saving_session_event": {
      "name": "Join Octoplus saving session event",
      "description": "Joins a given Octoplus saving session event.",
      "fields": {
        "event_code": {
          "name": "Event code",
          "description": "The code of the event that is to be joined.",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "octopus_energy",
            "domain": [
              "event"
            ]
          }
        ]
      }
    },
    "refresh_previous_consumption_data": {
      "name": "Refresh previous consumption data",
      "description": "Refreshes the previous consumption data for a given entity from a given date.",
      "fields": {
        "start_date": {
          "name": "Date",
          "description": "The date the data should be loaded from.",
          "required": true,
          "selector": {
            "date": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "octopus_energy",
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    },
    "spin_wheel_of_fortune": {
      "name": "Spin wheel of fortune",
      "description": "Spins the wheel of fortune for a given energy type",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "octopus_energy",
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    },
    "redeem_octoplus_points_into_account_credit": {
      "name": "Redeem octoplus points into account credit",
      "description": "Redeems a given number of octoplus points into account credit",
      "fields": {
        "points_to_redeem": {
          "name": "Points to redeem",
          "description": "The number of points to redeem",
          "selector": {
            "number": {
              "min": 8,
              "step": 1,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "octopus_energy",
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    },
    "register_rate_weightings": {
      "name": "Register rate weightings",
      "description": "Registers external weightings against rates, for use with target rate sensors when calculating target periods.",
      "fields": {
        "weightings": {
          "name": "Weightings",
          "description": "The collection of time periods and associated weightings to apply.",
          "example": "[\n  {\n    \u0022start\u0022: \u00222025-01-01T00:00:00Z\u0022,\n    \u0022end\u0022: \u00222025-01-01T00:30:00Z\u0022,\n    \u0022weighting\u0022: 0.1\n  }\n]",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "octopus_energy",
            "domain": [
              "sensor"
            ]
          }
        ]
      }
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles climate device, from on to off, or off to on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128,
              256
            ]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Sets HVAC operation mode.",
      "fields": {
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "set_aux_heat": {
      "name": "Turn on/off auxiliary heater",
      "description": "Turns auxiliary heater on/off.",
      "fields": {
        "aux_heat": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Auxiliary heating",
          "description": "New value of auxiliary heater."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set target temperature",
      "description": "Sets the temperature setpoint.",
      "fields": {
        "temperature": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Target temperature",
          "description": "The temperature setpoint."
        },
        "target_temp_high": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Upper target temperature",
          "description": "The max temperature setpoint."
        },
        "target_temp_low": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Lower target temperature",
          "description": "The min temperature setpoint."
        },
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              1,
              2
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Sets target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Sets fan operation mode.",
      "fields": {
        "fan_mode": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan mode",
          "description": "Fan operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Sets swing operation mode.",
      "fields": {
        "swing_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Swing mode",
          "description": "Swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "set_swing_horizontal_mode": {
      "name": "Set horizontal swing mode",
      "description": "Sets horizontal swing operation mode.",
      "fields": {
        "swing_horizontal_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Horizontal swing mode",
          "description": "Horizontal swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Opens a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Closes a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Moves a cover to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stops the cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Tilts a cover open.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Tilts a cover to close.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stops a tilting cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Moves a cover tilt to a specific position.",
      "fields": {
        "tilt_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Tilt position",
          "description": "Target tilt positition."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggles a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              48
            ]
          }
        ]
      }
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns fan on.",
      "fields": {
        "percentage": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        },
        "preset_mode": {
          "example": "auto",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Increment",
          "description": "Percentage step by which the speed should be increased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decreases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Decrement",
          "description": "Percentage step by which the speed should be decreased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Controls the oscillation of a fan.",
      "fields": {
        "oscillating": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Oscillating",
          "description": "Turns oscillation on/off."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Sets a fan\u0027s rotation direction.",
      "fields": {
        "direction": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "forward",
                "reverse"
              ],
              "translation_key": "direction"
            }
          },
          "name": "Direction",
          "description": "Direction of the fan rotation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed",
      "description": "Sets the speed of a fan.",
      "fields": {
        "percentage": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset fan mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlocks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to unlock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Locks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to lock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Opens a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to open the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Sets the value of a number.",
      "fields": {
        "value": {
          "example": 42,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "vacuum": {
    "start": {
      "name": "Start",
      "description": "Starts or resumes the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "return_to_base": {
      "name": "Return to dock",
      "description": "Tells the vacuum cleaner to return to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clean_spot": {
      "name": "Clean spot",
      "description": "Tells the vacuum cleaner to do a spot clean-up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "locate": {
      "name": "Locate",
      "description": "Locates the vacuum cleaner robot.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops the current cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_fan_speed": {
      "name": "Set fan speed",
      "description": "Sets the fan speed of the vacuum cleaner.",
      "fields": {
        "fan_speed": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan speed",
          "description": "Fan speed. The value depends on the integration. Some integrations have speed steps, like \u0027medium\u0027. Some use a percentage, between 0 and 100."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command to the vacuum cleaner.",
      "fields": {
        "command": {
          "required": true,
          "example": "set_dnd_timer",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Command to execute. The commands are integration-specific."
        },
        "params": {
          "example": "{ \u0022key\u0022: \u0022value\u0022 }",
          "selector": {
            "object": null
          },
          "name": "Parameters",
          "description": "Parameters for the command. The parameters are integration-specific."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    }
  },
  "valve": {
    "open_valve": {
      "name": "Open",
      "description": "Opens a valve.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_valve": {
      "name": "Close",
      "description": "Closes a valve.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_valve_position": {
      "name": "Set position",
      "description": "Moves a valve to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_valve": {
      "name": "Stop",
      "description": "Stops the valve movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a valve open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "valve"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    }
  },
  "habitica": {
    "abort_quest": {
      "name": "Abort an active quest",
      "description": "Terminates your party\u0027s ongoing quest. All progress will be lost and the quest roll returned to the owner\u0027s inventory. Only quest leader or group leader can perform this action.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character for which to perform the action."
        }
      },
      "response": {
        "optional": false
      }
    },
    "accept_quest": {
      "name": "Accept a quest invitation",
      "description": "Accepts a pending invitation to a quest.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character for which to perform the action."
        }
      },
      "response": {
        "optional": false
      }
    },
    "cancel_quest": {
      "name": "Cancel a pending quest",
      "description": "Cancels a quest that has not yet started. All accepted and pending invitations will be canceled and the quest roll returned to the owner\u0027s inventory. Only quest leader or group leader can perform this action.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character for which to perform the action."
        }
      },
      "response": {
        "optional": false
      }
    },
    "leave_quest": {
      "name": "Leave a quest",
      "description": "Leaves the current quest you are participating in.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character for which to perform the action."
        }
      },
      "response": {
        "optional": false
      }
    },
    "reject_quest": {
      "name": "Reject a quest invitation",
      "description": "Rejects a pending invitation to a quest.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character for which to perform the action."
        }
      },
      "response": {
        "optional": false
      }
    },
    "start_quest": {
      "name": "Force-start a pending quest",
      "description": "Begins the quest immediately, bypassing any pending invitations that haven\u0027t been accepted or rejected. Only quest leader or group leader can perform this action.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character for which to perform the action."
        }
      },
      "response": {
        "optional": false
      }
    },
    "update_daily": {
      "name": "Update a daily",
      "description": "Updates a specific daily for a selected Habitica character",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica account to update a task."
        },
        "task": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The name (or task ID) of the daily you want to update."
        },
        "rename": {
          "selector": {
            "text": null
          },
          "name": "Rename",
          "description": "The title for the Habitica task."
        },
        "notes": {
          "required": false,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Notes",
          "description": "The notes for the Habitica task."
        },
        "checklist_options": {
          "collapsed": true,
          "fields": {
            "add_checklist_item": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "remove_checklist_item": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "score_checklist_item": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "unscore_checklist_item": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            }
          }
        },
        "priority": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "trivial",
                "easy",
                "medium",
                "hard"
              ],
              "mode": "dropdown",
              "translation_key": "priority"
            }
          },
          "name": "Difficulty",
          "description": "The difficulty of the task."
        },
        "start_date": {
          "required": false,
          "selector": {
            "date": null
          },
          "name": "Start date",
          "description": "Defines when the daily task becomes active and specifies the exact weekday or day of the month it repeats on."
        },
        "frequency": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "daily",
                "weekly",
                "monthly",
                "yearly"
              ],
              "translation_key": "frequency",
              "mode": "dropdown"
            }
          },
          "name": "Repeat interval",
          "description": "The repetition interval of a daily."
        },
        "every_x": {
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "unit_of_measurement": "\uD83D\uDD03",
              "mode": "box"
            }
          },
          "name": "Repeat every X",
          "description": "The number of intervals (days, weeks, months, or years) after which the daily repeats, based on the chosen repetition interval. A value of 0 makes the daily inactive (\u0027Grey Daily\u0027)."
        },
        "repeat_weekly_options": {
          "collapsed": true,
          "fields": {
            "repeat": {
              "required": false,
              "selector": {
                "select": {
                  "options": [
                    "m",
                    "t",
                    "w",
                    "th",
                    "f",
                    "s",
                    "su"
                  ],
                  "mode": "list",
                  "translation_key": "repeat",
                  "multiple": true
                }
              }
            }
          }
        },
        "repeat_monthly_options": {
          "collapsed": true,
          "fields": {
            "repeat_monthly": {
              "required": false,
              "selector": {
                "select": {
                  "options": [
                    "day_of_month",
                    "day_of_week"
                  ],
                  "translation_key": "repeat_monthly",
                  "mode": "list"
                }
              }
            }
          }
        },
        "reminder_options": {
          "collapsed": true,
          "fields": {
            "reminder": {
              "required": false,
              "selector": {
                "text": {
                  "type": "time",
                  "multiple": true
                }
              }
            },
            "remove_reminder": {
              "required": false,
              "selector": {
                "text": {
                  "type": "time",
                  "multiple": true
                }
              }
            },
            "clear_reminder": {
              "required": false,
              "selector": {
                "constant": {
                  "value": true,
                  "label": "\uD83D\uDDD1\uFE0F"
                }
              }
            }
          }
        },
        "tag_options": {
          "collapsed": true,
          "fields": {
            "tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "remove_tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            }
          }
        },
        "developer_options": {
          "collapsed": true,
          "fields": {
            "streak": {
              "required": false,
              "selector": {
                "number": {
                  "min": 0,
                  "step": 1,
                  "unit_of_measurement": "\u25B6\u25B6",
                  "mode": "box"
                }
              }
            },
            "alias": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    },
    "update_habit": {
      "name": "Update a habit",
      "description": "Updates a specific habit for the selected Habitica character",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica account to update a habit."
        },
        "task": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The name (or task ID) of the task you want to update."
        },
        "rename": {
          "selector": {
            "text": null
          },
          "name": "Rename",
          "description": "The title for the Habitica task."
        },
        "notes": {
          "required": false,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Notes",
          "description": "The notes for the Habitica task."
        },
        "up_down": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "value": "up",
                  "label": "\u2795"
                },
                {
                  "value": "down",
                  "label": "\u2796"
                }
              ],
              "multiple": true,
              "mode": "list"
            }
          },
          "name": "Rewards or losses",
          "description": "Whether the habit is good and rewarding (positive), bad and penalizing (negative), or both."
        },
        "priority": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "trivial",
                "easy",
                "medium",
                "hard"
              ],
              "mode": "dropdown",
              "translation_key": "priority"
            }
          },
          "name": "Difficulty",
          "description": "The difficulty of the task."
        },
        "frequency": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "daily",
                "weekly",
                "monthly"
              ],
              "translation_key": "frequency",
              "mode": "dropdown"
            }
          },
          "name": "Counter reset",
          "description": "The frequency at which the habit\u0027s counter resets: daily at the start of a new day, weekly after Sunday night, or monthly at the beginning of a new month."
        },
        "tag_options": {
          "collapsed": true,
          "fields": {
            "tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "remove_tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            }
          }
        },
        "developer_options": {
          "collapsed": true,
          "fields": {
            "counter_up": {
              "required": false,
              "selector": {
                "number": {
                  "min": 0,
                  "step": 1,
                  "unit_of_measurement": "\u2795",
                  "mode": "box"
                }
              }
            },
            "counter_down": {
              "required": false,
              "selector": {
                "number": {
                  "min": 0,
                  "step": 1,
                  "unit_of_measurement": "\u2796",
                  "mode": "box"
                }
              }
            },
            "alias": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    },
    "update_reward": {
      "name": "Update a reward",
      "description": "Updates a specific reward for the selected Habitica character",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica account to update a reward."
        },
        "task": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The name (or task ID) of the task you want to update."
        },
        "rename": {
          "selector": {
            "text": null
          },
          "name": "Rename",
          "description": "The title for the Habitica task."
        },
        "notes": {
          "required": false,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Notes",
          "description": "The notes for the Habitica task."
        },
        "cost": {
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 0.01,
              "unit_of_measurement": "\uD83E\uDE99",
              "mode": "box"
            }
          },
          "name": "Cost",
          "description": "Update the cost of a reward."
        },
        "tag_options": {
          "collapsed": true,
          "fields": {
            "tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "remove_tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            }
          }
        },
        "developer_options": {
          "collapsed": true,
          "fields": {
            "alias": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    },
    "update_todo": {
      "name": "Update a to-do",
      "description": "Updates a specific to-do for a selected Habitica character",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica account to update a task."
        },
        "task": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The name (or task ID) of the to-do you want to update."
        },
        "rename": {
          "selector": {
            "text": null
          },
          "name": "Rename",
          "description": "The title for the Habitica task."
        },
        "notes": {
          "required": false,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Notes",
          "description": "The notes for the Habitica task."
        },
        "checklist_options": {
          "collapsed": true,
          "fields": {
            "add_checklist_item": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "remove_checklist_item": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "score_checklist_item": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "unscore_checklist_item": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            }
          }
        },
        "priority": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "trivial",
                "easy",
                "medium",
                "hard"
              ],
              "mode": "dropdown",
              "translation_key": "priority"
            }
          },
          "name": "Difficulty",
          "description": "The difficulty of the task."
        },
        "duedate_options": {
          "collapsed": true,
          "fields": {
            "date": {
              "required": false,
              "selector": {
                "date": null
              }
            },
            "clear_date": {
              "required": false,
              "selector": {
                "constant": {
                  "value": true,
                  "label": "\uD83D\uDDD1\uFE0F"
                }
              }
            }
          }
        },
        "reminder_options": {
          "collapsed": true,
          "fields": {
            "reminder": {
              "required": false,
              "selector": {
                "text": {
                  "type": "datetime-local",
                  "multiple": true
                }
              }
            },
            "remove_reminder": {
              "required": false,
              "selector": {
                "text": {
                  "type": "datetime-local",
                  "multiple": true
                }
              }
            },
            "clear_reminder": {
              "required": false,
              "selector": {
                "constant": {
                  "value": true,
                  "label": "\uD83D\uDDD1\uFE0F"
                }
              }
            }
          }
        },
        "tag_options": {
          "collapsed": true,
          "fields": {
            "tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "remove_tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            }
          }
        },
        "developer_options": {
          "collapsed": true,
          "fields": {
            "alias": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    },
    "create_daily": {
      "name": "Create a daily",
      "description": "Adds a new daily.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica account to update a task."
        },
        "name": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The title for the Habitica task."
        },
        "notes": {
          "required": false,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Notes",
          "description": "The notes for the Habitica task."
        },
        "add_checklist_item": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Checklist",
          "description": "The items to add to a task\u0027s checklist."
        },
        "priority": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "trivial",
                "easy",
                "medium",
                "hard"
              ],
              "mode": "dropdown",
              "translation_key": "priority"
            }
          },
          "name": "Difficulty",
          "description": "The difficulty of the task."
        },
        "start_date": {
          "required": false,
          "selector": {
            "date": null
          },
          "name": "Start date",
          "description": "Defines when the daily task becomes active and specifies the exact weekday or day of the month it repeats on."
        },
        "frequency": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "daily",
                "weekly",
                "monthly",
                "yearly"
              ],
              "translation_key": "frequency",
              "mode": "dropdown"
            }
          },
          "name": "Repeat interval",
          "description": "The repetition interval of a daily."
        },
        "every_x": {
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "unit_of_measurement": "\uD83D\uDD03",
              "mode": "box"
            }
          },
          "name": "Repeat every X",
          "description": "The number of intervals (days, weeks, months, or years) after which the daily repeats, based on the chosen repetition interval. A value of 0 makes the daily inactive (\u0027Grey Daily\u0027)."
        },
        "repeat_weekly_options": {
          "collapsed": true,
          "fields": {
            "repeat": {
              "required": false,
              "selector": {
                "select": {
                  "options": [
                    "m",
                    "t",
                    "w",
                    "th",
                    "f",
                    "s",
                    "su"
                  ],
                  "mode": "list",
                  "translation_key": "repeat",
                  "multiple": true
                }
              }
            }
          }
        },
        "repeat_monthly_options": {
          "collapsed": true,
          "fields": {
            "repeat_monthly": {
              "required": false,
              "selector": {
                "select": {
                  "options": [
                    "day_of_month",
                    "day_of_week"
                  ],
                  "translation_key": "repeat_monthly",
                  "mode": "list"
                }
              }
            }
          }
        },
        "reminder": {
          "required": false,
          "selector": {
            "text": {
              "type": "time",
              "multiple": true
            }
          },
          "name": "Reminders",
          "description": "Add reminders to a Habitica task."
        },
        "tag": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Tags",
          "description": "Add tags to the Habitica task. If a tag does not already exist, a new one will be created."
        },
        "developer_options": {
          "collapsed": true,
          "fields": {
            "alias": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    },
    "create_habit": {
      "name": "Create habit",
      "description": "Adds a new habit.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica account to create a habit."
        },
        "name": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The title for the Habitica task."
        },
        "notes": {
          "required": false,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Notes",
          "description": "The notes for the Habitica task."
        },
        "up_down": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "value": "up",
                  "label": "\u2795"
                },
                {
                  "value": "down",
                  "label": "\u2796"
                }
              ],
              "multiple": true,
              "mode": "list"
            }
          },
          "name": "Rewards or losses",
          "description": "Whether the habit is good and rewarding (positive), bad and penalizing (negative), or both."
        },
        "priority": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "trivial",
                "easy",
                "medium",
                "hard"
              ],
              "mode": "dropdown",
              "translation_key": "priority"
            }
          },
          "name": "Difficulty",
          "description": "The difficulty of the task."
        },
        "frequency": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "daily",
                "weekly",
                "monthly"
              ],
              "translation_key": "frequency",
              "mode": "dropdown"
            }
          },
          "name": "Counter reset",
          "description": "The frequency at which the habit\u0027s counter resets: daily at the start of a new day, weekly after Sunday night, or monthly at the beginning of a new month."
        },
        "tag": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Tags",
          "description": "Add tags to the Habitica task. If a tag does not already exist, a new one will be created."
        },
        "developer_options": {
          "collapsed": true,
          "fields": {
            "alias": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    },
    "create_reward": {
      "name": "Create reward",
      "description": "Adds a new custom reward.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica account to create a reward."
        },
        "name": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The title for the Habitica task."
        },
        "notes": {
          "required": false,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Notes",
          "description": "The notes for the Habitica task."
        },
        "cost": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "step": 0.01,
              "unit_of_measurement": "\uD83E\uDE99",
              "mode": "box"
            }
          },
          "name": "Cost",
          "description": "The cost of the reward."
        },
        "tag": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Tags",
          "description": "Add tags to the Habitica task. If a tag does not already exist, a new one will be created."
        },
        "developer_options": {
          "collapsed": true,
          "fields": {
            "alias": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    },
    "create_todo": {
      "name": "Create to-do",
      "description": "Adds a new to-do.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica account to create a to-do."
        },
        "name": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The title for the Habitica task."
        },
        "notes": {
          "required": false,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Notes",
          "description": "The notes for the Habitica task."
        },
        "add_checklist_item": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Checklist",
          "description": "The items to add to a task\u0027s checklist."
        },
        "priority": {
          "required": false,
          "selector": {
            "select": {
              "options": [
                "trivial",
                "easy",
                "medium",
                "hard"
              ],
              "mode": "dropdown",
              "translation_key": "priority"
            }
          },
          "name": "Difficulty",
          "description": "The difficulty of the task."
        },
        "date": {
          "required": false,
          "selector": {
            "date": null
          },
          "name": "Due date",
          "description": "The to-do\u0027s due date."
        },
        "reminder": {
          "required": false,
          "selector": {
            "text": {
              "type": "datetime-local",
              "multiple": true
            }
          },
          "name": "Reminders",
          "description": "Add reminders to a Habitica task."
        },
        "tag": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Tags",
          "description": "Add tags to the Habitica task. If a tag does not already exist, a new one will be created."
        },
        "developer_options": {
          "collapsed": true,
          "fields": {
            "alias": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    },
    "api_call": {
      "name": "API name",
      "description": "Calls Habitica API.",
      "fields": {
        "name": {
          "required": true,
          "example": "xxxNotAValidNickxxx",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Habitica\u0027s username to call for."
        },
        "path": {
          "required": true,
          "example": "[\u0022tasks\u0022, \u0022user\u0022, \u0022post\u0022]",
          "selector": {
            "object": null
          },
          "name": "Path",
          "description": "Items from API URL in form of an array with method attached at the end. Consult https://habitica.com/apidoc/. Example uses https://habitica.com/apidoc/#api-Task-CreateUserTasks."
        },
        "args": {
          "example": "{\u0022text\u0022: \u0022Use API from Home Assistant\u0022, \u0022type\u0022: \u0022todo\u0022}",
          "selector": {
            "object": null
          },
          "name": "Args",
          "description": "Any additional JSON or URL parameter arguments. See apidoc mentioned for path. Example uses same API endpoint."
        }
      }
    },
    "cast_skill": {
      "name": "Cast a skill",
      "description": "Uses a skill or spell from your Habitica character on a specific task to affect its progress or status.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character to cast the skill."
        },
        "skill": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "pickpocket",
                "backstab",
                "smash",
                "fireball"
              ],
              "mode": "dropdown",
              "translation_key": "skill_select"
            }
          },
          "name": "Skill",
          "description": "Select the skill or spell you want to cast on the task. Only skills corresponding to your character\u0027s class can be used."
        },
        "task": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Task name",
          "description": "The name (or task ID) of the task you want to target with the skill or spell."
        }
      },
      "response": {
        "optional": false
      }
    },
    "score_habit": {
      "name": "Track a habit",
      "description": "Increases the positive or negative streak of a habit to track its progress.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica character tracking your habit."
        },
        "task": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Habit name",
          "description": "The name (or task ID) of the Habitica habit."
        },
        "direction": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                {
                  "value": "up",
                  "label": "\u2795"
                },
                {
                  "value": "down",
                  "label": "\u2796"
                }
              ]
            }
          },
          "name": "Reward or loss",
          "description": "Is it positive or negative progress you want to track for your habit."
        }
      },
      "response": {
        "optional": false
      }
    },
    "score_reward": {
      "name": "Buy a reward",
      "description": "Buys one of your custom rewards with gold earned by fulfilling tasks.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Select the Habitica character buying the reward."
        },
        "task": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Reward name",
          "description": "The name (or task ID) of the custom reward."
        }
      },
      "response": {
        "optional": false
      }
    },
    "transformation": {
      "name": "Use a transformation item",
      "description": "Uses a transformation item from your Habitica character\u0027s inventory on a member of your party or yourself.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character to use the transformation item."
        },
        "item": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "snowball",
                "spooky_sparkles",
                "seafoam",
                "shiny_seed"
              ],
              "mode": "dropdown",
              "translation_key": "transformation_item_select"
            }
          },
          "name": "Transformation item",
          "description": "Select the transformation item you want to use. Item must be in the characters inventory."
        },
        "target": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Target character",
          "description": "The name of the character you want to use the transformation item on. You can also specify the players username or user ID."
        }
      },
      "response": {
        "optional": false
      }
    },
    "get_tasks": {
      "name": "Get tasks",
      "description": "Retrieves tasks from your Habitica character.",
      "fields": {
        "config_entry": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "habitica"
            }
          },
          "name": "Select character",
          "description": "Choose the Habitica character to retrieve tasks from."
        },
        "filter": {
          "collapsed": true,
          "fields": {
            "type": {
              "required": false,
              "selector": {
                "select": {
                  "options": [
                    "habit",
                    "daily",
                    "todo",
                    "reward"
                  ],
                  "mode": "dropdown",
                  "translation_key": "type",
                  "multiple": true,
                  "sort": true
                }
              }
            },
            "priority": {
              "required": false,
              "selector": {
                "select": {
                  "options": [
                    "trivial",
                    "easy",
                    "medium",
                    "hard"
                  ],
                  "mode": "dropdown",
                  "translation_key": "priority",
                  "multiple": true,
                  "sort": false
                }
              }
            },
            "task": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "tag": {
              "required": false,
              "selector": {
                "text": {
                  "multiple": true
                }
              }
            },
            "keyword": {
              "required": false,
              "selector": {
                "text": null
              }
            }
          }
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increments a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Resets a counter to its initial value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the counter to a specific value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The new counter value the entity should be set to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "topic": {
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "example": "The temperature is {{ states(\u0027sensor.temperature\u0027) }}",
          "selector": {
            "template": null
          },
          "name": "Payload",
          "description": "The payload to publish. Publishes an empty message if not provided."
        },
        "evaluate_payload": {
          "advanced": true,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Evaluate payload",
          "description": "If \u0027Payload\u0027 is a Python bytes literal, evaluate the bytes literal and publish the raw data."
        },
        "qos": {
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": [
                "0",
                "1",
                "2"
              ]
            }
          },
          "name": "QoS",
          "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the \u0060mqtt_dump.txt\u0060 file in your configuration folder.",
      "fields": {
        "topic": {
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to listen to."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads MQTT entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "google_generative_ai_conversation": {
    "generate_content": {
      "name": "Generate content",
      "description": "Generate content from a prompt consisting of text and optionally images",
      "fields": {
        "prompt": {
          "required": true,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Prompt",
          "description": "The prompt",
          "example": "Describe what you see in these images"
        },
        "image_filename": {
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Image filename",
          "description": "Deprecated. Use filenames instead.",
          "example": "/config/www/image.jpg"
        },
        "filenames": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Attachment filenames",
          "description": "Attachments to add to the prompt (images, PDFs, etc)",
          "example": "/config/www/image.jpg"
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "localtuya": {
    "reload": {
      "name": "Reload",
      "description": "Reload localtuya and reconnect to all devices.",
      "fields": {}
    },
    "set_dp": {
      "name": "Set datapoint",
      "description": "Change the value of a datapoint (DP)",
      "fields": {
        "device_id": {
          "description": "Device ID of device to change datapoint value for",
          "example": "11100118278aab4de001",
          "name": "Device ID"
        },
        "dp": {
          "description": "Datapoint index",
          "example": 1,
          "name": "DP"
        },
        "value": {
          "description": "New value to set",
          "example": false,
          "name": "Value"
        }
      }
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              384
            ]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turns up the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turns down the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggles play/pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16385
            ]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Starts playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16384
            ]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Pauses.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Stops playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4096
            ]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Selects the next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Selects the previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Removes all items from the playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Sets the volume level.",
      "fields": {
        "volume_level": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Level",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute/unmute volume",
      "description": "Mutes or unmutes the media player.",
      "fields": {
        "is_volume_muted": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Muted",
          "description": "Defines whether or not it is muted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Allows you to go to a different part of the media that is currently playing.",
      "fields": {
        "seek_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.01,
              "mode": "box"
            }
          },
          "name": "Position",
          "description": "Target position in the currently playing media. The format is platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Groups media players together for synchronous playback. Only works on supported multiroom audio systems.",
      "fields": {
        "group_members": {
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          },
          "name": "Group members",
          "description": "The players which will be synced with the playback specified in \u0027Targets\u0027."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Sends the media player the command to change input source.",
      "fields": {
        "source": {
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          },
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2048
            ]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Selects a specific sound mode.",
      "fields": {
        "sound_mode": {
          "example": "Music",
          "selector": {
            "text": null
          },
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              65536
            ]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Starts playing specified media.",
      "fields": {
        "media_content_id": {
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent."
        },
        "media_content_type": {
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "enqueue": {
          "filter": {
            "supported_features": [
              2097152
            ]
          },
          "required": false,
          "selector": {
            "select": {
              "options": [
                "play",
                "next",
                "add",
                "replace"
              ],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue."
        },
        "announce": {
          "filter": {
            "supported_features": [
              1048576
            ]
          },
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Announce",
          "description": "If the media should be played as an announcement."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "browse_media": {
      "name": "Browse media",
      "description": "Browses the available media.",
      "fields": {
        "media_content_type": {
          "required": false,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "media_content_id": {
          "required": false,
          "example": "A:ALBUMARTIST/Beatles",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to browse. Integration dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "shuffle_set": {
      "name": "Set shuffle",
      "description": "Enables or disables the shuffle mode.",
      "fields": {
        "shuffle": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Shuffle mode",
          "description": "Whether the media should be played in randomized order or not."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32768
            ]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Removes the player from a group. Only works on platforms which support player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Set repeat",
      "description": "Sets the repeat mode.",
      "fields": {
        "repeat": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "off",
                "all",
                "one"
              ],
              "translation_key": "repeat"
            }
          },
          "name": "Repeat mode",
          "description": "Whether the media (one or all) should be played in a loop or not."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              262144
            ]
          }
        ]
      }
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from a camera.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Plays the camera stream on a supported media player.",
      "fields": {
        "media_player": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player",
          "description": "Media players to stream to."
        },
        "format": {
          "default": "hls",
          "selector": {
            "select": {
              "options": [
                "hls"
              ]
            }
          },
          "name": "Format",
          "description": "Stream format supported by the media player."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Creates a recording of a live camera feed.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename. Must be mp4."
        },
        "duration": {
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Planned duration of the recording. The actual duration may vary."
        },
        "lookback": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Lookback",
          "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "browser_mod": {
    "sequence": {
      "name": "sequence",
      "description": "Run a sequence of services",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "sequence": {
          "name": "Actions",
          "description": "List of services to run",
          "selector": {
            "object": null
          }
        }
      }
    },
    "delay": {
      "name": "delay",
      "description": "Wait for a time",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "time": {
          "name": "Time",
          "description": "Time to wait (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "popup": {
      "name": "popup",
      "description": "Display a popup",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "title": {
          "name": "Title",
          "description": "Popup title",
          "selector": {
            "text": null
          }
        },
        "content": {
          "name": "Content",
          "required": true,
          "description": "Popup content (Test or lovelace card configuration)",
          "selector": {
            "object": null
          }
        },
        "size": {
          "name": "Size",
          "description": "",
          "selector": {
            "select": {
              "mode": "dropdown",
              "options": [
                "normal",
                "wide",
                "fullscreen"
              ]
            }
          }
        },
        "right_button": {
          "name": "Right button",
          "description": "Text of the right button",
          "selector": {
            "text": null
          }
        },
        "right_button_action": {
          "name": "Right button action",
          "description": "Action to perform when the right button is pressed",
          "selector": {
            "object": null
          }
        },
        "left_button": {
          "name": "Left button",
          "description": "Text of the left button",
          "selector": {
            "text": null
          }
        },
        "left_button_action": {
          "name": "Left button action",
          "description": "Action to perform when left button is pressed",
          "selector": {
            "object": null
          }
        },
        "dismissable": {
          "name": "User dismissable",
          "description": "Whether the popup can be closed by the user without action",
          "default": true,
          "selector": {
            "boolean": null
          }
        },
        "dismiss_action": {
          "name": "Dismiss action",
          "description": "Action to perform when popup is dismissed",
          "selector": {
            "object": null
          }
        },
        "autoclose": {
          "name": "Auto close",
          "description": "Close the popup automatically on mouse, pointer or keyboard activity",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Auto close timeout",
          "description": "Time before closing (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "timeout_action": {
          "name": "Timeout action",
          "description": "Action to perform when popup is closed by timeout",
          "selector": {
            "object": null
          }
        },
        "style": {
          "name": "Styles",
          "description": "CSS code to apply to the popup window",
          "selector": {
            "text": {
              "multiline": true
            }
          }
        }
      }
    },
    "more_info": {
      "name": "more_info",
      "description": "Show more-info dialog",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "entity": {
          "name": "Entity ID",
          "description": "",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "large": {
          "name": "Large size",
          "description": "",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "ignore_popup_card": {
          "name": "Ignore any active popup-card overrides",
          "description": "",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "close_popup": {
      "name": "close_popup",
      "description": "Close a popup",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        }
      }
    },
    "notification": {
      "name": "notification",
      "description": "Display a short notification",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Message to display",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "duration": {
          "name": "Auto close timeout",
          "description": "Time before closing (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "action_text": {
          "name": "Action button text",
          "description": "Text of optional action button",
          "selector": {
            "text": null
          }
        },
        "action": {
          "name": "Button action",
          "description": "Action to perform when the action button is pressed",
          "selector": {
            "object": null
          }
        }
      }
    },
    "navigate": {
      "name": "navigate",
      "description": "Navigate browser to a different page",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "path": {
          "name": "Path",
          "description": "Target path",
          "selector": {
            "text": null
          }
        }
      }
    },
    "refresh": {
      "name": "refresh",
      "description": "Refresh page",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        }
      }
    },
    "set_theme": {
      "name": "set_theme",
      "description": "Change the current theme",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "theme": {
          "name": "Theme",
          "description": "Name of theme or \u0027auto\u0027",
          "selector": {
            "text": null
          }
        },
        "dark": {
          "name": "Mode",
          "description": "Dark/light mode",
          "selector": {
            "select": {
              "options": [
                "auto",
                "light",
                "dark"
              ]
            }
          }
        },
        "primaryColor": {
          "name": "Primary Color",
          "description": "Primary theme color",
          "selector": {
            "color_rgb": null
          }
        },
        "accentColor": {
          "name": "Accent Color",
          "description": "Accent theme color",
          "selector": {
            "color_rgb": null
          }
        }
      }
    },
    "console": {
      "name": "console",
      "description": "Print text to browser console",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Text to print",
          "selector": {
            "text": null
          }
        }
      }
    },
    "javascript": {
      "name": "javascript",
      "description": "Run arbitrary JavaScript code",
      "fields": {
        "browser_id": {
          "name": "Target",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "JavaScript code to run",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "music_assistant": {
    "search": {
      "name": "Search Music Assistant",
      "description": "Performs a global search on the Music Assistant library and all providers.",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "music_assistant"
            }
          },
          "name": "Music Assistant instance",
          "description": "Select the Music Assistant instance to perform the search on."
        },
        "name": {
          "required": true,
          "example": "We Are The Champions",
          "selector": {
            "text": null
          },
          "name": "Search name",
          "description": "The name/title to search for."
        },
        "media_type": {
          "example": "playlist",
          "selector": {
            "select": {
              "multiple": true,
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type(s)",
          "description": "The type of the content to search. Such as artist, album, track, radio, or playlist. All types if omitted."
        },
        "artist": {
          "example": "Queen",
          "selector": {
            "text": null
          },
          "name": "Artist name",
          "description": "When specifying a track or album name in the name field, you can optionally restrict results by this artist name."
        },
        "album": {
          "example": "News of the world",
          "selector": {
            "text": null
          },
          "name": "Album name",
          "description": "When specifying a track name in the name field, you can optionally restrict results by this album name."
        },
        "limit": {
          "advanced": true,
          "example": 25,
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "step": 1
            }
          },
          "name": "Limit",
          "description": "Maximum number of items to return (per media type)."
        },
        "library_only": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Only library items",
          "description": "Only include results that are in the library."
        }
      },
      "response": {
        "optional": false
      }
    },
    "get_library": {
      "name": "Get library items",
      "description": "Retrieves items from a Music Assistant library.",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "music_assistant"
            }
          },
          "name": "Music Assistant instance",
          "description": "Select the Music Assistant instance to perform the search on."
        },
        "media_type": {
          "required": true,
          "example": "playlist",
          "selector": {
            "select": {
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type",
          "description": "The media type for which to request details for."
        },
        "favorite": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Favorites only",
          "description": "Filter items so only favorites items are returned."
        },
        "search": {
          "example": "We Are The Champions",
          "selector": {
            "text": null
          },
          "name": "Search",
          "description": "Optional search string to search through this library."
        },
        "limit": {
          "advanced": true,
          "example": 25,
          "default": 25,
          "selector": {
            "number": {
              "min": 1,
              "max": 500,
              "step": 1
            }
          },
          "name": "Limit",
          "description": "Maximum number of items to return."
        },
        "offset": {
          "advanced": true,
          "example": 25,
          "default": 0,
          "selector": {
            "number": {
              "min": 1,
              "max": 1000000,
              "step": 1
            }
          },
          "name": "Offset",
          "description": "Offset to start the list from."
        },
        "order_by": {
          "example": "random",
          "selector": {
            "select": {
              "translation_key": "order_by",
              "options": [
                "name",
                "name_desc",
                "sort_name",
                "sort_name_desc",
                "timestamp_added",
                "timestamp_added_desc",
                "last_played",
                "last_played_desc",
                "play_count",
                "play_count_desc",
                "year",
                "year_desc",
                "position",
                "position_desc",
                "artist_name",
                "artist_name_desc",
                "random",
                "random_play_count"
              ]
            }
          },
          "name": "Order by",
          "description": "Sort the list by this field."
        },
        "album_type": {
          "example": "single",
          "selector": {
            "select": {
              "multiple": true,
              "translation_key": "album_type",
              "options": [
                "album",
                "single",
                "compilation",
                "ep",
                "unknown"
              ]
            }
          },
          "name": "Album type filter (albums library only)",
          "description": "Filter albums by type."
        },
        "album_artists_only": {
          "example": "true",
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Enable album artists filter (only for artist library)",
          "description": "Only return album artists when listing the artists library items."
        }
      },
      "response": {
        "optional": false
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Plays media on a Music Assistant player with more fine-grained control options.",
      "fields": {
        "media_id": {
          "required": true,
          "example": "spotify://playlist/aabbccddeeff",
          "selector": {
            "object": null
          },
          "name": "Media ID(s)",
          "description": "URI or name of the item you want to play. Specify a list if you want to play/enqueue multiple items."
        },
        "media_type": {
          "example": "playlist",
          "selector": {
            "select": {
              "translation_key": "media_type",
              "options": [
                "artist",
                "album",
                "audiobook",
                "folder",
                "playlist",
                "podcast",
                "track",
                "radio"
              ]
            }
          },
          "name": "Media type",
          "description": "The type of the content to play. Such as artist, album, track or playlist. Will be auto-determined if omitted."
        },
        "artist": {
          "example": "Queen",
          "selector": {
            "text": null
          },
          "name": "Artist name",
          "description": "When specifying a track or album by name in the Media ID field, you can optionally restrict results by this artist name."
        },
        "album": {
          "example": "News of the world",
          "selector": {
            "text": null
          },
          "name": "Album name",
          "description": "When specifying a track by name in the Media ID field, you can optionally restrict results by this album name."
        },
        "enqueue": {
          "selector": {
            "select": {
              "options": [
                "play",
                "replace",
                "next",
                "replace_next",
                "add"
              ],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or added to the queue."
        },
        "radio_mode": {
          "advanced": true,
          "selector": {
            "boolean": null
          },
          "name": "Enable radio mode",
          "description": "Enable radio mode to auto-generate a playlist based on the selection."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "integration": "music_assistant",
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "play_announcement": {
      "name": "Play announcement",
      "description": "Plays an announcement on a Music Assistant player with more fine-grained control options.",
      "fields": {
        "url": {
          "required": true,
          "example": "http://someremotesite.com/doorbell.mp3",
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "URL to the notification sound."
        },
        "use_pre_announce": {
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Use pre-announce",
          "description": "Use pre-announcement sound for the announcement. Omit to use the player default."
        },
        "announce_volume": {
          "example": 75,
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "step": 1
            }
          },
          "name": "Announce volume",
          "description": "Use a forced volume level for the announcement. Omit to use player default."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "integration": "music_assistant",
            "supported_features": [
              512,
              1048576
            ]
          }
        ]
      }
    },
    "transfer_queue": {
      "name": "Transfer queue",
      "description": "Transfers a player\u0027s queue to another player.",
      "fields": {
        "source_player": {
          "selector": {
            "entity": {
              "domain": "media_player",
              "integration": "music_assistant"
            }
          },
          "name": "Source media player",
          "description": "The source media player which has the queue you want to transfer. When omitted, the first playing player will be used."
        },
        "auto_play": {
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Auto play",
          "description": "Start playing the queue on the target player. Omit to use the default behavior."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "integration": "music_assistant"
          }
        ]
      }
    },
    "get_queue": {
      "name": "Get playerQueue details (advanced)",
      "description": "Retrieves the details of the currently active queue of a Music Assistant player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "integration": "music_assistant",
            "supported_features": [
              512
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_text"
            ]
          }
        ]
      }
    }
  },
  "template": {
    "reload": {
      "name": "Reload",
      "description": "Reloads template entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "onedrive": {
    "upload": {
      "name": "Upload file",
      "description": "Uploads files to OneDrive.",
      "fields": {
        "config_entry_id": {
          "required": true,
          "selector": {
            "config_entry": {
              "integration": "onedrive"
            }
          },
          "name": "Config entry ID",
          "description": "The config entry representing the OneDrive you want to upload to."
        },
        "filename": {
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Filename",
          "description": "Path to the file to upload.",
          "example": "/config/www/image.jpg"
        },
        "destination_folder": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Destination folder",
          "description": "Folder inside the Home Assistant app folder (Apps/Home Assistant) you want to upload the file to. Will be created if it does not exist.",
          "example": "photos/snapshots"
        }
      },
      "response": {
        "optional": true
      }
    }
  },
  "todo": {
    "add_item": {
      "name": "Add item",
      "description": "Adds a new to-do list item.",
      "fields": {
        "item": {
          "required": true,
          "example": "Submit income tax return",
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The name that represents the to-do item."
        },
        "due_date": {
          "filter": {
            "supported_features": [
              16
            ]
          },
          "example": "2023-11-17",
          "selector": {
            "date": null
          },
          "name": "Due date",
          "description": "The date the to-do item is expected to be completed."
        },
        "due_datetime": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "example": "2023-11-17 13:30:00",
          "selector": {
            "datetime": null
          },
          "name": "Due date and time",
          "description": "The date and time the to-do item is expected to be completed."
        },
        "description": {
          "filter": {
            "supported_features": [
              64
            ]
          },
          "example": "A more complete description of the to-do item than that provided by the summary.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the to-do item than provided by the item name."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "update_item": {
      "name": "Update item",
      "description": "Updates an existing to-do list item based on its name.",
      "fields": {
        "item": {
          "required": true,
          "example": "Submit income tax return",
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The current name of the to-do item."
        },
        "rename": {
          "example": "Something else",
          "selector": {
            "text": null
          },
          "name": "Rename item",
          "description": "The new name for the to-do item"
        },
        "status": {
          "example": "needs_action",
          "selector": {
            "select": {
              "translation_key": "status",
              "options": [
                "needs_action",
                "completed"
              ]
            }
          },
          "name": "Set status",
          "description": "A status or confirmation of the to-do item."
        },
        "due_date": {
          "filter": {
            "supported_features": [
              16
            ]
          },
          "example": "2023-11-17",
          "selector": {
            "date": null
          },
          "name": "Due date",
          "description": "The date the to-do item is expected to be completed."
        },
        "due_datetime": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "example": "2023-11-17 13:30:00",
          "selector": {
            "datetime": null
          },
          "name": "Due date and time",
          "description": "The date and time the to-do item is expected to be completed."
        },
        "description": {
          "filter": {
            "supported_features": [
              64
            ]
          },
          "example": "A more complete description of the to-do item than that provided by the summary.",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "A more complete description of the to-do item than provided by the item name."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "remove_item": {
      "name": "Remove item",
      "description": "Removes an existing to-do list item by its name.",
      "fields": {
        "item": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Item name",
          "description": "The name for the to-do list item."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "get_items": {
      "name": "Get items",
      "description": "Gets items on a to-do list.",
      "fields": {
        "status": {
          "example": "needs_action",
          "default": "needs_action",
          "selector": {
            "select": {
              "translation_key": "status",
              "options": [
                "needs_action",
                "completed"
              ],
              "multiple": true
            }
          },
          "name": "Status",
          "description": "Only return to-do items with the specified statuses. Returns not completed actions by default."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "remove_completed_items": {
      "name": "Remove completed items",
      "description": "Removes all to-do list items that have been completed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "todo"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    }
  },
  "notify": {
    "send_message": {
      "name": "Send a notification message",
      "description": "Sends a notification message.",
      "fields": {
        "message": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Your notification message."
        },
        "title": {
          "required": false,
          "selector": {
            "text": null
          },
          "filter": {
            "supported_features": [
              1
            ]
          },
          "name": "Title",
          "description": "Title for your notification message."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "notify"
            ]
          }
        ]
      }
    },
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Title of the notification."
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Data",
          "description": "Some integrations provide extended functionality via this field. For more information, refer to the integration documentation."
        }
      }
    },
    "phones": {
      "name": "Send a notification with phones",
      "description": "Sends a notification message using the phones service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media": {
      "name": "Send a notification with alexa_media",
      "description": "Sends a notification message using the alexa_media service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_claireiphone": {
      "name": "Send a notification via mobile_app_claireiphone",
      "description": "Sends a notification message using the mobile_app_claireiphone integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_pixel_6": {
      "name": "Send a notification via mobile_app_pixel_6",
      "description": "Sends a notification message using the mobile_app_pixel_6 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_pixel_watch": {
      "name": "Send a notification via mobile_app_pixel_watch",
      "description": "Sends a notification message using the mobile_app_pixel_watch integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_hall_tablet": {
      "name": "Send a notification via alexa_media_hall_tablet",
      "description": "Sends a notification message using the alexa_media_hall_tablet integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_landing_tablet": {
      "name": "Send a notification via alexa_media_landing_tablet",
      "description": "Sends a notification message using the alexa_media_landing_tablet integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_all_speakers": {
      "name": "Send a notification via alexa_media_all_speakers",
      "description": "Sends a notification message using the alexa_media_all_speakers integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_kitchen_echo_show": {
      "name": "Send a notification via alexa_media_kitchen_echo_show",
      "description": "Sends a notification message using the alexa_media_kitchen_echo_show integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_drawing_room_echo_dot": {
      "name": "Send a notification via alexa_media_drawing_room_echo_dot",
      "description": "Sends a notification message using the alexa_media_drawing_room_echo_dot integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_bedroom_echo_show": {
      "name": "Send a notification via alexa_media_bedroom_echo_show",
      "description": "Sends a notification message using the alexa_media_bedroom_echo_show integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_guest_room_echo_show": {
      "name": "Send a notification via alexa_media_guest_room_echo_show",
      "description": "Sends a notification message using the alexa_media_guest_room_echo_show integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_snug_fire_tv": {
      "name": "Send a notification via alexa_media_snug_fire_tv",
      "description": "Sends a notification message using the alexa_media_snug_fire_tv integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_upstairs": {
      "name": "Send a notification via alexa_media_upstairs",
      "description": "Sends a notification message using the alexa_media_upstairs integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_downstairs": {
      "name": "Send a notification via alexa_media_downstairs",
      "description": "Sends a notification message using the alexa_media_downstairs integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_lounge_fire_tv": {
      "name": "Send a notification via alexa_media_lounge_fire_tv",
      "description": "Sends a notification message using the alexa_media_lounge_fire_tv integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_andrew_s_echo_buds": {
      "name": "Send a notification via alexa_media_andrew_s_echo_buds",
      "description": "Sends a notification message using the alexa_media_andrew_s_echo_buds integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_andrew_s_echo_buds_2": {
      "name": "Send a notification via alexa_media_andrew_s_echo_buds_2",
      "description": "Sends a notification message using the alexa_media_andrew_s_echo_buds_2 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_andrew_s_echo_buds_3": {
      "name": "Send a notification via alexa_media_andrew_s_echo_buds_3",
      "description": "Sends a notification message using the alexa_media_andrew_s_echo_buds_3 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_andrew_s_echo_buds_4": {
      "name": "Send a notification via alexa_media_andrew_s_echo_buds_4",
      "description": "Sends a notification message using the alexa_media_andrew_s_echo_buds_4 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_dining_room_echo_input": {
      "name": "Send a notification via alexa_media_dining_room_echo_input",
      "description": "Sends a notification message using the alexa_media_dining_room_echo_input integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_basement": {
      "name": "Send a notification via alexa_media_basement",
      "description": "Sends a notification message using the alexa_media_basement integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_snug_echo_show": {
      "name": "Send a notification via alexa_media_snug_echo_show",
      "description": "Sends a notification message using the alexa_media_snug_echo_show integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_shed_echo_input": {
      "name": "Send a notification via alexa_media_shed_echo_input",
      "description": "Sends a notification message using the alexa_media_shed_echo_input integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_offices": {
      "name": "Send a notification via alexa_media_offices",
      "description": "Sends a notification message using the alexa_media_offices integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_patio": {
      "name": "Send a notification via alexa_media_patio",
      "description": "Sends a notification message using the alexa_media_patio integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_garden": {
      "name": "Send a notification via alexa_media_garden",
      "description": "Sends a notification message using the alexa_media_garden integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_andrew_s_samsung_tv_2020_u": {
      "name": "Send a notification via alexa_media_andrew_s_samsung_tv_2020_u",
      "description": "Sends a notification message using the alexa_media_andrew_s_samsung_tv_2020_u integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_dressing_room_echo_spot": {
      "name": "Send a notification via alexa_media_dressing_room_echo_spot",
      "description": "Sends a notification message using the alexa_media_dressing_room_echo_spot integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_studio_echo_dot": {
      "name": "Send a notification via alexa_media_studio_echo_dot",
      "description": "Sends a notification message using the alexa_media_studio_echo_dot integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_utility_room_echo_dot": {
      "name": "Send a notification via alexa_media_utility_room_echo_dot",
      "description": "Sends a notification message using the alexa_media_utility_room_echo_dot integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_lounge_echo_plus": {
      "name": "Send a notification via alexa_media_lounge_echo_plus",
      "description": "Sends a notification message using the alexa_media_lounge_echo_plus integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_this_device_2": {
      "name": "Send a notification via alexa_media_this_device_2",
      "description": "Sends a notification message using the alexa_media_this_device_2 integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_last_called": {
      "name": "Send a notification via alexa_media_last_called",
      "description": "Sends a notification message using the alexa_media_last_called integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "unifiprotect": {
    "add_doorbell_text": {
      "name": "Add doorbell text",
      "description": "Adds a new custom message for doorbells.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect"
            }
          },
          "name": "UniFi Protect NVR",
          "description": "Any device from the UniFi Protect instance you want to change. In case you have multiple Protect instances."
        },
        "message": {
          "example": "Come In",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Custom message",
          "description": "New custom message to add. Must be less than 30 characters."
        }
      }
    },
    "remove_doorbell_text": {
      "name": "Remove doorbell text",
      "description": "Removes an existing custom message for doorbells.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect"
            }
          },
          "name": "UniFi Protect NVR",
          "description": "Any device from the UniFi Protect instance you want to change. In case you have multiple Protect instances."
        },
        "message": {
          "example": "Go Away!",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Custom message",
          "description": "Existing custom message to remove."
        }
      }
    },
    "set_chime_paired_doorbells": {
      "name": "Set chime paired doorbells",
      "description": "Pairs doorbell(s) with a smart chime.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect",
              "entity": {
                "device_class": "unifiprotect__chime_button"
              }
            }
          },
          "name": "Chime",
          "description": "The chimes to link to the doorbells."
        },
        "doorbells": {
          "example": "binary_sensor.front_doorbell_doorbell",
          "required": false,
          "selector": {
            "target": {
              "entity": {
                "integration": "unifiprotect",
                "domain": "binary_sensor",
                "device_class": "occupancy"
              }
            }
          },
          "name": "Doorbells",
          "description": "The doorbells to link to the chime."
        }
      }
    },
    "remove_privacy_zone": {
      "name": "Remove privacy zone",
      "description": "Removes a privacy zone from a camera.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect",
              "entity": {
                "domain": "camera"
              }
            }
          },
          "name": "Camera",
          "description": "Camera you want to remove the privacy zone from."
        },
        "name": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Privacy zone",
          "description": "The name of the zone to remove."
        }
      }
    },
    "get_user_keyring_info": {
      "name": "Get user keyring info",
      "description": "Fetches a detailed list of users with NFC and fingerprint associations for automations.",
      "fields": {
        "device_id": {
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect"
            }
          },
          "name": "UniFi Protect NVR",
          "description": "Any device from the UniFi Protect instance you want to retrieve keyring details. This is useful for systems with multiple Protect instances."
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "text": {
    "set_value": {
      "name": "Set value",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "Hello world!",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Enter your text."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "text"
            ]
          }
        ]
      }
    }
  },
  "time": {
    "set_value": {
      "name": "Set Time",
      "description": "Sets the time.",
      "fields": {
        "time": {
          "required": true,
          "example": "22:15",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The time to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "time"
            ]
          }
        ]
      }
    }
  },
  "weather": {
    "get_forecasts": {
      "name": "Get forecasts",
      "description": "Retrieves the forecast from selected weather services.",
      "fields": {
        "type": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "daily",
                "hourly",
                "twice_daily"
              ],
              "translation_key": "forecast_type"
            }
          },
          "name": "Forecast type",
          "description": "The scope of the weather forecast."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "weather"
            ],
            "supported_features": [
              1,
              2,
              4
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "humidifier": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the humidifier on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the humidifier off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the humidifier on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_mode": {
      "name": "Set mode",
      "description": "Sets the humidifier operation mode.",
      "fields": {
        "mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Mode",
          "description": "Operation mode. For example, \u0022normal\u0022, \u0022eco\u0022, or \u0022away\u0022. For a list of possible values, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set humidity",
      "description": "Sets the target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    }
  },
  "image": {
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from an image.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/image_snapshot.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Template of a filename. Variable available is \u0060entity_id\u0060."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "image"
            ]
          }
        ]
      }
    }
  },
  "google": {
    "add_event": {
      "name": "Add event",
      "description": "Adds a new calendar event.",
      "fields": {
        "calendar_id": {
          "required": true,
          "example": "Your email",
          "selector": {
            "text": null
          },
          "name": "Calendar ID",
          "description": "The id of the calendar you want."
        },
        "summary": {
          "required": true,
          "example": "Bowling",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Acts as the title of the event."
        },
        "description": {
          "example": "Birthday bowling",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "The description of the event. Optional."
        },
        "start_date_time": {
          "example": "2019-03-22 20:00:00",
          "selector": {
            "text": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2019-03-22 22:00:00",
          "selector": {
            "text": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2019-03-10",
          "selector": {
            "text": null
          },
          "name": "Start date",
          "description": "The date the whole day event should start."
        },
        "end_date": {
          "example": "2019-03-11",
          "selector": {
            "text": null
          },
          "name": "End date",
          "description": "The date the whole day event should end."
        },
        "in": {
          "example": "\u0022days\u0022: 2 or \u0022weeks\u0022: 2",
          "selector": {
            "object": null
          },
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        }
      }
    },
    "create_event": {
      "name": "Create event",
      "description": "Adds a new calendar event.",
      "fields": {
        "summary": {
          "required": true,
          "example": "Bowling",
          "selector": {
            "text": null
          },
          "name": "Summary",
          "description": "Acts as the title of the event."
        },
        "description": {
          "example": "Birthday bowling",
          "selector": {
            "text": null
          },
          "name": "Description",
          "description": "The description of the event. Optional."
        },
        "start_date_time": {
          "example": "2022-03-22 20:00:00",
          "selector": {
            "text": null
          },
          "name": "Start time",
          "description": "The date and time the event should start."
        },
        "end_date_time": {
          "example": "2022-03-22 22:00:00",
          "selector": {
            "text": null
          },
          "name": "End time",
          "description": "The date and time the event should end."
        },
        "start_date": {
          "example": "2022-03-10",
          "selector": {
            "text": null
          },
          "name": "Start date",
          "description": "The date the whole day event should start."
        },
        "end_date": {
          "example": "2022-03-11",
          "selector": {
            "text": null
          },
          "name": "End date",
          "description": "The date the whole day event should end."
        },
        "in": {
          "example": "\u0022days\u0022: 2 or \u0022weeks\u0022: 2",
          "selector": {
            "object": null
          },
          "name": "In",
          "description": "Days or weeks that you want to create the event in."
        },
        "location": {
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "The location of the event. Optional."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "google",
            "domain": [
              "calendar"
            ]
          }
        ]
      }
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turns a switch off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns a switch on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "spotcast": {
    "start": {
      "name": "Start Spotcast",
      "description": "Starts spotify playback on chromecast devices",
      "fields": {
        "device_name": {
          "name": "Device Name",
          "description": "The friendly name of the chromecast or spotify connect device. First checks spotify device list for name (not used together with entity_id and spotify_device_id).",
          "example": "Livingroom",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "spotify_device_id": {
          "name": "Spotify Device ID",
          "description": "Advanced users only. The spotify device id (not used together with entity_id or device_name).",
          "example": "4363634563457346xcyvydgf3qwa",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "entity_id": {
          "name": "Entity ID",
          "description": "The entity_id of the chromecast mediaplayer. Friendly name MUST match the spotify connect device name (not used together with device_name and spotify_device_id).",
          "example": "media_player.vardagsrum",
          "required": false,
          "selector": {
            "entity": {
              "domain": "media_player",
              "integration": "cast"
            }
          }
        },
        "uri": {
          "name": "URI",
          "description": "Supported Spotify URI as string. None or empty uri will transfer the current/last playback (see parameter force_playback).",
          "example": "spotify:playlist:37i9dQZF1DX3yvAYDslnv8",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "category": {
          "name": "Category",
          "description": "A category to fetch playlist from. See https://developer.spotify.com/console/get-browse-categories/ for a list of categories",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "country": {
          "name": "Country",
          "description": "Country code to use with category. See https://spotipy.readthedocs.io/en/2.19.0/#spotipy.client.Spotify.country_codes for list of available codes",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "limit": {
          "name": "Limit",
          "description": "Limit of playlist to fetch in a given category. Default 20",
          "required": false,
          "default": 20,
          "selector": {
            "number": {
              "mode": "box",
              "step": 1,
              "min": 0,
              "max": 50
            }
          }
        },
        "album_name": {
          "name": "Album Name",
          "example": "The Dark Side of the Moon",
          "description": "Filters search results for the provided album name. Don\u0027t include this if you don\u0027t want an album.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "track_name": {
          "name": "Track Name",
          "example": "Money",
          "description": "Filters search results for the provided track name. Don\u0027t include this if you don\u0027t want a particular track.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "playlist_name": {
          "name": "Playlist Name",
          "example": "Ultimate pink floyd playlist",
          "description": "Filters search results for the provided playlist name. Don\u0027t include this if you don\u0027t want a playlist.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "show_name": {
          "name": "Show Name",
          "example": "Hollywood Handbook",
          "description": "Filters search results for the provided podcast show name. Don\u0027t include this if you don\u0027t want a podcast.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "episode_name": {
          "name": "Episode Name",
          "example": "Sarah Sherman, Our Close Friend",
          "description": "Filters search results for the provided podcast episode name. Don\u0027t include this if you don\u0027t want a podcast.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "genre_name": {
          "name": "Genre Name",
          "example": "post punk",
          "description": "Filters search results by genre of music",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "audiobook_name": {
          "name": "Audiobook Name",
          "example": "Ulysses",
          "description": "Filters search results for the provided audiobook name. Don\u0027t include this if you don\u0027t want an audiobook.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "artist_name": {
          "name": "Artist Name",
          "example": "pink floyd",
          "description": "This will filter search results to match the provided artist name. Don\u0027t include this if searching for a playlist or genre. Do include the author\u0027s name if searching for audiobooks.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "account": {
          "name": "Account",
          "description": "Optionally starts Spotify using an alternative account specified in config.",
          "example": "my_wifes",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "force_playback": {
          "name": "Force Playback",
          "description": "In case of transfering playback: If true starts playing the user\u0027s last playback even if nothing is currently playing.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "random_song": {
          "name": "Random Song",
          "description": "Starts the playback at a random position in the playlist or album.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "repeat": {
          "name": "Repeat",
          "description": "Set repeat mode for playback.",
          "example": "track",
          "required": false,
          "default": "off",
          "selector": {
            "select": {
              "options": [
                "track",
                "context",
                "off"
              ]
            }
          }
        },
        "shuffle": {
          "name": "Shuffle",
          "description": "Set shuffle mode for playback.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "offset": {
          "name": "Offset",
          "description": "Set offset mode for playback. 0 is the first song.",
          "example": 1,
          "required": false,
          "default": 0,
          "selector": {
            "number": {
              "mode": "box",
              "step": 1,
              "min": 0,
              "max": 999999
            }
          }
        },
        "start_position": {
          "name": "Position",
          "description": "Start position of the track in seconds",
          "example": 1,
          "required": false,
          "default": 0,
          "selector": {
            "number": {
              "mode": "box",
              "step": 1,
              "min": 0,
              "max": 999999
            }
          }
        },
        "start_volume": {
          "name": "Start Volume",
          "description": "Set the volume for playback in percentage.",
          "example": 50,
          "required": false,
          "selector": {
            "number": {
              "mode": "slider",
              "step": 1,
              "min": 0,
              "max": 100
            }
          }
        },
        "ignore_fully_played": {
          "name": "Ignore Fully Played",
          "description": "Set to ignore or not already played episodes in a podcast playlist",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    }
  },
  "siren": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the siren on.",
      "fields": {
        "tone": {
          "example": "fire",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Tone",
          "description": "The tone to emit. When \u0060available_tones\u0060 property is a map, either the key or the value can be used. Must be supported by the integration."
        },
        "volume_level": {
          "example": 0.5,
          "filter": {
            "supported_features": [
              8
            ]
          },
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.05
            }
          },
          "name": "Volume",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration."
        },
        "duration": {
          "example": 15,
          "filter": {
            "supported_features": [
              16
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Number of seconds the sound is played. Must be supported by the integration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the siren off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the siren on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    }
  },
  "yeelight": {
    "set_mode": {
      "name": "Set mode",
      "description": "Sets an operation mode.",
      "fields": {
        "mode": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "color_flow",
                "hsv",
                "last",
                "moonlight",
                "normal",
                "rgb"
              ],
              "translation_key": "mode"
            }
          },
          "name": "Mode",
          "description": "Operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "start_flow": {
      "name": "Start flow",
      "description": "Starts a custom flow, using transitions from https://yeelight.readthedocs.io/en/stable/yeelight.html#flow-objects.",
      "fields": {
        "count": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 100
            }
          },
          "name": "Count",
          "description": "The number of times to run this flow (0 to run forever)."
        },
        "action": {
          "default": "recover",
          "selector": {
            "select": {
              "options": [
                "off",
                "recover",
                "stay"
              ],
              "translation_key": "action"
            }
          },
          "name": "Action",
          "description": "The action to take after the flow stops."
        },
        "transitions": {
          "example": "[{ \u0022TemperatureTransition\u0022: [1900, 1000, 80] }, { \u0022TemperatureTransition\u0022: [1900, 1000, 10] }]",
          "selector": {
            "object": null
          },
          "name": "Transitions",
          "description": "Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_color_scene": {
      "name": "Set color scene",
      "description": "Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.",
      "fields": {
        "rgb_color": {
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "RGB color",
          "description": "Color for the light in RGB format."
        },
        "brightness": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "The brightness value to set."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_hsv_scene": {
      "name": "Set HSV scene",
      "description": "Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.",
      "fields": {
        "hs_color": {
          "example": "[300, 70]",
          "selector": {
            "object": null
          },
          "name": "Hue/sat color",
          "description": "Color for the light in hue/sat format. Hue is 0-359 and Sat is 0-100."
        },
        "brightness": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "The brightness value to set."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_color_temp_scene": {
      "name": "Set color temperature scene",
      "description": "Changes the light to the specified color temperature. If the light is off, it will be turned on.",
      "fields": {
        "kelvin": {
          "selector": {
            "number": {
              "min": 1700,
              "max": 6500,
              "step": 100,
              "unit_of_measurement": "K"
            }
          },
          "name": "Kelvin",
          "description": "Color temperature for the light in Kelvin."
        },
        "brightness": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "The brightness value to set."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_color_flow_scene": {
      "name": "Set color flow scene",
      "description": "Starts a color flow. If the light is off, it will be turned on.",
      "fields": {
        "count": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 100
            }
          },
          "name": "Count",
          "description": "The number of times to run this flow (0 to run forever)."
        },
        "action": {
          "default": "recover",
          "selector": {
            "select": {
              "options": [
                "off",
                "recover",
                "stay"
              ],
              "translation_key": "action"
            }
          },
          "name": "Action",
          "description": "The action to take after the flow stops."
        },
        "transitions": {
          "example": "[{ \u0022TemperatureTransition\u0022: [1900, 1000, 80] }, { \u0022TemperatureTransition\u0022: [1900, 1000, 10] }]",
          "selector": {
            "object": null
          },
          "name": "Transitions",
          "description": "Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_auto_delay_off_scene": {
      "name": "Set auto delay off scene",
      "description": "Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, it will be turned on.",
      "fields": {
        "minutes": {
          "selector": {
            "number": {
              "min": 1,
              "max": 60,
              "unit_of_measurement": "minutes"
            }
          },
          "name": "Minutes",
          "description": "The time to wait before automatically turning the light off."
        },
        "brightness": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "The brightness value to set."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_music_mode": {
      "name": "Set music mode",
      "description": "Enables or disables music mode.",
      "fields": {
        "music_mode": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Music mode",
          "description": "Whether to enable or disable music mode."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "esphome": {
    "nspanel_upload_tft": {
      "name": "",
      "description": "Calls the service upload_tft of the node nspanel",
      "fields": {}
    },
    "nspanel_upload_tft_url": {
      "name": "",
      "description": "Calls the service upload_tft_url of the node nspanel",
      "fields": {
        "url": {
          "name": "url",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_printf": {
      "name": "",
      "description": "Calls the service send_command_printf of the node nspanel",
      "fields": {
        "cmd": {
          "name": "cmd",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_text_printf": {
      "name": "",
      "description": "Calls the service send_command_text_printf of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "message",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_value": {
      "name": "",
      "description": "Calls the service send_command_value of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "message",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "nspanel_send_command_hide": {
      "name": "",
      "description": "Calls the service send_command_hide of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_show": {
      "name": "",
      "description": "Calls the service send_command_show of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_show_all": {
      "name": "",
      "description": "Calls the service send_command_show_all of the node nspanel",
      "fields": {}
    },
    "nspanel_send_command_font_color": {
      "name": "",
      "description": "Calls the service send_command_font_color of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "message",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "nspanel_send_command_background_color": {
      "name": "",
      "description": "Calls the service send_command_background_color of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "message",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "nspanel_notification_show": {
      "name": "",
      "description": "Calls the service notification_show of the node nspanel",
      "fields": {
        "label": {
          "name": "label",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "text": {
          "name": "text",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_notification_clear": {
      "name": "",
      "description": "Calls the service notification_clear of the node nspanel",
      "fields": {}
    },
    "nspanel_set_settings_entity": {
      "name": "",
      "description": "Calls the service set_settings_entity of the node nspanel",
      "fields": {
        "entity": {
          "name": "entity",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_play_rtttl": {
      "name": "",
      "description": "Calls the service play_rtttl of the node nspanel",
      "fields": {
        "song_str": {
          "name": "song_str",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_qr_code": {
      "name": "",
      "description": "Calls the service qr_code of the node nspanel",
      "fields": {
        "qrdata": {
          "name": "qrdata",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_thermostat_cycle_state": {
      "name": "",
      "description": "Calls the service send_thermostat_cycle_state of the node nspanel",
      "fields": {
        "value": {
          "name": "value",
          "required": true,
          "description": null,
          "example": "12.3",
          "selector": {
            "number": {
              "mode": "box",
              "step": 0.001
            }
          }
        }
      }
    },
    "nspanel_set_button": {
      "name": "",
      "description": "Calls the service set_button of the node nspanel",
      "fields": {
        "btn_id": {
          "name": "btn_id",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "btn_pic": {
          "name": "btn_pic",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_bg": {
          "name": "btn_bg",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_icon_font": {
          "name": "btn_icon_font",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_txt_font": {
          "name": "btn_txt_font",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_bri_font": {
          "name": "btn_bri_font",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_icon": {
          "name": "btn_icon",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "btn_label": {
          "name": "btn_label",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "btn_bri_txt": {
          "name": "btn_bri_txt",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn off",
      "description": "Sends the turn off command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Sends the turn on command.",
      "fields": {
        "activity": {
          "example": "BedroomTV",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Activity",
          "description": "Activity ID or activity name to be started."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Sends the toggle command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "example": "32756745",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to send command to."
        },
        "command": {
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to send."
        },
        "num_repeats": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Repeats",
          "description": "The number of times you want to repeat the commands."
        },
        "delay_secs": {
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Delay seconds",
          "description": "The time you want to wait in between repeated commands."
        },
        "hold_secs": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Hold seconds",
          "description": "The time you want to have it held before the release is send."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to learn command from."
        },
        "command": {
          "example": "Turn on",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to learn."
        },
        "command_type": {
          "default": "ir",
          "selector": {
            "select": {
              "options": [
                "ir",
                "rf"
              ]
            }
          },
          "name": "Command type",
          "description": "The type of command to be learned."
        },
        "alternative": {
          "selector": {
            "boolean": null
          },
          "name": "Alternative",
          "description": "If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won\u0027t change the state."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for the command to be learned."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device from which commands will be deleted."
        },
        "command": {
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "The single command or the list of commands to be deleted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    }
  },
  "fully_kiosk": {
    "load_url": {
      "name": "Load URL",
      "description": "Loads a URL on Fully Kiosk Browser.",
      "fields": {
        "url": {
          "example": "https://home-assistant.io",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "URL",
          "description": "URL to load."
        }
      },
      "target": {
        "device": [
          {
            "integration": "fully_kiosk"
          }
        ]
      }
    },
    "start_application": {
      "name": "Start application",
      "description": "Starts an application on the device running Fully Kiosk Browser.",
      "fields": {
        "application": {
          "example": "de.ozerov.fully",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Application",
          "description": "Package name of the application to start."
        }
      },
      "target": {
        "device": [
          {
            "integration": "fully_kiosk"
          }
        ]
      }
    },
    "set_config": {
      "name": "Set configuration",
      "description": "Sets a configuration parameter on Fully Kiosk Browser.",
      "fields": {
        "key": {
          "example": "motionSensitivity",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Key",
          "description": "Configuration parameter to set."
        },
        "value": {
          "example": "90",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Value for the configuration parameter."
        }
      },
      "target": {
        "device": [
          {
            "integration": "fully_kiosk"
          }
        ]
      }
    }
  },
  "alarmo": {
    "arm": {
      "name": "",
      "description": "",
      "fields": {
        "entity_id": {
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "mode": {
          "example": "away",
          "required": false,
          "default": "away",
          "selector": {
            "select": {
              "translation_key": "arm_mode",
              "options": [
                "away",
                "night",
                "home",
                "vacation",
                "custom"
              ]
            }
          }
        },
        "skip_delay": {
          "example": false,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "force": {
          "example": false,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "disarm": {
      "name": "",
      "description": "",
      "fields": {
        "entity_id": {
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        }
      }
    },
    "enable_user": {
      "name": "",
      "description": "",
      "fields": {
        "name": {
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "disable_user": {
      "name": "",
      "description": "",
      "fields": {
        "name": {
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Triggers the actions of an automation.",
      "fields": {
        "skip_condition": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Skip conditions",
          "description": "Defines whether or not the conditions will be skipped."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enables an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disables an automation.",
      "fields": {
        "stop_actions": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Stop actions",
          "description": "Stops currently running actions."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the automation configuration.",
      "fields": {}
    }
  },
  "vesync": {
    "update_devices": {
      "name": "Update devices",
      "description": "Adds new VeSync devices to Home Assistant.",
      "fields": {}
    }
  },
  "alexa_media": {
    "force_logout": {
      "name": "Force Logout",
      "description": "Force account to logout. Used mainly for debugging.",
      "fields": {
        "email": {
          "description": "Accounts to clear. Empty will clear all.",
          "example": "my_email@alexa.com",
          "name": "Email address"
        }
      }
    },
    "update_last_called": {
      "name": "Update Last Called Sensor",
      "description": "Forces update of last_called echo device for each Alexa account.",
      "fields": {
        "email": {
          "description": "List of Alexa accounts to update. If empty, will update all known accounts.",
          "example": "my_email@alexa.com",
          "name": "Email address"
        }
      }
    },
    "restore_volume": {
      "name": "Restore Previous Volume",
      "description": "Restore previous volume level on Alexa media player device",
      "fields": {
        "entity_id": {
          "name": "Select media player:",
          "description": "Entity to restore the previous volume level on",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player",
              "integration": "alexa_media"
            }
          }
        }
      }
    },
    "get_history_records": {
      "name": "Get History Records",
      "description": "Parses the history records for the specified device",
      "fields": {
        "entity_id": {
          "name": "Select media player:",
          "description": "Entity to get the history for",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player",
              "integration": "alexa_media"
            }
          }
        },
        "entries": {
          "name": "Number of entries",
          "description": "Number of entries to get",
          "required": false,
          "default": 5,
          "example": 5
        }
      }
    }
  }
}