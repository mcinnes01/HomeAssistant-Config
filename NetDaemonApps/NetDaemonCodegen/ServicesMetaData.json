{
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save Persistent States",
      "description": "Save the persistent states (for entities derived from RestoreEntity) immediately. Maintain the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic service to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic service to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic service to toggle devices on/off under any domain",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stop the Home Assistant service.",
      "fields": {}
    },
    "restart": {
      "name": "Restart",
      "description": "Restart the Home Assistant service.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Check the Home Assistant configuration files for errors. Errors will be displayed in the Home Assistant log.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Force one or more entities to update its data",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "reload_core_config": {
      "name": "Reload core configuration",
      "description": "Reload the core configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Update the Home Assistant location.",
      "fields": {
        "latitude": {
          "name": "Latitude",
          "description": "Latitude of your location.",
          "required": true,
          "example": 32.87336,
          "selector": {
            "text": null
          }
        },
        "longitude": {
          "name": "Longitude",
          "description": "Longitude of your location.",
          "required": true,
          "example": 117.22743,
          "selector": {
            "text": null
          }
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reload Jinja2 templates found in the custom_templates folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reload a config entry that matches a target.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "name": "Config entry id",
          "description": "A configuration entry id",
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {}
        ],
        "device": [
          {}
        ]
      }
    },
    "reload_all": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Show a notification in the frontend.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Optional title for your notification.",
          "example": "Test notification",
          "selector": {
            "text": null
          }
        },
        "notification_id": {
          "name": "Notification ID",
          "description": "Target ID of the notification, will replace a notification with the same ID.",
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Remove a notification from the frontend.",
      "fields": {
        "notification_id": {
          "name": "Notification ID",
          "description": "Target ID of the notification, which should be removed.",
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      }
    },
    "dismiss_all": {
      "name": "Dismiss All",
      "description": "Remove all notifications.",
      "fields": {}
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear all",
      "description": "Clear all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message to log.",
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          }
        },
        "level": {
          "name": "Level",
          "description": "Log level.",
          "default": "error",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Debug",
                  "value": "debug"
                },
                {
                  "label": "Info",
                  "value": "info"
                },
                {
                  "label": "Warning",
                  "value": "warning"
                },
                {
                  "label": "Error",
                  "value": "error"
                },
                {
                  "label": "Critical",
                  "value": "critical"
                }
              ]
            }
          }
        },
        "logger": {
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to \u0027system_log.external\u0027.",
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Set the default log level for integrations.",
      "fields": {
        "level": {
          "name": "Level",
          "description": "Default severity level for all integrations.",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Debug",
                  "value": "debug"
                },
                {
                  "label": "Info",
                  "value": "info"
                },
                {
                  "label": "Warning",
                  "value": "warning"
                },
                {
                  "label": "Error",
                  "value": "error"
                },
                {
                  "label": "Fatal",
                  "value": "fatal"
                },
                {
                  "label": "Critical",
                  "value": "critical"
                }
              ]
            }
          }
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Set log level for integrations.",
      "fields": {}
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reload the person configuration.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set theme",
      "description": "Set a theme unless the client selected per-device theme.",
      "fields": {
        "name": {
          "name": "Theme",
          "description": "Name of a predefined theme",
          "required": true,
          "example": "default",
          "selector": {
            "theme": null
          }
        },
        "mode": {
          "name": "Mode",
          "description": "The mode the theme is for.",
          "default": "light",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Dark",
                  "value": "dark"
                },
                {
                  "label": "Light",
                  "value": "light"
                }
              ]
            }
          }
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reload themes from YAML configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Start purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "name": "Days to keep",
          "description": "Number of history days to keep in database after purge.",
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          }
        },
        "repack": {
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file.",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "apply_filter": {
          "name": "Apply filter",
          "description": "Apply entity_id and event_type filter in addition to time based purge.",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "purge_entities": {
      "name": "Purge Entities",
      "description": "Start purge task to remove specific entities from your database.",
      "fields": {
        "domains": {
          "name": "Domains to remove",
          "description": "List the domains that need to be removed from the recorder database.",
          "example": "sun",
          "required": false,
          "default": [],
          "selector": {
            "object": null
          }
        },
        "entity_globs": {
          "name": "Entity Globs to remove",
          "description": "List the glob patterns to select entities for removal from the recorder database.",
          "example": "domain*.object_id*",
          "required": false,
          "default": [],
          "selector": {
            "object": null
          }
        },
        "keep_days": {
          "name": "Days to keep",
          "description": "Number of history days to keep in database of matching rows. The default of 0 days will remove all matching rows.",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          }
        }
      },
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Start the recording of events and state changes",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stop the recording of events and state changes",
      "fields": {}
    }
  },
  "hassio": {
    "addon_start": {
      "name": "Start add-on",
      "description": "Start add-on.",
      "fields": {
        "addon": {
          "name": "Add-on",
          "required": true,
          "description": "The add-on slug.",
          "example": "core_ssh",
          "selector": {
            "addon": null
          }
        }
      }
    },
    "addon_stop": {
      "name": "Stop add-on.",
      "description": "Stop add-on.",
      "fields": {
        "addon": {
          "name": "Add-on",
          "required": true,
          "description": "The add-on slug.",
          "example": "core_ssh",
          "selector": {
            "addon": null
          }
        }
      }
    },
    "addon_restart": {
      "name": "Restart add-on.",
      "description": "Restart add-on.",
      "fields": {
        "addon": {
          "name": "Add-on",
          "required": true,
          "description": "The add-on slug.",
          "example": "core_ssh",
          "selector": {
            "addon": null
          }
        }
      }
    },
    "addon_update": {
      "name": "Update add-on.",
      "description": "Update add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.",
      "fields": {
        "addon": {
          "name": "Add-on",
          "required": true,
          "description": "The add-on slug.",
          "example": "core_ssh",
          "selector": {
            "addon": null
          }
        }
      }
    },
    "addon_stdin": {
      "name": "Write data to add-on stdin.",
      "description": "Write data to add-on stdin.",
      "fields": {
        "addon": {
          "name": "Add-on",
          "required": true,
          "description": "The add-on slug.",
          "example": "core_ssh",
          "selector": {
            "addon": null
          }
        }
      }
    },
    "host_shutdown": {
      "name": "Poweroff the host system.",
      "description": "Poweroff the host system.",
      "fields": {}
    },
    "host_reboot": {
      "name": "Reboot the host system.",
      "description": "Reboot the host system.",
      "fields": {}
    },
    "backup_full": {
      "name": "Create a full backup.",
      "description": "Create a full backup.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Optional (default = current date and time).",
          "example": "Backup 1",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Optional password.",
          "example": "password",
          "selector": {
            "text": null
          }
        },
        "compressed": {
          "name": "Compressed",
          "description": "Use compressed archives",
          "default": true,
          "selector": {
            "boolean": null
          }
        },
        "location": {
          "name": "Location",
          "description": "Name of a backup network storage to put backup (or /backup)",
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          }
        }
      }
    },
    "backup_partial": {
      "name": "Create a partial backup.",
      "description": "Create a partial backup.",
      "fields": {
        "homeassistant": {
          "name": "Home Assistant settings",
          "description": "Backup Home Assistant settings",
          "selector": {
            "boolean": null
          }
        },
        "addons": {
          "name": "Add-ons",
          "description": "Optional list of add-on slugs.",
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          }
        },
        "folders": {
          "name": "Folders",
          "description": "Optional list of directories.",
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          }
        },
        "name": {
          "name": "Name",
          "description": "Optional (default = current date and time).",
          "example": "Partial backup 1",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Optional password.",
          "example": "password",
          "selector": {
            "text": null
          }
        },
        "compressed": {
          "name": "Compressed",
          "description": "Use compressed archives",
          "default": true,
          "selector": {
            "boolean": null
          }
        },
        "location": {
          "name": "Location",
          "description": "Name of a backup network storage to put backup (or /backup)",
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          }
        }
      }
    },
    "restore_full": {
      "name": "Restore from full backup.",
      "description": "Restore from full backup.",
      "fields": {
        "slug": {
          "name": "Slug",
          "required": true,
          "description": "Slug of backup to restore from.",
          "selector": {
            "text": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Optional password.",
          "example": "password",
          "selector": {
            "text": null
          }
        }
      }
    },
    "restore_partial": {
      "name": "Restore from partial backup.",
      "description": "Restore from partial backup.",
      "fields": {
        "slug": {
          "name": "Slug",
          "required": true,
          "description": "Slug of backup to restore from.",
          "selector": {
            "text": null
          }
        },
        "homeassistant": {
          "name": "Home Assistant settings",
          "description": "Restore Home Assistant",
          "selector": {
            "boolean": null
          }
        },
        "folders": {
          "name": "Folders",
          "description": "Optional list of directories.",
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          }
        },
        "addons": {
          "name": "Add-ons",
          "description": "Optional list of add-on slugs.",
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          }
        },
        "password": {
          "name": "Password",
          "description": "Optional password.",
          "example": "password",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Remote connect",
      "description": "Make instance UI available outside over NabuCasa cloud",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Remote disconnect",
      "description": "Disconnect UI from NabuCasa cloud",
      "fields": {}
    }
  },
  "tts": {
    "speak": {
      "name": "Speak",
      "description": "Speak something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "name": "Media Player Entity",
          "description": "Name(s) of media player entities.",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Text to speak on devices.",
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "name": "Cache",
          "description": "Control file cache of this message.",
          "default": true,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "name": "Language",
          "description": "Language to use for speech generation.",
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "name": "Options",
          "description": "A dictionary containing platform-specific options. Optional depending on the platform.",
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "tts"
            ]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Remove all text-to-speech cache files and RAM cache.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name(s) of media player entities.",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Text to speak on devices.",
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "name": "Cache",
          "description": "Control file cache of this message.",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "name": "Language",
          "description": "Language to use for speech generation.",
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "name": "Options",
          "description": "A dictionary containing platform-specific options. Optional depending on the platform.",
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Install an update for this device or service",
      "fields": {
        "version": {
          "name": "Version",
          "description": "Version to install, if omitted, the latest version will be installed.",
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          }
        },
        "backup": {
          "name": "Backup",
          "description": "Backup before installing the update, if supported by the integration.",
          "required": false,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Mark currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    }
  },
  "calendar": {
    "create_event": {
      "name": "Create event",
      "description": "Add a new calendar event.",
      "fields": {
        "summary": {
          "name": "Summary",
          "description": "Defines the short summary or subject for the event",
          "required": true,
          "example": "Department Party",
          "selector": {
            "text": null
          }
        },
        "description": {
          "name": "Description",
          "description": "A more complete description of the event than that provided by the summary.",
          "example": "Meeting to provide technical review for \u0027Phoenix\u0027 design.",
          "selector": {
            "text": null
          }
        },
        "start_date_time": {
          "name": "Start time",
          "description": "The date and time the event should start.",
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          }
        },
        "end_date_time": {
          "name": "End time",
          "description": "The date and time the event should end.",
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          }
        },
        "start_date": {
          "name": "Start date",
          "description": "The date the all-day event should start.",
          "example": "2022-03-22",
          "selector": {
            "date": null
          }
        },
        "end_date": {
          "name": "End date",
          "description": "The date the all-day event should end (exclusive).",
          "example": "2022-03-23",
          "selector": {
            "date": null
          }
        },
        "in": {
          "name": "In",
          "description": "Days or weeks that you want to create the event in.",
          "example": "{\u0022days\u0022: 2} or {\u0022weeks\u0022: 2}"
        },
        "location": {
          "name": "Location",
          "description": "The location of the event.",
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ]
          }
        ]
      }
    },
    "list_events": {
      "name": "List event",
      "description": "List events on a calendar within a time range.",
      "fields": {
        "start_date_time": {
          "name": "Start time",
          "description": "Return active events after this time (exclusive). When not set, defaults to now.",
          "example": "2022-03-22 20:00:00",
          "selector": {
            "datetime": null
          }
        },
        "end_date_time": {
          "name": "End time",
          "description": "Return active events before this time (exclusive). Cannot be used with \u0027duration\u0027.",
          "example": "2022-03-22 22:00:00",
          "selector": {
            "datetime": null
          }
        },
        "duration": {
          "name": "Duration",
          "description": "Return active events from start_date_time until the specified duration.",
          "selector": {
            "duration": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "calendar"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "waste_collection_schedule": {
    "fetch_data": {
      "name": "Fetch data from all sources.",
      "description": "Fetch data from all sources.",
      "fields": {}
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launch a conversation from a transcribed text.",
      "fields": {
        "text": {
          "name": "Text",
          "description": "Transcribed text",
          "example": "Turn all lights on",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "language": {
          "name": "Language",
          "description": "Language of text. Defaults to server language",
          "example": "NL",
          "selector": {
            "text": null
          }
        },
        "agent_id": {
          "name": "Agent",
          "description": "Assist engine to process your request",
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          }
        }
      },
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "localtuya": {
    "reload": {
      "name": "",
      "description": "Reload localtuya and reconnect to all devices.",
      "fields": {}
    },
    "set_dp": {
      "name": "",
      "description": "Change the value of a datapoint (DP)",
      "fields": {
        "device_id": {
          "description": "Device ID of device to change datapoint value for",
          "example": "11100118278aab4de001"
        },
        "dp": {
          "description": "Datapoint index",
          "example": 1
        },
        "value": {
          "description": "New value to set",
          "example": false
        }
      }
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "button"
            ]
          }
        ]
      }
    }
  },
  "alarm_control_panel": {
    "alarm_disarm": {
      "name": "Disarm",
      "description": "Send the alarm the command for disarm.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to disarm the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_home": {
      "name": "Arm home",
      "description": "Send the alarm the command for arm home.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm home the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_away": {
      "name": "Arm away",
      "description": "Send the alarm the command for arm away.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm away the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_night": {
      "name": "Arm night",
      "description": "Send the alarm the command for arm night.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm night the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_vacation": {
      "name": "Arm vacation",
      "description": "Send the alarm the command for arm vacation.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm vacation the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_custom_bypass": {
      "name": "Arm with custom bypass",
      "description": "Send arm custom bypass command.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to arm custom bypass the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_trigger": {
      "name": "Trigger",
      "description": "Send the alarm the command for trigger.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to trigger the alarm control panel with.",
          "example": "1234",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Create a custom entry in your logbook.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Custom name for an entity, can be referenced with entity_id.",
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "Message",
          "description": "Message of the custom logbook entry.",
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          }
        },
        "entity_id": {
          "name": "Entity ID",
          "description": "Entity to reference in custom logbook entry.",
          "selector": {
            "entity": null
          }
        },
        "domain": {
          "name": "Domain",
          "description": "Icon of domain to display in custom logbook entry.",
          "example": "light",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increment a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrement a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Reset a counter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Set the counter value",
      "fields": {
        "value": {
          "name": "Value",
          "required": true,
          "description": "The new counter value the entity should be set to.",
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "configure": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn fan on.",
      "fields": {
        "speed": {
          "name": "Speed",
          "description": "Speed setting.",
          "example": "high",
          "selector": {
            "text": null
          }
        },
        "percentage": {
          "name": "Percentage",
          "description": "Percentage speed setting.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "preset_mode": {
          "name": "Preset mode",
          "description": "Preset mode setting.",
          "example": "auto",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle the fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increase the speed of the fan by one speed or a percentage_step.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "description": "Increase speed by a percentage.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decrease the speed of the fan by one speed or a percentage_step.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "description": "Decrease speed by a percentage.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Oscillate the fan.",
      "fields": {
        "oscillating": {
          "name": "Oscillating",
          "description": "Flag to turn on/off oscillation.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Set the fan rotation.",
      "fields": {
        "direction": {
          "name": "Direction",
          "description": "The direction to rotate.",
          "required": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Forward",
                  "value": "forward"
                },
                {
                  "label": "Reverse",
                  "value": "reverse"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed percentage",
      "description": "Set fan speed percentage.",
      "fields": {
        "percentage": {
          "name": "Percentage",
          "description": "Percentage speed setting.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Set preset mode for a fan device.",
      "fields": {
        "preset_mode": {
          "name": "Preset mode",
          "description": "New value of preset mode.",
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reload the schedule configuration",
      "fields": {}
    }
  },
  "shopping_list": {
    "add_item": {
      "name": "Add item",
      "description": "Add an item to the shopping list.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "The name of the item to add.",
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          }
        }
      }
    },
    "remove_item": {
      "name": "Remove item",
      "description": "Remove the first item with matching name from the shopping list.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "The name of the item to remove.",
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          }
        }
      }
    },
    "complete_item": {
      "name": "Complete item",
      "description": "Mark the first item with matching name as completed in the shopping list.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "The name of the item to mark as completed (without removing).",
          "required": true,
          "example": "Beer",
          "selector": {
            "text": null
          }
        }
      }
    },
    "incomplete_item": {
      "name": "Incomplete item",
      "description": "Mark the first item with matching name as incomplete in the shopping list.",
      "fields": {
        "name": {
          "description": "The name of the item to mark as incomplete.",
          "example": "Beer",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "complete_all": {
      "name": "Complete all",
      "description": "Mark all items as completed in the shopping list (without removing them from the list).",
      "fields": {}
    },
    "incomplete_all": {
      "name": "Incomplete all",
      "description": "Mark all items as incomplete in the shopping list.",
      "fields": {}
    },
    "clear_completed_items": {
      "name": "Clear completed items",
      "description": "Clear completed items from the shopping list.",
      "fields": {}
    },
    "sort": {
      "name": "Sort all items",
      "description": "Sort all items by name in the shopping list.",
      "fields": {
        "reverse": {
          "name": "Sort reverse",
          "description": "Whether to sort in reverse (descending) order.",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on one or more lights and adjust properties of the light, even when they are turned on already.\n",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Duration it takes to get to next state.",
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "rgb_color": {
          "name": "Color",
          "description": "The color for the light (based on RGB - red, green, blue).",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_rgb": null
          }
        },
        "rgbw_color": {
          "name": "RGBW-color",
          "description": "A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100, 50]",
          "selector": {
            "object": null
          }
        },
        "rgbww_color": {
          "name": "RGBWW-color",
          "description": "A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100, 50, 70]",
          "selector": {
            "object": null
          }
        },
        "color_name": {
          "name": "Color name",
          "description": "A human readable color name.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                "homeassistant",
                "aliceblue",
                "antiquewhite",
                "aqua",
                "aquamarine",
                "azure",
                "beige",
                "bisque",
                "blanchedalmond",
                "blue",
                "blueviolet",
                "brown",
                "burlywood",
                "cadetblue",
                "chartreuse",
                "chocolate",
                "coral",
                "cornflowerblue",
                "cornsilk",
                "crimson",
                "cyan",
                "darkblue",
                "darkcyan",
                "darkgoldenrod",
                "darkgray",
                "darkgreen",
                "darkgrey",
                "darkkhaki",
                "darkmagenta",
                "darkolivegreen",
                "darkorange",
                "darkorchid",
                "darkred",
                "darksalmon",
                "darkseagreen",
                "darkslateblue",
                "darkslategray",
                "darkslategrey",
                "darkturquoise",
                "darkviolet",
                "deeppink",
                "deepskyblue",
                "dimgray",
                "dimgrey",
                "dodgerblue",
                "firebrick",
                "floralwhite",
                "forestgreen",
                "fuchsia",
                "gainsboro",
                "ghostwhite",
                "gold",
                "goldenrod",
                "gray",
                "green",
                "greenyellow",
                "grey",
                "honeydew",
                "hotpink",
                "indianred",
                "indigo",
                "ivory",
                "khaki",
                "lavender",
                "lavenderblush",
                "lawngreen",
                "lemonchiffon",
                "lightblue",
                "lightcoral",
                "lightcyan",
                "lightgoldenrodyellow",
                "lightgray",
                "lightgreen",
                "lightgrey",
                "lightpink",
                "lightsalmon",
                "lightseagreen",
                "lightskyblue",
                "lightslategray",
                "lightslategrey",
                "lightsteelblue",
                "lightyellow",
                "lime",
                "limegreen",
                "linen",
                "magenta",
                "maroon",
                "mediumaquamarine",
                "mediumblue",
                "mediumorchid",
                "mediumpurple",
                "mediumseagreen",
                "mediumslateblue",
                "mediumspringgreen",
                "mediumturquoise",
                "mediumvioletred",
                "midnightblue",
                "mintcream",
                "mistyrose",
                "moccasin",
                "navajowhite",
                "navy",
                "navyblue",
                "oldlace",
                "olive",
                "olivedrab",
                "orange",
                "orangered",
                "orchid",
                "palegoldenrod",
                "palegreen",
                "paleturquoise",
                "palevioletred",
                "papayawhip",
                "peachpuff",
                "peru",
                "pink",
                "plum",
                "powderblue",
                "purple",
                "red",
                "rosybrown",
                "royalblue",
                "saddlebrown",
                "salmon",
                "sandybrown",
                "seagreen",
                "seashell",
                "sienna",
                "silver",
                "skyblue",
                "slateblue",
                "slategray",
                "slategrey",
                "snow",
                "springgreen",
                "steelblue",
                "tan",
                "teal",
                "thistle",
                "tomato",
                "turquoise",
                "violet",
                "wheat",
                "white",
                "whitesmoke",
                "yellow",
                "yellowgreen"
              ]
            }
          }
        },
        "hs_color": {
          "name": "Hue/Sat color",
          "description": "Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[300, 70]",
          "selector": {
            "object": null
          }
        },
        "xy_color": {
          "name": "XY-color",
          "description": "Color for the light in XY-format.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[0.52, 0.43]",
          "selector": {
            "object": null
          }
        },
        "color_temp": {
          "name": "Color temperature",
          "description": "Color temperature for the light in mireds.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "min_mireds": 153,
              "max_mireds": 500
            }
          }
        },
        "kelvin": {
          "name": "Color temperature (Kelvin)",
          "description": "Color temperature for the light in Kelvin.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 2000,
              "max": 6500,
              "step": 100,
              "unit_of_measurement": "K"
            }
          }
        },
        "brightness": {
          "name": "Brightness value",
          "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          }
        },
        "brightness_pct": {
          "name": "Brightness",
          "description": "Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "brightness_step": {
          "name": "Brightness step value",
          "description": "Change brightness by an amount.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": -225,
              "max": 255
            }
          }
        },
        "brightness_step_pct": {
          "name": "Brightness step",
          "description": "Change brightness by a percentage.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "white": {
          "name": "White",
          "description": "Set the light to white mode.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "white"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "constant": {
              "value": true,
              "label": "Enabled"
            }
          }
        },
        "profile": {
          "name": "Profile",
          "description": "Name of a light profile to use.",
          "advanced": true,
          "example": "relax",
          "selector": {
            "text": null
          }
        },
        "flash": {
          "name": "Flash",
          "description": "If the light should flash.",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          }
        },
        "effect": {
          "name": "Effect",
          "description": "Light effect.",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off one or more lights.",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Duration it takes to get to next state.",
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "flash": {
          "name": "Flash",
          "description": "If the light should flash.",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or, off to on, based on their current state.\n",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Duration it takes to get to next state.",
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "rgb_color": {
          "name": "RGB-color",
          "description": "Color for the light in RGB-format.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[255, 100, 100]",
          "selector": {
            "object": null
          }
        },
        "color_name": {
          "name": "Color name",
          "description": "A human readable color name.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                "homeassistant",
                "aliceblue",
                "antiquewhite",
                "aqua",
                "aquamarine",
                "azure",
                "beige",
                "bisque",
                "blanchedalmond",
                "blue",
                "blueviolet",
                "brown",
                "burlywood",
                "cadetblue",
                "chartreuse",
                "chocolate",
                "coral",
                "cornflowerblue",
                "cornsilk",
                "crimson",
                "cyan",
                "darkblue",
                "darkcyan",
                "darkgoldenrod",
                "darkgray",
                "darkgreen",
                "darkgrey",
                "darkkhaki",
                "darkmagenta",
                "darkolivegreen",
                "darkorange",
                "darkorchid",
                "darkred",
                "darksalmon",
                "darkseagreen",
                "darkslateblue",
                "darkslategray",
                "darkslategrey",
                "darkturquoise",
                "darkviolet",
                "deeppink",
                "deepskyblue",
                "dimgray",
                "dimgrey",
                "dodgerblue",
                "firebrick",
                "floralwhite",
                "forestgreen",
                "fuchsia",
                "gainsboro",
                "ghostwhite",
                "gold",
                "goldenrod",
                "gray",
                "green",
                "greenyellow",
                "grey",
                "honeydew",
                "hotpink",
                "indianred",
                "indigo",
                "ivory",
                "khaki",
                "lavender",
                "lavenderblush",
                "lawngreen",
                "lemonchiffon",
                "lightblue",
                "lightcoral",
                "lightcyan",
                "lightgoldenrodyellow",
                "lightgray",
                "lightgreen",
                "lightgrey",
                "lightpink",
                "lightsalmon",
                "lightseagreen",
                "lightskyblue",
                "lightslategray",
                "lightslategrey",
                "lightsteelblue",
                "lightyellow",
                "lime",
                "limegreen",
                "linen",
                "magenta",
                "maroon",
                "mediumaquamarine",
                "mediumblue",
                "mediumorchid",
                "mediumpurple",
                "mediumseagreen",
                "mediumslateblue",
                "mediumspringgreen",
                "mediumturquoise",
                "mediumvioletred",
                "midnightblue",
                "mintcream",
                "mistyrose",
                "moccasin",
                "navajowhite",
                "navy",
                "navyblue",
                "oldlace",
                "olive",
                "olivedrab",
                "orange",
                "orangered",
                "orchid",
                "palegoldenrod",
                "palegreen",
                "paleturquoise",
                "palevioletred",
                "papayawhip",
                "peachpuff",
                "peru",
                "pink",
                "plum",
                "powderblue",
                "purple",
                "red",
                "rosybrown",
                "royalblue",
                "saddlebrown",
                "salmon",
                "sandybrown",
                "seagreen",
                "seashell",
                "sienna",
                "silver",
                "skyblue",
                "slateblue",
                "slategray",
                "slategrey",
                "snow",
                "springgreen",
                "steelblue",
                "tan",
                "teal",
                "thistle",
                "tomato",
                "turquoise",
                "violet",
                "wheat",
                "white",
                "whitesmoke",
                "yellow",
                "yellowgreen"
              ]
            }
          }
        },
        "hs_color": {
          "name": "Hue/Sat color",
          "description": "Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[300, 70]",
          "selector": {
            "object": null
          }
        },
        "xy_color": {
          "name": "XY-color",
          "description": "Color for the light in XY-format.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "example": "[0.52, 0.43]",
          "selector": {
            "object": null
          }
        },
        "color_temp": {
          "name": "Color temperature (mireds)",
          "description": "Color temperature for the light in mireds.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "color_temp": null
          }
        },
        "kelvin": {
          "name": "Color temperature (Kelvin)",
          "description": "Color temperature for the light in Kelvin.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 2000,
              "max": 6500,
              "step": 100,
              "unit_of_measurement": "K"
            }
          }
        },
        "brightness": {
          "name": "Brightness value",
          "description": "Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          }
        },
        "brightness_pct": {
          "name": "Brightness",
          "description": "Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "white": {
          "name": "White",
          "description": "Set the light to white mode.",
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "white"
              ]
            }
          },
          "advanced": true,
          "selector": {
            "constant": {
              "value": true,
              "label": "Enabled"
            }
          }
        },
        "profile": {
          "name": "Profile",
          "description": "Name of a light profile to use.",
          "advanced": true,
          "example": "relax",
          "selector": {
            "text": null
          }
        },
        "flash": {
          "name": "Flash",
          "description": "If the light should flash.",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "advanced": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Long",
                  "value": "long"
                },
                {
                  "label": "Short",
                  "value": "short"
                }
              ]
            }
          }
        },
        "effect": {
          "name": "Effect",
          "description": "Light effect.",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "group": {
    "reload": {
      "name": "Reload",
      "description": "Reload group configuration, entities, and notify services.",
      "fields": {}
    },
    "set": {
      "name": "Set",
      "description": "Create/Update a user group.",
      "fields": {
        "object_id": {
          "name": "Object ID",
          "description": "Group id and part of entity id.",
          "required": true,
          "example": "test_group",
          "selector": {
            "text": null
          }
        },
        "name": {
          "name": "Name",
          "description": "Name of group",
          "example": "My test group",
          "selector": {
            "text": null
          }
        },
        "icon": {
          "name": "Icon",
          "description": "Name of icon for the group.",
          "example": "mdi:camera",
          "selector": {
            "icon": null
          }
        },
        "entities": {
          "name": "Entities",
          "description": "List of all members in the group. Not compatible with \u0027delta\u0027.",
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          }
        },
        "add_entities": {
          "name": "Add Entities",
          "description": "List of members that will change on group listening.",
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          }
        },
        "remove_entities": {
          "name": "Remove Entities",
          "description": "List of members that will be removed from group listening.",
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "object": null
          }
        },
        "all": {
          "name": "All",
          "description": "Enable this option if the group should only turn on when all entities are on.",
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Remove a user group.",
      "fields": {
        "object_id": {
          "name": "Object ID",
          "description": "Group id and part of entity id.",
          "required": true,
          "example": "test_group",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reload the YAML-based zone configuration.",
      "fields": {}
    }
  },
  "timer": {
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Start a timer",
      "fields": {
        "duration": {
          "description": "Duration the timer requires to finish. [optional]",
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pause a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Cancel a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finish a timer.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Change a timer",
      "fields": {
        "duration": {
          "description": "Duration to add or subtract to the running timer",
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_datetime configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "This can be used to dynamically set the date and/or time.",
      "fields": {
        "date": {
          "name": "Date",
          "description": "The target date the entity should be set to.",
          "example": "\u00222019-04-20\u0022",
          "selector": {
            "text": null
          }
        },
        "time": {
          "name": "Time",
          "description": "The target time the entity should be set to.",
          "example": "\u002205:04:20\u0022",
          "selector": {
            "time": null
          }
        },
        "datetime": {
          "name": "Date \u0026 Time",
          "description": "The target date \u0026 time the entity should be set to.",
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "text": null
          }
        },
        "timestamp": {
          "name": "Timestamp",
          "description": "The target date \u0026 time the entity should be set to as expressed by a UNIX timestamp.",
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_datetime"
            ]
          }
        ]
      }
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_select configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Select the first option of an input select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Select the last option of an input select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Select the next options of an input select entity.",
      "fields": {
        "cycle": {
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Select an option of an input select entity.",
      "fields": {
        "option": {
          "name": "Option",
          "description": "Option to be selected.",
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Select the previous options of an input select entity.",
      "fields": {
        "cycle": {
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Set the options of an input select entity.",
      "fields": {
        "options": {
          "name": "Options",
          "description": "Options for the input select entity.",
          "required": true,
          "example": "[\u0022Item A\u0022, \u0022Item B\u0022, \u0022Item C\u0022]",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_boolean configuration",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on an input boolean",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off an input boolean",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle an input boolean",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn a media player power on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn a media player power off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player power state.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turn a media player volume up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turn a media player volume down.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggle media player play/pause state.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Send the media player the command for play.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Send the media player the command for pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Send the media player the stop command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Send the media player the command for next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Send the media player the command for previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Send the media player the command to clear players playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Set a media player\u0027s volume level.",
      "fields": {
        "volume_level": {
          "name": "Level",
          "description": "Volume level to set as float.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute volume",
      "description": "Mute a media player\u0027s volume.",
      "fields": {
        "is_volume_muted": {
          "name": "Muted",
          "description": "True/false for mute/unmute.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Send the media player the command to seek in current playing media.",
      "fields": {
        "seek_position": {
          "name": "Position",
          "description": "Position to seek to. The format is platform dependent.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.01,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Group players together. Only works on platforms with support for player groups.",
      "fields": {
        "group_members": {
          "name": "Group members",
          "description": "The players which will be synced with the target player.",
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Send the media player the command to change input source.",
      "fields": {
        "source": {
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent.",
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Send the media player the command to change sound mode.",
      "fields": {
        "sound_mode": {
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to.",
          "example": "Music",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Send the media player the command for playing media.",
      "fields": {
        "media_content_id": {
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent.",
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          }
        },
        "media_content_type": {
          "name": "Content type",
          "description": "The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist.",
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          }
        },
        "enqueue": {
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue.",
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Play now",
                  "value": "play"
                },
                {
                  "label": "Play next",
                  "value": "next"
                },
                {
                  "label": "Add to queue",
                  "value": "add"
                },
                {
                  "label": "Play now and clear queue",
                  "value": "replace"
                }
              ]
            }
          }
        },
        "announce": {
          "name": "Announce",
          "description": "If the media should be played as an announcement.",
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "shuffle_set": {
      "name": "Shuffle",
      "description": "Set shuffling state.",
      "fields": {
        "shuffle": {
          "name": "Shuffle",
          "description": "True/false for enabling/disabling shuffle.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Unjoin the player from a group. Only works on platforms with support for player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Repeat",
      "description": "Set repeat mode",
      "fields": {
        "repeat": {
          "name": "Repeat mode",
          "description": "Repeat mode to set.",
          "required": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "off"
                },
                {
                  "label": "Repeat all",
                  "value": "all"
                },
                {
                  "label": "Repeat one",
                  "value": "one"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_number configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Set the value of an input number entity.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "The target value the entity should be set to.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.001,
              "mode": "box"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increment",
      "description": "Increment the value of an input number entity by its stepping.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrement the value of an input number entity by its stepping.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    }
  },
  "input_button": {
    "reload": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Press the input button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_button"
            ]
          }
        ]
      }
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn Off",
      "description": "Sends the Power Off Command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn On",
      "description": "Sends the Power On Command.",
      "fields": {
        "activity": {
          "name": "Activity",
          "description": "Activity ID or Activity Name to start.",
          "example": "BedroomTV",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send Command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Device ID to send command to.",
          "example": "32756745",
          "selector": {
            "text": null
          }
        },
        "command": {
          "name": "Command",
          "description": "A single command or a list of commands to send.",
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          }
        },
        "num_repeats": {
          "name": "Repeats",
          "description": "The number of times you want to repeat the command(s).",
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          }
        },
        "delay_secs": {
          "name": "Delay Seconds",
          "description": "The time you want to wait in between repeated commands.",
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "hold_secs": {
          "name": "Hold Seconds",
          "description": "The time you want to have it held before the release is send.",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn Command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Device ID to learn command from.",
          "example": "television",
          "selector": {
            "text": null
          }
        },
        "command": {
          "name": "Command",
          "description": "A single command or a list of commands to learn.",
          "example": "Turn on",
          "selector": {
            "object": null
          }
        },
        "command_type": {
          "name": "Command Type",
          "description": "The type of command to be learned.",
          "default": "ir",
          "selector": {
            "select": {
              "options": [
                "ir",
                "rf"
              ]
            }
          }
        },
        "alternative": {
          "name": "Alternative",
          "description": "If code must be stored as alternative (useful for discrete remotes).",
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "Timeout for the command to be learned.",
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete Command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Name of the device from which commands will be deleted.",
          "example": "television",
          "selector": {
            "text": null
          }
        },
        "command": {
          "name": "Command",
          "description": "A single command or a list of commands to delete.",
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Control tracked device.",
      "fields": {
        "mac": {
          "name": "MAC address",
          "description": "MAC address of device",
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          }
        },
        "dev_id": {
          "name": "Device ID",
          "description": "Id of device (find id in known_devices.yaml).",
          "example": "phonedave",
          "selector": {
            "text": null
          }
        },
        "host_name": {
          "name": "Host name",
          "description": "Hostname of device",
          "example": "Dave",
          "selector": {
            "text": null
          }
        },
        "location_name": {
          "name": "Location name",
          "description": "Name of location where device is located (not_home is away).",
          "example": "home",
          "selector": {
            "text": null
          }
        },
        "gps": {
          "name": "GPS coordinates",
          "description": "GPS coordinates where device is located (latitude, longitude).",
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          }
        },
        "gps_accuracy": {
          "name": "GPS accuracy",
          "description": "Accuracy of GPS coordinates.",
          "selector": {
            "number": {
              "min": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        },
        "battery": {
          "name": "Battery level",
          "description": "Battery level of device.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      }
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reload the input_text configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Set the value of an input text entity.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "The target value the entity should be set to.",
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_text"
            ]
          }
        ]
      }
    }
  },
  "netdaemon": {
    "register_service": {
      "name": "",
      "description": "Register a new service for netdaemon, used by the daemon and not to be used by users",
      "fields": {
        "service": {
          "description": "The name of the service to register"
        },
        "class": {
          "description": "The class that implements the service call"
        },
        "method": {
          "description": "The method to call"
        }
      }
    },
    "reload_apps": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "entity_create": {
      "name": "",
      "description": "Create an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_update": {
      "name": "",
      "description": "Update an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        },
        "state": {
          "description": "The state of the entity",
          "example": "Lorem ipsum"
        },
        "icon": {
          "description": "The icon for the entity",
          "example": "mdi:rocket-launch-outline"
        },
        "unit": {
          "description": "The unit of measurement for the entity"
        },
        "options": {
          "description": "List of options for a select entity"
        },
        "attributes": {
          "description": "The attributes of the entity"
        }
      }
    },
    "entity_remove": {
      "name": "",
      "description": "Remove an entity",
      "fields": {
        "entity_id": {
          "description": "The entity ID of the entity",
          "example": "sensor.awesome"
        }
      }
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turn a switch off",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn a switch on",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch state",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Set HVAC operation mode for climate device.",
      "fields": {
        "hvac_mode": {
          "name": "HVAC mode",
          "description": "New value of operation mode.",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "off"
                },
                {
                  "label": "Auto",
                  "value": "auto"
                },
                {
                  "label": "Cool",
                  "value": "cool"
                },
                {
                  "label": "Dry",
                  "value": "dry"
                },
                {
                  "label": "Fan Only",
                  "value": "fan_only"
                },
                {
                  "label": "Heat/Cool",
                  "value": "heat_cool"
                },
                {
                  "label": "Heat",
                  "value": "heat"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Set preset mode for climate device.",
      "fields": {
        "preset_mode": {
          "name": "Preset mode",
          "description": "New value of preset mode.",
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "set_aux_heat": {
      "name": "Turn on/off auxiliary heater",
      "description": "Turn auxiliary heater on/off for climate device.",
      "fields": {
        "aux_heat": {
          "name": "Auxiliary heating",
          "description": "New value of auxiliary heater.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Set target temperature of climate device.",
      "fields": {
        "temperature": {
          "name": "Temperature",
          "description": "New target temperature for HVAC.",
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          }
        },
        "target_temp_high": {
          "name": "Target temperature high",
          "description": "New target high temperature for HVAC.",
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          }
        },
        "target_temp_low": {
          "name": "Target temperature low",
          "description": "New target low temperature for HVAC.",
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          }
        },
        "hvac_mode": {
          "name": "HVAC mode",
          "description": "HVAC operation mode to set temperature to.",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "off"
                },
                {
                  "label": "Auto",
                  "value": "auto"
                },
                {
                  "label": "Cool",
                  "value": "cool"
                },
                {
                  "label": "Dry",
                  "value": "dry"
                },
                {
                  "label": "Fan Only",
                  "value": "fan_only"
                },
                {
                  "label": "Heat/Cool",
                  "value": "heat_cool"
                },
                {
                  "label": "Heat",
                  "value": "heat"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              1,
              2
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Set target humidity of climate device.",
      "fields": {
        "humidity": {
          "name": "Humidity",
          "description": "New target humidity for climate device.",
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Set fan operation for climate device.",
      "fields": {
        "fan_mode": {
          "name": "Fan mode",
          "description": "New value of fan mode.",
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Set swing operation for climate device.",
      "fields": {
        "swing_mode": {
          "name": "Swing mode",
          "description": "New value of swing mode.",
          "required": true,
          "example": "horizontal",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Select the first option of an select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Select the last option of an select entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Select the next options of an select entity.",
      "fields": {
        "cycle": {
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Select an option of an select entity.",
      "fields": {
        "option": {
          "name": "Option",
          "description": "Option to be selected.",
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Select the previous options of an select entity.",
      "fields": {
        "cycle": {
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reload the scene configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activate a scene with configuration.",
      "fields": {
        "entities": {
          "name": "Entities state",
          "description": "The entities and the state that they need to be.",
          "required": true,
          "example": "light.kitchen: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 80\n",
          "selector": {
            "object": null
          }
        },
        "transition": {
          "name": "Transition",
          "description": "Transition duration it takes to bring devices to the state defined in the scene.",
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "name": "Scene entity ID",
          "description": "The entity_id of the new scene.",
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          }
        },
        "entities": {
          "name": "Entities state",
          "description": "The entities to control with the scene.",
          "example": "light.tv_back_light: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 200\n",
          "selector": {
            "object": null
          }
        },
        "snapshot_entities": {
          "name": "Snapshot entities",
          "description": "The entities of which a snapshot is to be taken",
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "object": null
          }
        }
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activate a scene.",
      "fields": {
        "transition": {
          "name": "Transition",
          "description": "Transition duration it takes to bring devices to the state defined in the scene.",
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "scene"
            ]
          }
        ]
      }
    }
  },
  "notify": {
    "phones": {
      "name": "Send a notification with phones",
      "description": "Sends a notification message using the phones service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_hall_tablet": {
      "name": "Send a notification via alexa_media_hall_tablet",
      "description": "Sends a notification message using the alexa_media_hall_tablet integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_landing_tablet": {
      "name": "Send a notification via alexa_media_landing_tablet",
      "description": "Sends a notification message using the alexa_media_landing_tablet integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_all_speakers": {
      "name": "Send a notification via alexa_media_all_speakers",
      "description": "Sends a notification message using the alexa_media_all_speakers integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_kitchen_echo_show": {
      "name": "Send a notification via alexa_media_kitchen_echo_show",
      "description": "Sends a notification message using the alexa_media_kitchen_echo_show integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_lounge_echo_plus": {
      "name": "Send a notification via alexa_media_lounge_echo_plus",
      "description": "Sends a notification message using the alexa_media_lounge_echo_plus integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_drawing_room_echo_dot": {
      "name": "Send a notification via alexa_media_drawing_room_echo_dot",
      "description": "Sends a notification message using the alexa_media_drawing_room_echo_dot integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_bedroom_echo_show": {
      "name": "Send a notification via alexa_media_bedroom_echo_show",
      "description": "Sends a notification message using the alexa_media_bedroom_echo_show integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_guest_room_echo_show": {
      "name": "Send a notification via alexa_media_guest_room_echo_show",
      "description": "Sends a notification message using the alexa_media_guest_room_echo_show integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_andrew_s_fire_tv": {
      "name": "Send a notification via alexa_media_andrew_s_fire_tv",
      "description": "Sends a notification message using the alexa_media_andrew_s_fire_tv integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_upstairs": {
      "name": "Send a notification via alexa_media_upstairs",
      "description": "Sends a notification message using the alexa_media_upstairs integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_downstairs": {
      "name": "Send a notification via alexa_media_downstairs",
      "description": "Sends a notification message using the alexa_media_downstairs integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_lounge_fire_tv": {
      "name": "Send a notification via alexa_media_lounge_fire_tv",
      "description": "Sends a notification message using the alexa_media_lounge_fire_tv integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_andrew_s_echo_buds": {
      "name": "Send a notification via alexa_media_andrew_s_echo_buds",
      "description": "Sends a notification message using the alexa_media_andrew_s_echo_buds integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_lounge_tv": {
      "name": "Send a notification via alexa_media_lounge_tv",
      "description": "Sends a notification message using the alexa_media_lounge_tv integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_dressing_room_echo_dot": {
      "name": "Send a notification via alexa_media_dressing_room_echo_dot",
      "description": "Sends a notification message using the alexa_media_dressing_room_echo_dot integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_utility_room_echo_dot": {
      "name": "Send a notification via alexa_media_utility_room_echo_dot",
      "description": "Sends a notification message using the alexa_media_utility_room_echo_dot integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_dining_room_echo_input": {
      "name": "Send a notification via alexa_media_dining_room_echo_input",
      "description": "Sends a notification message using the alexa_media_dining_room_echo_input integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_basement": {
      "name": "Send a notification via alexa_media_basement",
      "description": "Sends a notification message using the alexa_media_basement integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_snug_echo_show": {
      "name": "Send a notification via alexa_media_snug_echo_show",
      "description": "Sends a notification message using the alexa_media_snug_echo_show integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_shed_echo_input": {
      "name": "Send a notification via alexa_media_shed_echo_input",
      "description": "Sends a notification message using the alexa_media_shed_echo_input integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_offices": {
      "name": "Send a notification via alexa_media_offices",
      "description": "Sends a notification message using the alexa_media_offices integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_patio": {
      "name": "Send a notification via alexa_media_patio",
      "description": "Sends a notification message using the alexa_media_patio integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_garden": {
      "name": "Send a notification via alexa_media_garden",
      "description": "Sends a notification message using the alexa_media_garden integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_this_device": {
      "name": "Send a notification via alexa_media_this_device",
      "description": "Sends a notification message using the alexa_media_this_device integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media": {
      "name": "Send a notification with alexa_media",
      "description": "Sends a notification message using the alexa_media service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the front-end.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_claireiphone": {
      "name": "Send a notification via mobile_app_claireiphone",
      "description": "Sends a notification message using the mobile_app_claireiphone integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_pixel_6": {
      "name": "Send a notification via mobile_app_pixel_6",
      "description": "Sends a notification message using the mobile_app_pixel_6 integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "alexa_media_last_called": {
      "name": "Send a notification via alexa_media_last_called",
      "description": "Sends a notification message using the alexa_media_last_called integration.",
      "fields": {
        "message": {
          "name": "Message",
          "description": "Message body of the notification.",
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "name": "Title",
          "description": "Title for your notification.",
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "name": "Target",
          "description": "An array of targets to send the notification to. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "name": "Data",
          "description": "Extended information for notification. Optional depending on the platform.",
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Open all or specified cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Close all or specified cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Move to specific position all or specified cover.",
      "fields": {
        "position": {
          "name": "Position",
          "description": "Position of the cover",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stop all or specified cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Open all or specified cover tilt.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Close all or specified cover tilt.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stop all or specified cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Move to specific position all or specified cover tilt.",
      "fields": {
        "tilt_position": {
          "name": "Tilt position",
          "description": "Tilt position of the cover.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggle a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ]
          }
        ]
      }
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Send a start command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent.",
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          }
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Send a stop command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent.",
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          }
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Send a restart command to a ffmpeg based sensor.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent.",
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          }
        }
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publish a message to an MQTT topic.",
      "fields": {
        "topic": {
          "name": "Topic",
          "description": "Topic to publish payload.",
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          }
        },
        "payload": {
          "name": "Payload",
          "description": "Payload to publish.",
          "example": "This is great",
          "selector": {
            "text": null
          }
        },
        "payload_template": {
          "name": "Payload Template",
          "description": "Template to render as payload value. Ignored if payload given.",
          "advanced": true,
          "example": "{{ states(\u0027sensor.temperature\u0027) }}",
          "selector": {
            "object": null
          }
        },
        "qos": {
          "name": "QoS",
          "description": "Quality of Service to use.",
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": [
                "0",
                "1",
                "2"
              ]
            }
          }
        },
        "retain": {
          "name": "Retain",
          "description": "If message should have the retain flag set.",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "dump": {
      "name": "Dump",
      "description": "Dump messages on a topic selector to the \u0027mqtt_dump.txt\u0027 file in your configuration folder.",
      "fields": {
        "topic": {
          "name": "Topic",
          "description": "topic to listen to",
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          }
        },
        "duration": {
          "name": "Duration",
          "description": "how long we should listen for messages in seconds",
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reload all MQTT entities from YAML.",
      "fields": {}
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enable the motion detection in a camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disable the motion detection in a camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Take a snapshot from a camera.",
      "fields": {
        "filename": {
          "name": "Filename",
          "description": "Template of a Filename. Variable is entity_id.",
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Play camera stream on supported media player.",
      "fields": {
        "media_player": {
          "name": "Media Player",
          "description": "Name(s) of media player to stream to.",
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "format": {
          "name": "Format",
          "description": "Stream format supported by media player.",
          "default": "hls",
          "selector": {
            "select": {
              "options": [
                "hls"
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Record live camera feed.",
      "fields": {
        "filename": {
          "name": "Filename",
          "description": "Template of a Filename. Variable is entity_id. Must be mp4.",
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          }
        },
        "duration": {
          "name": "Duration",
          "description": "Target recording length.",
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          }
        },
        "lookback": {
          "name": "Lookback",
          "description": "Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "humidifier": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turn humidifier device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn humidifier device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a humidifier device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_mode": {
      "name": "Set mode",
      "description": "Set mode for humidifier device.",
      "fields": {
        "mode": {
          "description": "New mode",
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set humidity",
      "description": "Set target humidity of humidifier device.",
      "fields": {
        "humidity": {
          "description": "New target humidity for humidifier device.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Set the value of a Number entity.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "The target value the entity should be set to.",
          "example": 42,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    }
  },
  "text": {
    "set_value": {
      "name": "Set value",
      "description": "Set value of a text entity.",
      "fields": {
        "value": {
          "name": "Value",
          "description": "Value to set.",
          "required": true,
          "example": "Hello world!",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "text"
            ]
          }
        ]
      }
    }
  },
  "siren": {
    "turn_on": {
      "name": "",
      "description": "Turn siren on.",
      "fields": {
        "tone": {
          "description": "The tone to emit when turning the siren on. When \u0060available_tones\u0060 property is a map, either the key or the value can be used. Must be supported by the integration.",
          "example": "fire",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "volume_level": {
          "description": "The volume level of the noise to emit when turning the siren on. Must be supported by the integration.",
          "example": 0.5,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.05
            }
          }
        },
        "duration": {
          "description": "The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration.",
          "example": 15,
          "required": false,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "",
      "description": "Turn siren off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "",
      "description": "Toggles a siren.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ]
          }
        ]
      }
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlock all or specified locks.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to unlock the lock with.",
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Lock all or specified locks.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to lock the lock with.",
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Open all or specified locks.",
      "fields": {
        "code": {
          "name": "Code",
          "description": "An optional code to open the lock with.",
          "example": 1234,
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    }
  },
  "water_heater": {
    "set_away_mode": {
      "name": "Set away mode",
      "description": "Turn away mode on/off for water_heater device.",
      "fields": {
        "away_mode": {
          "name": "Away mode",
          "description": "New value of away mode.",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Set target temperature of water_heater device.",
      "fields": {
        "temperature": {
          "name": "Temperature",
          "description": "New target temperature for water heater.",
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "\u00B0"
            }
          }
        },
        "operation_mode": {
          "name": "Operation mode",
          "description": "New value of operation mode.",
          "example": "eco",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_operation_mode": {
      "name": "Set operation mode",
      "description": "Set operation mode for water_heater device.",
      "fields": {
        "operation_mode": {
          "name": "Operation mode",
          "description": "New value of operation mode.",
          "required": true,
          "example": "eco",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "turn_on": {
      "name": "",
      "description": "",
      "fields": {}
    }
  },
  "vacuum": {
    "turn_on": {
      "name": "Turn on",
      "description": "Start a new cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stop the current cleaning task and return to home.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "start_pause": {
      "name": "Start/Pause",
      "description": "Start, pause, or resume the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "start": {
      "name": "Start",
      "description": "Start or resume the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pause the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "return_to_base": {
      "name": "Return to base",
      "description": "Tell the vacuum cleaner to return to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "clean_spot": {
      "name": "Clean spot",
      "description": "Tell the vacuum cleaner to do a spot clean-up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "locate": {
      "name": "Locate",
      "description": "Locate the vacuum cleaner robot.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stop the current cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "set_fan_speed": {
      "name": "Set fan speed",
      "description": "Set the fan speed of the vacuum cleaner.",
      "fields": {
        "fan_speed": {
          "name": "Fan speed",
          "description": "Platform dependent vacuum cleaner fan speed, with speed steps, like \u0027medium\u0027 or by percentage, between 0 and 100.",
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Send a raw command to the vacuum cleaner.",
      "fields": {
        "command": {
          "name": "Command",
          "description": "Command to execute.",
          "required": true,
          "example": "set_dnd_timer",
          "selector": {
            "text": null
          }
        },
        "params": {
          "name": "Parameters",
          "description": "Parameters for the command.",
          "example": "{ \u0022key\u0022: \u0022value\u0022 }",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    }
  },
  "script": {
    "feed_cats": {
      "name": "Feed Cats",
      "description": "",
      "fields": {}
    },
    "light_effect_continuous": {
      "name": "Light Effect Continuous",
      "description": "",
      "fields": {}
    },
    "light_effect_timed": {
      "name": "Light Effect Timed",
      "description": "",
      "fields": {}
    },
    "notify_alexa_everywhere": {
      "name": "Notify Alexa Everywhere",
      "description": "",
      "fields": {}
    },
    "notify_pushbullet": {
      "name": "Notify Pushbullet",
      "description": "",
      "fields": {}
    },
    "notify_all": {
      "name": "Notify All",
      "description": "",
      "fields": {}
    },
    "doorbell_alexa": {
      "name": "Doorbell Alexa",
      "description": "",
      "fields": {}
    },
    "entity_controller_reset": {
      "name": "Entity Controller Reset",
      "description": "",
      "fields": {}
    },
    "room_controller_reset": {
      "name": "Room Controller Reset",
      "description": "",
      "fields": {}
    },
    "new_script": {
      "name": "activate_alexa_actionable_notification",
      "description": "Activates an actionable notification on a specific echo device",
      "fields": {
        "text": {
          "description": "The text you would like alexa to speak.",
          "example": "What would you like the thermostat set to?",
          "required": false,
          "advanced": false
        },
        "event_id": {
          "description": "Correlation ID for event responses",
          "example": "ask_for_temperature",
          "required": false,
          "advanced": false
        },
        "alexa_device": {
          "description": "Alexa device you want to trigger",
          "example": "media_player.bedroom_echo",
          "required": false,
          "advanced": false
        }
      }
    },
    "alarm_triggered": {
      "name": "Alarm Triggered",
      "description": "",
      "fields": {}
    },
    "reload": {
      "name": "Reload",
      "description": "Reload all the available scripts",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn on script",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn off script",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle script",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    }
  },
  "google": {
    "add_event": {
      "name": "Add event",
      "description": "Add a new calendar event.",
      "fields": {
        "calendar_id": {
          "name": "Calendar ID",
          "description": "The id of the calendar you want.",
          "required": true,
          "example": "Your email",
          "selector": {
            "text": null
          }
        },
        "summary": {
          "name": "Summary",
          "description": "Acts as the title of the event.",
          "required": true,
          "example": "Bowling",
          "selector": {
            "text": null
          }
        },
        "description": {
          "name": "Description",
          "description": "The description of the event. Optional.",
          "example": "Birthday bowling",
          "selector": {
            "text": null
          }
        },
        "start_date_time": {
          "name": "Start time",
          "description": "The date and time the event should start.",
          "example": "2019-03-22 20:00:00",
          "selector": {
            "text": null
          }
        },
        "end_date_time": {
          "name": "End time",
          "description": "The date and time the event should end.",
          "example": "2019-03-22 22:00:00",
          "selector": {
            "text": null
          }
        },
        "start_date": {
          "name": "Start date",
          "description": "The date the whole day event should start.",
          "example": "2019-03-10",
          "selector": {
            "text": null
          }
        },
        "end_date": {
          "name": "End date",
          "description": "The date the whole day event should end.",
          "example": "2019-03-11",
          "selector": {
            "text": null
          }
        },
        "in": {
          "name": "In",
          "description": "Days or weeks that you want to create the event in.",
          "example": "\u0022days\u0022: 2 or \u0022weeks\u0022: 2",
          "selector": {
            "object": null
          }
        }
      }
    },
    "create_event": {
      "name": "Create event",
      "description": "Add a new calendar event.",
      "fields": {
        "summary": {
          "name": "Summary",
          "description": "Acts as the title of the event.",
          "required": true,
          "example": "Bowling",
          "selector": {
            "text": null
          }
        },
        "description": {
          "name": "Description",
          "description": "The description of the event. Optional.",
          "example": "Birthday bowling",
          "selector": {
            "text": null
          }
        },
        "start_date_time": {
          "name": "Start time",
          "description": "The date and time the event should start.",
          "example": "2022-03-22 20:00:00",
          "selector": {
            "text": null
          }
        },
        "end_date_time": {
          "name": "End time",
          "description": "The date and time the event should end.",
          "example": "2022-03-22 22:00:00",
          "selector": {
            "text": null
          }
        },
        "start_date": {
          "name": "Start date",
          "description": "The date the whole day event should start.",
          "example": "2022-03-10",
          "selector": {
            "text": null
          }
        },
        "end_date": {
          "name": "End date",
          "description": "The date the whole day event should end.",
          "example": "2022-03-11",
          "selector": {
            "text": null
          }
        },
        "in": {
          "name": "In",
          "description": "Days or weeks that you want to create the event in.",
          "example": "\u0022days\u0022: 2 or \u0022weeks\u0022: 2",
          "selector": {
            "object": null
          }
        },
        "location": {
          "name": "Location",
          "description": "The location of the event. Optional.",
          "example": "Conference Room - F123, Bldg. 002",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "google",
            "domain": [
              "calendar"
            ]
          }
        ]
      }
    }
  },
  "template": {
    "reload": {
      "name": "Reload",
      "description": "Reload all template entities.",
      "fields": {}
    }
  },
  "icloud": {
    "play_sound": {
      "name": "Play sound",
      "description": "Play sound on an Apple device.",
      "fields": {
        "account": {
          "name": "Account",
          "description": "Your iCloud account username (email) or account name.",
          "required": true,
          "example": "steve@apple.com",
          "selector": {
            "text": null
          }
        },
        "device_name": {
          "name": "Device Name",
          "description": "The name of the Apple device to play a sound.",
          "required": true,
          "example": "stevesiphone",
          "selector": {
            "text": null
          }
        }
      }
    },
    "display_message": {
      "name": "Display message",
      "description": "Display a message on an Apple device.",
      "fields": {
        "account": {
          "name": "Account",
          "description": "Your iCloud account username (email) or account name.",
          "required": true,
          "example": "steve@apple.com",
          "selector": {
            "text": null
          }
        },
        "device_name": {
          "name": "Device Name",
          "description": "The name of the Apple device to display the message.",
          "required": true,
          "example": "stevesiphone",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "Message",
          "description": "The content of your message.",
          "required": true,
          "example": "Hey Steve !",
          "selector": {
            "text": null
          }
        },
        "sound": {
          "name": "Sound",
          "description": "To make a sound when displaying the message.",
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "lost_device": {
      "name": "Lost device",
      "description": "Make an Apple device in lost state.",
      "fields": {
        "account": {
          "name": "Account",
          "description": "Your iCloud account username (email) or account name.",
          "required": true,
          "example": "steve@apple.com",
          "selector": {
            "text": null
          }
        },
        "device_name": {
          "name": "Device Name",
          "description": "The name of the Apple device to set lost.",
          "required": true,
          "example": "stevesiphone",
          "selector": {
            "text": null
          }
        },
        "number": {
          "name": "Number",
          "description": "The phone number to call in lost mode (must contain country code).",
          "required": true,
          "example": "\u002B33450020100",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "Message",
          "description": "The message to display in lost mode.",
          "required": true,
          "example": "Call me",
          "selector": {
            "text": null
          }
        }
      }
    },
    "update": {
      "name": "Update",
      "description": "Update iCloud devices.",
      "fields": {
        "account": {
          "name": "Account",
          "description": "Your iCloud account username (email) or account name.",
          "required": true,
          "example": "steve@apple.com",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "squeezebox": {
    "call_method": {
      "name": "Call method",
      "description": "Call a custom Squeezebox JSONRPC API.",
      "fields": {
        "command": {
          "name": "Command",
          "description": "Command to pass to Logitech Media Server (p0 in the CLI documentation).",
          "required": true,
          "example": "playlist",
          "selector": {
            "text": null
          }
        },
        "parameters": {
          "name": "Parameters",
          "description": "Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation).\n",
          "example": "[\u0022loadtracks\u0022, \u0022album.titlesearch=Revolver\u0022]",
          "advanced": true,
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "squeezebox",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "call_query": {
      "name": "Call query",
      "description": "Call a custom Squeezebox JSONRPC API. Result will be stored in \u0027query_result\u0027 attribute of the Squeezebox entity.\n",
      "fields": {
        "command": {
          "name": "Command",
          "description": "Command to pass to Logitech Media Server (p0 in the CLI documentation).",
          "required": true,
          "example": "albums",
          "selector": {
            "text": null
          }
        },
        "parameters": {
          "name": "Parameters",
          "description": "Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation).\n",
          "example": "[\u00220\u0022, \u002220\u0022, \u0022search:Revolver\u0022]",
          "advanced": true,
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "squeezebox",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "sync": {
      "name": "Sync",
      "description": "Add another player to this player\u0027s sync group. If the other player is already in a sync group, it will leave it.\n",
      "fields": {
        "other_player": {
          "name": "Other player",
          "description": "Name of the other Squeezebox player to link.",
          "required": true,
          "example": "media_player.living_room",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "squeezebox",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    },
    "unsync": {
      "name": "Unsync",
      "description": "Remove this player from its sync group.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "squeezebox",
            "domain": [
              "media_player"
            ]
          }
        ]
      }
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Trigger the actions of an automation.",
      "fields": {
        "skip_condition": {
          "name": "Skip conditions",
          "description": "Whether or not the conditions will be skipped.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggle (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enable an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disable an automation.",
      "fields": {
        "stop_actions": {
          "name": "Stop actions",
          "description": "Stop currently running actions.",
          "default": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reload the automation configuration.",
      "fields": {}
    }
  },
  "unifi": {
    "reconnect_client": {
      "name": "Reconnect wireless client",
      "description": "Try to get wireless client to reconnect to UniFi Network",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Try reconnect client to wireless network",
          "required": true,
          "selector": {
            "device": {
              "integration": "unifi"
            }
          }
        }
      }
    },
    "remove_clients": {
      "name": "Remove clients from the UniFi Network",
      "description": "Clean up clients that has only been associated with the controller for a short period of time.",
      "fields": {}
    }
  },
  "yeelight": {
    "set_mode": {
      "name": "Set mode",
      "description": "Set a operation mode.",
      "fields": {
        "mode": {
          "name": "Mode",
          "description": "Operation mode.",
          "required": true,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Color Flow",
                  "value": "color_flow"
                },
                {
                  "label": "HSV",
                  "value": "hsv"
                },
                {
                  "label": "Last",
                  "value": "last"
                },
                {
                  "label": "Moonlight",
                  "value": "moonlight"
                },
                {
                  "label": "Normal",
                  "value": "normal"
                },
                {
                  "label": "RGB",
                  "value": "rgb"
                }
              ]
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "start_flow": {
      "name": "Start flow",
      "description": "Start a custom flow, using transitions from https://yeelight.readthedocs.io/en/stable/yeelight.html#flow-objects",
      "fields": {
        "count": {
          "name": "Count",
          "description": "The number of times to run this flow (0 to run forever).",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 100
            }
          }
        },
        "action": {
          "name": "Action",
          "description": "The action to take after the flow stops.",
          "default": "recover",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "off"
                },
                {
                  "label": "Recover",
                  "value": "recover"
                },
                {
                  "label": "Stay",
                  "value": "stay"
                }
              ]
            }
          }
        },
        "transitions": {
          "name": "Transitions",
          "description": "Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html",
          "example": "[{ \u0022TemperatureTransition\u0022: [1900, 1000, 80] }, { \u0022TemperatureTransition\u0022: [1900, 1000, 10] }]",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_color_scene": {
      "name": "Set color scene",
      "description": "Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.",
      "fields": {
        "rgb_color": {
          "name": "RGB color",
          "description": "Color for the light in RGB-format.",
          "example": "[255, 100, 100]",
          "selector": {
            "object": null
          }
        },
        "brightness": {
          "name": "Brightness",
          "description": "The brightness value to set.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_hsv_scene": {
      "name": "Set HSV scene",
      "description": "Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.",
      "fields": {
        "hs_color": {
          "name": "Hue/sat color",
          "description": "Color for the light in hue/sat format. Hue is 0-359 and Sat is 0-100.",
          "example": "[300, 70]",
          "selector": {
            "object": null
          }
        },
        "brightness": {
          "name": "Brightness",
          "description": "The brightness value to set.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_color_temp_scene": {
      "name": "Set color temperature scene",
      "description": "Changes the light to the specified color temperature. If the light is off, it will be turned on.",
      "fields": {
        "kelvin": {
          "name": "Kelvin",
          "description": "Color temperature for the light in Kelvin.",
          "selector": {
            "number": {
              "min": 1700,
              "max": 6500,
              "step": 100,
              "unit_of_measurement": "K"
            }
          }
        },
        "brightness": {
          "name": "Brightness",
          "description": "The brightness value to set.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_color_flow_scene": {
      "name": "Set color flow scene",
      "description": "starts a color flow. If the light is off, it will be turned on.",
      "fields": {
        "count": {
          "name": "Count",
          "description": "The number of times to run this flow (0 to run forever).",
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 100
            }
          }
        },
        "action": {
          "name": "Action",
          "description": "The action to take after the flow stops.",
          "default": "recover",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Off",
                  "value": "off"
                },
                {
                  "label": "Recover",
                  "value": "recover"
                },
                {
                  "label": "Stay",
                  "value": "stay"
                }
              ]
            }
          }
        },
        "transitions": {
          "name": "Transitions",
          "description": "Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html",
          "example": "[{ \u0022TemperatureTransition\u0022: [1900, 1000, 80] }, { \u0022TemperatureTransition\u0022: [1900, 1000, 10] }]",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_auto_delay_off_scene": {
      "name": "Set auto delay off scene",
      "description": "Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, Set a color scene, if light is off, it will be turned on.",
      "fields": {
        "minutes": {
          "name": "Minutes",
          "description": "The time to wait before automatically turning the light off.",
          "selector": {
            "number": {
              "min": 1,
              "max": 60,
              "unit_of_measurement": "minutes"
            }
          }
        },
        "brightness": {
          "name": "Brightness",
          "description": "The brightness value to set.",
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_music_mode": {
      "name": "Set music mode",
      "description": "Enable or disable music_mode",
      "fields": {
        "music_mode": {
          "name": "Music mode",
          "description": "Use true or false to enable / disable music_mode",
          "required": true,
          "selector": {
            "boolean": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "yeelight",
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "adguard": {
    "add_url": {
      "name": "Add url",
      "description": "Add a new filter subscription to AdGuard Home.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "The name of the filter subscription.",
          "required": true,
          "example": "Example",
          "selector": {
            "text": null
          }
        },
        "url": {
          "name": "Url",
          "description": "The filter URL to subscribe to, containing the filter rules.",
          "required": true,
          "example": "https://www.example.com/filter/1.txt",
          "selector": {
            "text": null
          }
        }
      }
    },
    "remove_url": {
      "name": "Remove url",
      "description": "Removes a filter subscription from AdGuard Home.",
      "fields": {
        "url": {
          "name": "Url",
          "description": "The filter subscription URL to remove.",
          "required": true,
          "example": "https://www.example.com/filter/1.txt",
          "selector": {
            "text": null
          }
        }
      }
    },
    "enable_url": {
      "name": "Enable url",
      "description": "Enables a filter subscription in AdGuard Home.",
      "fields": {
        "url": {
          "name": "Url",
          "description": "The filter subscription URL to enable.",
          "required": true,
          "example": "https://www.example.com/filter/1.txt",
          "selector": {
            "text": null
          }
        }
      }
    },
    "disable_url": {
      "name": "Disable url",
      "description": "Disables a filter subscription in AdGuard Home.",
      "fields": {
        "url": {
          "name": "Url",
          "description": "The filter subscription URL to disable.",
          "required": true,
          "example": "https://www.example.com/filter/1.txt",
          "selector": {
            "text": null
          }
        }
      }
    },
    "refresh": {
      "name": "Refresh",
      "description": "Refresh all filter subscriptions in AdGuard Home.",
      "fields": {
        "force": {
          "name": "Force",
          "description": "Force update (bypasses AdGuard Home throttling). \u0022true\u0022 to force, or \u0022false\u0022 to omit for a regular refresh.",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    }
  },
  "esphome": {
    "nspanel_upload_tft": {
      "name": "",
      "description": "Calls the service upload_tft of the node nspanel",
      "fields": {}
    },
    "nspanel_upload_tft_url": {
      "name": "",
      "description": "Calls the service upload_tft_url of the node nspanel",
      "fields": {
        "url": {
          "name": "url",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_printf": {
      "name": "",
      "description": "Calls the service send_command_printf of the node nspanel",
      "fields": {
        "cmd": {
          "name": "cmd",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_text_printf": {
      "name": "",
      "description": "Calls the service send_command_text_printf of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "message",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_value": {
      "name": "",
      "description": "Calls the service send_command_value of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "message",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "nspanel_send_command_hide": {
      "name": "",
      "description": "Calls the service send_command_hide of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_show": {
      "name": "",
      "description": "Calls the service send_command_show of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_command_show_all": {
      "name": "",
      "description": "Calls the service send_command_show_all of the node nspanel",
      "fields": {}
    },
    "nspanel_send_command_font_color": {
      "name": "",
      "description": "Calls the service send_command_font_color of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "message",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "nspanel_send_command_background_color": {
      "name": "",
      "description": "Calls the service send_command_background_color of the node nspanel",
      "fields": {
        "component": {
          "name": "component",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "message": {
          "name": "message",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "nspanel_notification_show": {
      "name": "",
      "description": "Calls the service notification_show of the node nspanel",
      "fields": {
        "label": {
          "name": "label",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "text": {
          "name": "text",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_notification_clear": {
      "name": "",
      "description": "Calls the service notification_clear of the node nspanel",
      "fields": {}
    },
    "nspanel_set_settings_entity": {
      "name": "",
      "description": "Calls the service set_settings_entity of the node nspanel",
      "fields": {
        "entity": {
          "name": "entity",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_play_rtttl": {
      "name": "",
      "description": "Calls the service play_rtttl of the node nspanel",
      "fields": {
        "song_str": {
          "name": "song_str",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_qr_code": {
      "name": "",
      "description": "Calls the service qr_code of the node nspanel",
      "fields": {
        "qrdata": {
          "name": "qrdata",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    },
    "nspanel_send_thermostat_cycle_state": {
      "name": "",
      "description": "Calls the service send_thermostat_cycle_state of the node nspanel",
      "fields": {
        "value": {
          "name": "value",
          "required": true,
          "description": null,
          "example": "12.3",
          "selector": {
            "number": {
              "mode": "box",
              "step": 0.001
            }
          }
        }
      }
    },
    "nspanel_set_button": {
      "name": "",
      "description": "Calls the service set_button of the node nspanel",
      "fields": {
        "btn_id": {
          "name": "btn_id",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "btn_pic": {
          "name": "btn_pic",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_bg": {
          "name": "btn_bg",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_icon_font": {
          "name": "btn_icon_font",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_txt_font": {
          "name": "btn_txt_font",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_bri_font": {
          "name": "btn_bri_font",
          "required": true,
          "description": null,
          "example": "42",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "btn_icon": {
          "name": "btn_icon",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "btn_label": {
          "name": "btn_label",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        },
        "btn_bri_txt": {
          "name": "btn_bri_txt",
          "required": true,
          "description": null,
          "example": "Example text",
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "unifiprotect": {
    "add_doorbell_text": {
      "name": "Add Custom Doorbell Text",
      "description": "Adds a new custom message for Doorbells.",
      "fields": {
        "device_id": {
          "name": "UniFi Protect NVR",
          "description": "Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.",
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect"
            }
          }
        },
        "message": {
          "name": "Custom Message",
          "description": "New custom message to add for Doorbells. Must be less than 30 characters.",
          "example": "Come In",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "remove_doorbell_text": {
      "name": "Remove Custom Doorbell Text",
      "description": "Removes an existing message for Doorbells.",
      "fields": {
        "device_id": {
          "name": "UniFi Protect NVR",
          "description": "Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.",
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect"
            }
          }
        },
        "message": {
          "name": "Custom Message",
          "description": "Existing custom message to remove for Doorbells.",
          "example": "Go Away!",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "set_default_doorbell_text": {
      "name": "Set Default Doorbell Text",
      "description": "Sets the default doorbell message. This will be the message that is automatically selected when a message \u0022expires\u0022.",
      "fields": {
        "device_id": {
          "name": "UniFi Protect NVR",
          "description": "Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.",
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect"
            }
          }
        },
        "message": {
          "name": "Default Message",
          "description": "The default message for your Doorbell. Must be less than 30 characters.",
          "example": "Welcome!",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "set_chime_paired_doorbells": {
      "name": "Set Chime Paired Doorbells",
      "description": "Use to set the paired doorbell(s) with a smart chime.\n",
      "fields": {
        "device_id": {
          "name": "Chime",
          "description": "The Chimes to link to the doorbells to",
          "required": true,
          "selector": {
            "device": {
              "integration": "unifiprotect",
              "entity": {
                "device_class": "unifiprotect__chime_button"
              }
            }
          }
        },
        "doorbells": {
          "name": "Doorbells",
          "description": "The Doorbells to link to the chime",
          "example": "binary_sensor.front_doorbell_doorbell",
          "required": false,
          "selector": {
            "target": {
              "entity": {
                "integration": "unifiprotect",
                "domain": "binary_sensor",
                "device_class": "occupancy"
              }
            }
          }
        }
      }
    }
  },
  "nest": {
    "set_away_mode": {
      "name": "Set away mode",
      "description": "Set the away mode for a Nest structure.",
      "fields": {
        "away_mode": {
          "name": "Away mode",
          "description": "New mode to set.",
          "required": true,
          "selector": {
            "select": {
              "options": [
                "away",
                "home"
              ]
            }
          }
        },
        "structure": {
          "name": "Structure",
          "description": "Name(s) of structure(s) to change. Defaults to all structures if not specified.",
          "example": "Apartment",
          "selector": {
            "object": null
          }
        }
      }
    },
    "set_eta": {
      "name": "Set estimated time of arrival",
      "description": "Set or update the estimated time of arrival window for a Nest structure.",
      "fields": {
        "eta": {
          "name": "ETA",
          "description": "Estimated time of arrival from now.",
          "required": true,
          "selector": {
            "time": null
          }
        },
        "eta_window": {
          "name": "ETA window",
          "description": "Estimated time of arrival window.",
          "default": "00:01",
          "selector": {
            "time": null
          }
        },
        "trip_id": {
          "name": "Trip ID",
          "description": "Unique ID for the trip. Default is auto-generated using a timestamp.",
          "example": "Leave Work",
          "selector": {
            "text": null
          }
        },
        "structure": {
          "name": "Structure",
          "description": "Name(s) of structure(s) to change. Defaults to all structures if not specified.",
          "example": "Apartment",
          "selector": {
            "object": null
          }
        }
      }
    },
    "cancel_eta": {
      "name": "Cancel ETA",
      "description": "Cancel an existing estimated time of arrival window for a Nest structure.",
      "fields": {
        "trip_id": {
          "name": "Trip ID",
          "description": "Unique ID for the trip.",
          "required": true,
          "example": "Leave Work",
          "selector": {
            "text": null
          }
        },
        "structure": {
          "name": "Structure",
          "description": "Name(s) of structure(s) to change. Defaults to all structures if not specified.",
          "example": "Apartment",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "neato": {
    "custom_cleaning": {
      "name": "Zone Cleaning service",
      "description": "Zone Cleaning service call specific to Neato Botvacs.",
      "fields": {
        "mode": {
          "name": "Set cleaning mode",
          "description": "Set the cleaning mode: 1 for eco and 2 for turbo. Defaults to turbo if not set.",
          "default": 2,
          "selector": {
            "number": {
              "min": 1,
              "max": 2,
              "mode": "box"
            }
          }
        },
        "navigation": {
          "name": "Set navigation mode",
          "description": "Set the navigation mode: 1 for normal, 2 for extra care, 3 for deep. Defaults to normal if not set.",
          "default": 1,
          "selector": {
            "number": {
              "min": 1,
              "max": 3,
              "mode": "box"
            }
          }
        },
        "category": {
          "name": "Use cleaning map",
          "description": "Whether to use a persistent map or not for cleaning (i.e. No go lines): 2 for no map, 4 for map. Default to using map if not set (and fallback to no map if no map is found).",
          "default": 4,
          "selector": {
            "number": {
              "min": 2,
              "max": 4,
              "step": 2,
              "mode": "box"
            }
          }
        },
        "zone": {
          "name": "Name of the zone to clean (Only Botvac D7)",
          "description": "Only supported on the Botvac D7. Name of the zone to clean. Defaults to no zone i.e. complete house cleanup.",
          "example": "Kitchen",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "integration": "neato",
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    }
  },
  "alexa_media": {
    "update_last_called": {
      "name": "",
      "description": "Forces update of last_called echo device for each Alexa account.",
      "fields": {
        "email": {
          "description": "List of Alexa accounts to update. If empty, will update all known accounts.",
          "example": "my_email@alexa.com"
        }
      }
    },
    "clear_history": {
      "name": "",
      "description": "Clear last entries from Alexa history for each Alexa account.",
      "fields": {
        "email": {
          "description": "List of Alexa accounts to update. If empty, will delete from all known accounts.",
          "example": "my_email@alexa.com"
        },
        "entries": {
          "description": "Number of entries to clear from 1 to 50. If empty, clear 50.",
          "example": 50
        }
      }
    },
    "force_logout": {
      "name": "",
      "description": "Force logout of Alexa Login account and deletion of .pickle. Intended for debugging use.",
      "fields": {
        "email": {
          "description": "List of Alexa accounts to log out. If empty, will log out from all known accounts.",
          "example": "my_email@alexa.com"
        }
      }
    }
  },
  "entity_controller": {
    "activate": {
      "name": "",
      "description": "Activates an Entity Controller. Turns on the entity and transitions to the active_timer state. This also clears the blocked state if set.",
      "fields": {
        "entity_id": {
          "description": "Name(s) of entities to trigger.",
          "example": "entity_controller.motion_light"
        }
      }
    },
    "clear_block": {
      "name": "",
      "description": "Clears the blocked state of an Entity Controller, if set",
      "fields": {
        "entity_id": {
          "description": "Name(s) of entities to change.",
          "example": "entity_controller.motion_light"
        }
      }
    },
    "enable_block": {
      "name": "",
      "description": "Enables the blocked state of an Entity Controller, if timer is active",
      "fields": {
        "entity_id": {
          "description": "Name(s) of entities to change.",
          "example": "entity_controller.motion_light"
        }
      }
    },
    "enable_stay_mode": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "disable_stay_mode": {
      "name": "",
      "description": "",
      "fields": {}
    },
    "set_night_mode": {
      "name": "",
      "description": "Change the night mode start and end times, does nothing if night mode is not defined in configuration. If both start_time and end_time are not provided, it will set both to midnight, effectivly disabling night mode.",
      "fields": {
        "entity_id": {
          "description": "Name(s) of entities to change.",
          "example": "entity_controller.motion_light"
        },
        "start_time": {
          "description": "new start time to set night mode to.",
          "example": "sunset - 00:30:00 or \u002718:30:00\u0027 or now or constraint (set same as day start)"
        },
        "end_time": {
          "description": "new end time to set night mode to.",
          "example": "sunset \u002B 03:00:00 or \u002721:30:00\u0027 or now or constraint (set same as day end)"
        }
      }
    }
  },
  "spotcast": {
    "start": {
      "name": "",
      "description": "Starts spotify playback on chromecast devices",
      "fields": {
        "device_name": {
          "name": "Device Name",
          "description": "The friendly name of the chromecast or spotify connect device. First checks spotify device list for name (not used together with entity_id and spotify_device_id).",
          "example": "Livingroom",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "spotify_device_id": {
          "name": "Spotify Device ID",
          "description": "Advanced users only. The spotify device id (not used together with entity_id or device_name).",
          "example": "4363634563457346xcyvydgf3qwa",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "entity_id": {
          "name": "Entity ID",
          "description": "The entity_id of the chromecast mediaplayer. Friendly name MUST match the spotify connect device name (not used together with device_name and spotify_device_id).",
          "example": "media_player.vardagsrum",
          "required": false,
          "selector": {
            "entity": {
              "domain": "media_player",
              "integration": "cast"
            }
          }
        },
        "uri": {
          "name": "URI",
          "description": "Supported Spotify URI as string. None or empty uri will transfer the current/last playback (see parameter force_playback).",
          "example": "spotify:playlist:37i9dQZF1DX3yvAYDslnv8",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "category": {
          "name": "Category",
          "description": "A category to fetch playlist from. See https://developer.spotify.com/console/get-browse-categories/ for a list of categories",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "country": {
          "name": "Country",
          "description": "Country code to use with category. See https://spotipy.readthedocs.io/en/2.19.0/#spotipy.client.Spotify.country_codes for list of available codes",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "limit": {
          "name": "Limit",
          "description": "Limit of playlist to fetch in a given category. Default 20",
          "required": false,
          "default": 20,
          "selector": {
            "number": {
              "mode": "box",
              "step": 1,
              "min": 0,
              "max": 50
            }
          }
        },
        "search": {
          "name": "Search",
          "description": "A Search request to the spotify API. Will play the most relevant search result.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "account": {
          "name": "Account",
          "description": "Optionally starts Spotify using an alternative account specified in config.",
          "example": "my_wifes",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "force_playback": {
          "name": "Force Playback",
          "description": "In case of transfering playback: If true starts playing the user\u0027s last playback even if nothing is currently playing.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "random_song": {
          "name": "Random Song",
          "description": "Starts the playback at a random position in the playlist or album.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "repeat": {
          "name": "Repeat",
          "description": "Set repeat mode for playback.",
          "example": "track",
          "required": false,
          "default": "off",
          "selector": {
            "select": {
              "options": [
                "track",
                "context",
                "off"
              ]
            }
          }
        },
        "shuffle": {
          "name": "Shuffle",
          "description": "Set shuffle mode for playback.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "offset": {
          "name": "Offset",
          "description": "Set offset mode for playback. 0 is the first song.",
          "example": 1,
          "required": false,
          "default": 0,
          "selector": {
            "number": {
              "mode": "box",
              "step": 1,
              "min": 0,
              "max": 999999
            }
          }
        },
        "start_volume": {
          "name": "Start Volume",
          "description": "Set the volume for playback in percentage.",
          "example": 50,
          "required": false,
          "selector": {
            "number": {
              "mode": "slider",
              "step": 1,
              "min": 0,
              "max": 100
            }
          }
        },
        "ignore_fully_played": {
          "name": "Ignore Fully Played",
          "description": "Set to ignore or not already played episodes in a podcast playlist",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    }
  },
  "alarmo": {
    "enable_user": {
      "name": "Enable User",
      "description": "Allow a user to arm/disarm alarmo.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Name of the user to enable.",
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "disable_user": {
      "name": "Disable User",
      "description": "Block a user from arming/disarming alarmo.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Name of the user to disable.",
          "example": "Frank",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "arm": {
      "name": "Arm",
      "description": "Arm an Alarmo entity with custom settings.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "Name of entity that should be armed.",
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "Code to arm the alarm with.",
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "mode": {
          "name": "Mode",
          "description": "Mode to arm the alarm in.",
          "example": "away",
          "required": false,
          "default": "away",
          "selector": {
            "select": {
              "options": [
                "away",
                "night",
                "home",
                "vacation",
                "custom"
              ]
            }
          }
        },
        "skip_delay": {
          "name": "Skip Delay",
          "description": "Skip the exit delay.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "force": {
          "name": "Force",
          "description": "Automatically bypass all sensors that prevent the arming operation.",
          "example": true,
          "required": false,
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "disarm": {
      "name": "Disarm",
      "description": "Disarm an Alarmo entity.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "Name of entity that should be disarmed.",
          "example": "alarm_control_panel.alarm",
          "required": true,
          "selector": {
            "entity": {
              "integration": "alarmo",
              "domain": "alarm_control_panel"
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "Code to disarm the alarm with.",
          "example": "1234",
          "required": false,
          "selector": {
            "text": null
          }
        }
      }
    }
  }
}