//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.43.0.0
//   At: 2023-10-31T23:52:31.9406452+00:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<EntityControllerEntities>();
        serviceCollection.AddTransient<FanEntities>();
        serviceCollection.AddTransient<GroupEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<ProximityEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TimerEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<VacuumEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<TextEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<TodoEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AdguardServices>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AlarmoServices>();
        serviceCollection.AddTransient<AlexaMediaServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<EntityControllerServices>();
        serviceCollection.AddTransient<EsphomeServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<FullyKioskServices>();
        serviceCollection.AddTransient<GoogleServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<IcloudServices>();
        serviceCollection.AddTransient<Icloud3Services>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LawnMowerServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LocaltuyaServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MatterServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<OctopusEnergyServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<ShoppingListServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SpotcastServices>();
        serviceCollection.AddTransient<SqueezeboxServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimeServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TodoServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UnifiServices>();
        serviceCollection.AddTransient<UnifiprotectServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WasteCollectionScheduleServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<YeelightServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    AlarmControlPanelEntities AlarmControlPanel { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    EntityControllerEntities EntityController { get; }

    FanEntities Fan { get; }

    GroupEntities Group { get; }

    InputBooleanEntities InputBoolean { get; }

    InputButtonEntities InputButton { get; }

    InputDatetimeEntities InputDatetime { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    InputTextEntities InputText { get; }

    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    ProximityEntities Proximity { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TimerEntities Timer { get; }

    UpdateEntities Update { get; }

    ZoneEntities Zone { get; }

    VacuumEntities Vacuum { get; }

    WeatherEntities Weather { get; }

    TextEntities Text { get; }

    EventEntities Event { get; }

    TodoEntities Todo { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public EntityControllerEntities EntityController => new(_haContext);
    public FanEntities Fan => new(_haContext);
    public GroupEntities Group => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public ProximityEntities Proximity => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TimerEntities Timer => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public VacuumEntities Vacuum => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public TextEntities Text => new(_haContext);
    public EventEntities Event => new(_haContext);
    public TodoEntities Todo => new(_haContext);
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm</summary>
    public AlarmControlPanelEntity Alarm => new(_haContext, "alarm_control_panel.alarm");
    ///<summary>Alarmo</summary>
    public AlarmControlPanelEntity Alarmo => new(_haContext, "alarm_control_panel.alarmo");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Andy is home</summary>
    public AutomationEntity AndyIsHome => new(_haContext, "automation.andy_is_home");
    ///<summary>Patio door is open</summary>
    public AutomationEntity BackDoorIsOpen => new(_haContext, "automation.back_door_is_open");
    ///<summary>Out of bed</summary>
    public AutomationEntity BedSensorSetsInBedToOff => new(_haContext, "automation.bed_sensor_sets_in_bed_to_off");
    ///<summary>In bed</summary>
    public AutomationEntity BedSensorSetsInBedToOn => new(_haContext, "automation.bed_sensor_sets_in_bed_to_on");
    ///<summary>Bedroom Lights Off Reset Mode</summary>
    public AutomationEntity BedroomLightsOffResetMode => new(_haContext, "automation.bedroom_lights_off_reset_mode");
    ///<summary>Bedroom show screen off </summary>
    public AutomationEntity BedroomShowScreenOff => new(_haContext, "automation.bedroom_show_screen_off");
    ///<summary>Bedroom show screen on</summary>
    public AutomationEntity BedroomShowScreenOn => new(_haContext, "automation.bedroom_show_screen_on");
    ///<summary>Carbon Monoxide Detected</summary>
    public AutomationEntity CarbonMonoxideDetected => new(_haContext, "automation.carbon_monoxide_detected");
    ///<summary>Cat feeding time</summary>
    public AutomationEntity CatFeedingTime => new(_haContext, "automation.cat_feeding_time");
    ///<summary>Claire is home</summary>
    public AutomationEntity ClaireIsHome => new(_haContext, "automation.claire_is_home");
    ///<summary>Conversation agent agenda notification</summary>
    public AutomationEntity ConversationAgentAgendaNotification => new(_haContext, "automation.conversation_agent_agenda_notification");
    ///<summary>Door open</summary>
    public AutomationEntity DoorOpen => new(_haContext, "automation.door_open");
    ///<summary>Doorbell Notifications</summary>
    public AutomationEntity DoorbellNotifications => new(_haContext, "automation.doorbell_notifications");
    ///<summary>Feed Cats</summary>
    public AutomationEntity FeedCats => new(_haContext, "automation.feed_cats");
    ///<summary>Guest Room Remote Actions</summary>
    public AutomationEntity GuestRoomRemoteActions => new(_haContext, "automation.guest_room_remote_actions");
    ///<summary>Hallway Remote Actions</summary>
    public AutomationEntity HallwayRemoteActions => new(_haContext, "automation.hallway_remote_actions");
    ///<summary>Patio person motion event snapshot - Andy iPhone</summary>
    public AutomationEntity KitchenMotionEventSnapshot => new(_haContext, "automation.kitchen_motion_event_snapshot");
    ///<summary>Loft hatch closed</summary>
    public AutomationEntity LoftHatchClosed => new(_haContext, "automation.loft_hatch_closed");
    ///<summary>Loft hatch open</summary>
    public AutomationEntity LoftHatchOpen => new(_haContext, "automation.loft_hatch_open");
    ///<summary>Lounge Remote States</summary>
    public AutomationEntity LoungeRemoteStates => new(_haContext, "automation.lounge_remote_states");
    ///<summary>Lounge Scene Watch Television</summary>
    public AutomationEntity LoungeSceneWatchTelevision2 => new(_haContext, "automation.lounge_scene_watch_television_2");
    ///<summary>Low battery level detection &amp; notification for all battery sensors</summary>
    public AutomationEntity LowBatteryLevelDetectionNotificationForAllBatterySensors => new(_haContext, "automation.low_battery_level_detection_notification_for_all_battery_sensors");
    ///<summary>NSPanel Configuration</summary>
    public AutomationEntity NspanelConfiguration => new(_haContext, "automation.nspanel_configuration");
    ///<summary>Cellar Door Motion Detected</summary>
    public AutomationEntity PatioMotionDetected => new(_haContext, "automation.patio_motion_detected");
    ///<summary>Patio person motion event snapshot - Claire iPhone</summary>
    public AutomationEntity PatioPersonMotionEventSnapshotClaireIphone => new(_haContext, "automation.patio_person_motion_event_snapshot_claire_iphone");
    ///<summary>Person in the garden</summary>
    public AutomationEntity PersonInTheGarden => new(_haContext, "automation.person_in_the_garden");
    ///<summary>Replace Carbon Monoxide Batteries</summary>
    public AutomationEntity ReplaceCarbonMonoxideBatteries => new(_haContext, "automation.replace_carbon_monoxide_batteries");
    ///<summary>Send notification when alarm is Armed in Away mode</summary>
    public AutomationEntity SendNotificationWhenAlarmIsArmedInAwayMode => new(_haContext, "automation.send_notification_when_alarm_is_armed_in_away_mode");
    ///<summary>Send notification when alarm is Armed in Home mode</summary>
    public AutomationEntity SendNotificationWhenAlarmIsArmedInHomeMode => new(_haContext, "automation.send_notification_when_alarm_is_armed_in_home_mode");
    ///<summary>Send notification when alarm is arming</summary>
    public AutomationEntity SendNotificationWhenAlarmIsArming => new(_haContext, "automation.send_notification_when_alarm_is_arming");
    ///<summary>Turn Off Ex Machina lights when alarm disarmed</summary>
    public AutomationEntity SendNotificationWhenAlarmIsDisarmed => new(_haContext, "automation.send_notification_when_alarm_is_disarmed");
    ///<summary>Send notification when alarm is Disarmed</summary>
    public AutomationEntity SendNotificationWhenAlarmIsDisarmed2 => new(_haContext, "automation.send_notification_when_alarm_is_disarmed_2");
    ///<summary>Send notification when alarm is pending</summary>
    public AutomationEntity SendNotificationWhenAlarmIsPending => new(_haContext, "automation.send_notification_when_alarm_is_pending");
    ///<summary>Send notification when alarm triggered</summary>
    public AutomationEntity SendNotificationWhenAlarmTriggered2 => new(_haContext, "automation.send_notification_when_alarm_triggered_2");
    ///<summary>Send snapshot when person is in the garden - Andy iPhone</summary>
    public AutomationEntity SendSnapshotWhenPersonIsInTheGardenAndyIphone => new(_haContext, "automation.send_snapshot_when_person_is_in_the_garden_andy_iphone");
    ///<summary>Send snapshot when person is in the garden - Claire iPhone</summary>
    public AutomationEntity SendSnapshotWhenPersonIsInTheGardenClaireIphone => new(_haContext, "automation.send_snapshot_when_person_is_in_the_garden_claire_iphone");
    ///<summary>Set cat feeder varaibles on restart</summary>
    public AutomationEntity SetCatFeederVaraiblesOnRestart => new(_haContext, "automation.set_cat_feeder_varaibles_on_restart");
    ///<summary>Shower timer finished</summary>
    public AutomationEntity ShowerTimerFinished => new(_haContext, "automation.shower_timer_finished");
    ///<summary>Shower timer start</summary>
    public AutomationEntity ShowerTimerStart => new(_haContext, "automation.shower_timer_start");
    ///<summary>Snug Lights Off Reset Mode</summary>
    public AutomationEntity SnugLightsOffResetMode => new(_haContext, "automation.snug_lights_off_reset_mode");
    ///<summary>Snug Scene Normal</summary>
    public AutomationEntity SnugSceneNormal => new(_haContext, "automation.snug_scene_normal");
    ///<summary>Snug Scene Watch Movie</summary>
    public AutomationEntity SnugSceneWatchMovie => new(_haContext, "automation.snug_scene_watch_movie");
    ///<summary>Snug Switch Actions</summary>
    public AutomationEntity SnugSwitchActions => new(_haContext, "automation.snug_switch_actions");
    ///<summary>Sump Alarm Triggered</summary>
    public AutomationEntity SumpAlarmTriggered => new(_haContext, "automation.sump_alarm_triggered");
    ///<summary>Trigger alarm while armed away</summary>
    public AutomationEntity TriggerAlarmWhileArmedAway => new(_haContext, "automation.trigger_alarm_while_armed_away");
    ///<summary>Turn On Ex Machina lights when alarm triggered</summary>
    public AutomationEntity TurnOnExMachinaLightsWhenAlarmTriggered => new(_haContext, "automation.turn_on_ex_machina_lights_when_alarm_triggered");
    ///<summary>Turn Off Porch Light at 11pm</summary>
    public AutomationEntity TurnPorchLightOfAt11pm => new(_haContext, "automation.turn_porch_light_of_at_11pm");
    ///<summary>Turn On Porch Light when Sun is set</summary>
    public AutomationEntity TurnPorchLightOnWhenSunIsSet => new(_haContext, "automation.turn_porch_light_on_when_sun_is_set");
    ///<summary>Turn the store light off</summary>
    public AutomationEntity TurnTheStoreLightOff => new(_haContext, "automation.turn_the_store_light_off");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Andy In bed</summary>
    public BinarySensorEntity AndyInBed => new(_haContext, "binary_sensor.andy_in_bed");
    ///<summary>At Home</summary>
    public BinarySensorEntity AtHome => new(_haContext, "binary_sensor.at_home");
    ///<summary>Basement Hall Camera Detections: Motion</summary>
    public BinarySensorEntity BasementHallCameraDetectionsMotion => new(_haContext, "binary_sensor.basement_hall_camera_detections_motion");
    ///<summary>Basement Hall Camera Hdr Mode</summary>
    public BinarySensorEntity BasementHallCameraHdrMode => new(_haContext, "binary_sensor.basement_hall_camera_hdr_mode");
    ///<summary>Basement Hall Camera Is Dark</summary>
    public BinarySensorEntity BasementHallCameraIsDark => new(_haContext, "binary_sensor.basement_hall_camera_is_dark");
    ///<summary>Basement Hall Camera Motion</summary>
    public BinarySensorEntity BasementHallCameraMotion => new(_haContext, "binary_sensor.basement_hall_camera_motion");
    ///<summary>Basement Hall Camera Overlay: Show Bitrate</summary>
    public BinarySensorEntity BasementHallCameraOverlayShowBitrate => new(_haContext, "binary_sensor.basement_hall_camera_overlay_show_bitrate");
    ///<summary>Basement Hall Camera Overlay: Show Date</summary>
    public BinarySensorEntity BasementHallCameraOverlayShowDate => new(_haContext, "binary_sensor.basement_hall_camera_overlay_show_date");
    ///<summary>Basement Hall Camera Overlay: Show Logo</summary>
    public BinarySensorEntity BasementHallCameraOverlayShowLogo => new(_haContext, "binary_sensor.basement_hall_camera_overlay_show_logo");
    ///<summary>Basement Hall Camera Overlay: Show Name</summary>
    public BinarySensorEntity BasementHallCameraOverlayShowName => new(_haContext, "binary_sensor.basement_hall_camera_overlay_show_name");
    ///<summary>Basement Hall Camera Status Light On</summary>
    public BinarySensorEntity BasementHallCameraStatusLightOn => new(_haContext, "binary_sensor.basement_hall_camera_status_light_on");
    ///<summary>Basment Hall Motion</summary>
    public BinarySensorEntity BasementHallMotion => new(_haContext, "binary_sensor.basement_hall_motion");
    ///<summary>Basement Hall Motion Sensors</summary>
    public BinarySensorEntity BasementHallMotionSensors => new(_haContext, "binary_sensor.basement_hall_motion_sensors");
    ///<summary>Basement Stairs Motion</summary>
    public BinarySensorEntity BasementStairsMotion => new(_haContext, "binary_sensor.basement_stairs_motion");
    ///<summary>Basement Stairs Motion Battery</summary>
    public BinarySensorEntity BasementStairsMotionBatteryLow => new(_haContext, "binary_sensor.basement_stairs_motion_battery_low");
    ///<summary>Basement Stairs Motion Konnected</summary>
    public BinarySensorEntity BasementStairsMotionKonnected => new(_haContext, "binary_sensor.basement_stairs_motion_konnected");
    ///<summary>Bathroom Door</summary>
    public BinarySensorEntity BathroomDoor => new(_haContext, "binary_sensor.bathroom_door");
    ///<summary>Bathroom Door Battery</summary>
    public BinarySensorEntity BathroomDoorBatteryLow => new(_haContext, "binary_sensor.bathroom_door_battery_low");
    ///<summary>Bathroom Fan overheating</summary>
    public BinarySensorEntity BathroomFanOverheating => new(_haContext, "binary_sensor.bathroom_fan_overheating");
    ///<summary>Bathroom Fan overpowering</summary>
    public BinarySensorEntity BathroomFanOverpowering => new(_haContext, "binary_sensor.bathroom_fan_overpowering");
    ///<summary>Bathroom Fan overvoltage</summary>
    public BinarySensorEntity BathroomFanOvervoltage => new(_haContext, "binary_sensor.bathroom_fan_overvoltage");
    ///<summary>Bathroom Motion</summary>
    public BinarySensorEntity BathroomMotion => new(_haContext, "binary_sensor.bathroom_motion");
    ///<summary>Bathroom Occupancy</summary>
    public BinarySensorEntity BathroomWasp => new(_haContext, "binary_sensor.bathroom_wasp");
    ///<summary>Bedroom Motion</summary>
    public BinarySensorEntity BedroomMotion => new(_haContext, "binary_sensor.bedroom_motion");
    ///<summary>shellypro4pm-30c6f784a4e0 input_3 input</summary>
    public BinarySensorEntity BreweryInput => new(_haContext, "binary_sensor.brewery_input");
    ///<summary>Brewery overheating</summary>
    public BinarySensorEntity BreweryOverheating => new(_haContext, "binary_sensor.brewery_overheating");
    ///<summary>Brewery overpowering</summary>
    public BinarySensorEntity BreweryOverpowering => new(_haContext, "binary_sensor.brewery_overpowering");
    ///<summary>Brewery overvoltage</summary>
    public BinarySensorEntity BreweryOvervoltage => new(_haContext, "binary_sensor.brewery_overvoltage");
    ///<summary>Cellar Door</summary>
    public BinarySensorEntity CellarDoor => new(_haContext, "binary_sensor.cellar_door");
    ///<summary>Claire In bed</summary>
    public BinarySensorEntity ClaireInBed => new(_haContext, "binary_sensor.claire_in_bed");
    ///<summary>Claire’s iPhone Focus</summary>
    public BinarySensorEntity ClairesIphoneFocus => new(_haContext, "binary_sensor.claires_iphone_focus");
    ///<summary>Coffee Machine</summary>
    public BinarySensorEntity CoffeeMachineUpdateAvailable2 => new(_haContext, "binary_sensor.coffee_machine_update_available_2");
    ///<summary>shellypro4pm-30c6f784a4e0 input_0 input</summary>
    public BinarySensorEntity ColdFrameInput => new(_haContext, "binary_sensor.cold_frame_input");
    ///<summary>Cold Frame overheating</summary>
    public BinarySensorEntity ColdFrameOverheating => new(_haContext, "binary_sensor.cold_frame_overheating");
    ///<summary>Cold Frame overpowering</summary>
    public BinarySensorEntity ColdFrameOverpowering => new(_haContext, "binary_sensor.cold_frame_overpowering");
    ///<summary>Cold Frame overvoltage</summary>
    public BinarySensorEntity ColdFrameOvervoltage => new(_haContext, "binary_sensor.cold_frame_overvoltage");
    ///<summary>Decking Socket Input</summary>
    public BinarySensorEntity DeckingSocketInput => new(_haContext, "binary_sensor.decking_socket_input");
    ///<summary>Decking Socket overheating</summary>
    public BinarySensorEntity DeckingSocketOverheating => new(_haContext, "binary_sensor.decking_socket_overheating");
    ///<summary>Decking Socket overpowering</summary>
    public BinarySensorEntity DeckingSocketOverpowering => new(_haContext, "binary_sensor.decking_socket_overpowering");
    ///<summary>Decking Socket overvoltage</summary>
    public BinarySensorEntity DeckingSocketOvervoltage => new(_haContext, "binary_sensor.decking_socket_overvoltage");
    ///<summary>shellypro4pm-30c6f784a4e0 input_1 input</summary>
    public BinarySensorEntity DeckingWallInput => new(_haContext, "binary_sensor.decking_wall_input");
    ///<summary>Decking Wall overheating</summary>
    public BinarySensorEntity DeckingWallOverheating => new(_haContext, "binary_sensor.decking_wall_overheating");
    ///<summary>Decking Wall overpowering</summary>
    public BinarySensorEntity DeckingWallOverpowering => new(_haContext, "binary_sensor.decking_wall_overpowering");
    ///<summary>Decking Wall overvoltage</summary>
    public BinarySensorEntity DeckingWallOvervoltage => new(_haContext, "binary_sensor.decking_wall_overvoltage");
    ///<summary>Dining Room Motion</summary>
    public BinarySensorEntity DiningRoomMotion => new(_haContext, "binary_sensor.dining_room_motion");
    ///<summary>Display Cabinet Light</summary>
    public BinarySensorEntity DisplayCabinetLightUpdateAvailable => new(_haContext, "binary_sensor.display_cabinet_light_update_available");
    ///<summary>Doorbell Button</summary>
    public BinarySensorEntity DoorbellButton => new(_haContext, "binary_sensor.doorbell_button");
    ///<summary>Drawing Room Motion</summary>
    public BinarySensorEntity DrawingRoomMotion => new(_haContext, "binary_sensor.drawing_room_motion");
    ///<summary>Dressing Room Motion</summary>
    public BinarySensorEntity DressingRoomMotion => new(_haContext, "binary_sensor.dressing_room_motion");
    ///<summary>Dressing Room overheating</summary>
    public BinarySensorEntity DressingRoomOverheating => new(_haContext, "binary_sensor.dressing_room_overheating");
    ///<summary>Dressing Room overpowering</summary>
    public BinarySensorEntity DressingRoomOverpowering => new(_haContext, "binary_sensor.dressing_room_overpowering");
    ///<summary>Dressing Room overvoltage</summary>
    public BinarySensorEntity DressingRoomOvervoltage => new(_haContext, "binary_sensor.dressing_room_overvoltage");
    ///<summary>Electric Cabinet Door Battery</summary>
    public BinarySensorEntity ElectricCabinetDoorBatteryLow => new(_haContext, "binary_sensor.electric_cabinet_door_battery_low");
    ///<summary>Electric Cabinet Door Door</summary>
    public BinarySensorEntity ElectricCabinetDoorContact => new(_haContext, "binary_sensor.electric_cabinet_door_contact");
    ///<summary>ESPresense Bedroom</summary>
    public BinarySensorEntity EspresenseBedroom => new(_haContext, "binary_sensor.espresense_bedroom");
    ///<summary>ESPresense DrawingRoom</summary>
    public BinarySensorEntity EspresenseDrawingroom => new(_haContext, "binary_sensor.espresense_drawingroom");
    ///<summary>ESPresense Kitchen</summary>
    public BinarySensorEntity EspresenseKitchen => new(_haContext, "binary_sensor.espresense_kitchen");
    ///<summary>ESPresense Lounge</summary>
    public BinarySensorEntity EspresenseLounge => new(_haContext, "binary_sensor.espresense_lounge");
    ///<summary>ESPresense Snug</summary>
    public BinarySensorEntity EspresenseSnug => new(_haContext, "binary_sensor.espresense_snug");
    ///<summary>studio-bluetooth-proxy</summary>
    public BinarySensorEntity EspresenseStudio => new(_haContext, "binary_sensor.espresense_studio");
    ///<summary>Fence Lights Input</summary>
    public BinarySensorEntity FenceLightsInput => new(_haContext, "binary_sensor.fence_lights_input");
    ///<summary>Fence Lights overheating</summary>
    public BinarySensorEntity FenceLightsOverheating => new(_haContext, "binary_sensor.fence_lights_overheating");
    ///<summary>Fence Lights overpowering</summary>
    public BinarySensorEntity FenceLightsOverpowering => new(_haContext, "binary_sensor.fence_lights_overpowering");
    ///<summary>Fence Lights overvoltage</summary>
    public BinarySensorEntity FenceLightsOvervoltage => new(_haContext, "binary_sensor.fence_lights_overvoltage");
    ///<summary>Front Door Battery</summary>
    public BinarySensorEntity FrontDoorBatteryLow => new(_haContext, "binary_sensor.front_door_battery_low");
    ///<summary>Front Door Door</summary>
    public BinarySensorEntity FrontDoorContact => new(_haContext, "binary_sensor.front_door_contact");
    ///<summary>Garden Sockets Input</summary>
    public BinarySensorEntity GardenSocketsInput => new(_haContext, "binary_sensor.garden_sockets_input");
    ///<summary>Garden Sockets overheating</summary>
    public BinarySensorEntity GardenSocketsOverheating => new(_haContext, "binary_sensor.garden_sockets_overheating");
    ///<summary>Garden Sockets overpowering</summary>
    public BinarySensorEntity GardenSocketsOverpowering => new(_haContext, "binary_sensor.garden_sockets_overpowering");
    ///<summary>Garden Sockets overvoltage</summary>
    public BinarySensorEntity GardenSocketsOvervoltage => new(_haContext, "binary_sensor.garden_sockets_overvoltage");
    ///<summary>Gate Socket Input</summary>
    public BinarySensorEntity GateSocketInput => new(_haContext, "binary_sensor.gate_socket_input");
    ///<summary>Gate Socket overheating</summary>
    public BinarySensorEntity GateSocketOverheating => new(_haContext, "binary_sensor.gate_socket_overheating");
    ///<summary>Gate Socket overpowering</summary>
    public BinarySensorEntity GateSocketOverpowering => new(_haContext, "binary_sensor.gate_socket_overpowering");
    ///<summary>Gate Socket overvoltage</summary>
    public BinarySensorEntity GateSocketOvervoltage => new(_haContext, "binary_sensor.gate_socket_overvoltage");
    ///<summary>Guest Room Bedside Lamp</summary>
    public BinarySensorEntity GuestRoomBedsideLampUpdateAvailable => new(_haContext, "binary_sensor.guest_room_bedside_lamp_update_available");
    ///<summary>Guest Room Motion</summary>
    public BinarySensorEntity GuestRoomMotion => new(_haContext, "binary_sensor.guest_room_motion");
    ///<summary>Guest Room overheating</summary>
    public BinarySensorEntity GuestRoomOverheating => new(_haContext, "binary_sensor.guest_room_overheating");
    ///<summary>Guest Room overpowering</summary>
    public BinarySensorEntity GuestRoomOverpowering => new(_haContext, "binary_sensor.guest_room_overpowering");
    ///<summary>Guest Room overvoltage</summary>
    public BinarySensorEntity GuestRoomOvervoltage => new(_haContext, "binary_sensor.guest_room_overvoltage");
    ///<summary>Guest Room Remote</summary>
    public BinarySensorEntity GuestRoomRemoteUpdateAvailable => new(_haContext, "binary_sensor.guest_room_remote_update_available");
    ///<summary>Guest Sofa Occupancy</summary>
    public BinarySensorEntity GuestSofaOccupancy => new(_haContext, "binary_sensor.guest_sofa_occupancy");
    ///<summary>Hallway Camera Detections: Motion</summary>
    public BinarySensorEntity HallwayCameraDetectionsMotion => new(_haContext, "binary_sensor.hallway_camera_detections_motion");
    ///<summary>Hallway Camera Hdr Mode</summary>
    public BinarySensorEntity HallwayCameraHdrMode => new(_haContext, "binary_sensor.hallway_camera_hdr_mode");
    ///<summary>Hallway Camera Is Dark</summary>
    public BinarySensorEntity HallwayCameraIsDark => new(_haContext, "binary_sensor.hallway_camera_is_dark");
    ///<summary>Hallway Camera Motion</summary>
    public BinarySensorEntity HallwayCameraMotion => new(_haContext, "binary_sensor.hallway_camera_motion");
    ///<summary>Hallway Camera Overlay: Show Bitrate</summary>
    public BinarySensorEntity HallwayCameraOverlayShowBitrate => new(_haContext, "binary_sensor.hallway_camera_overlay_show_bitrate");
    ///<summary>Hallway Camera Overlay: Show Date</summary>
    public BinarySensorEntity HallwayCameraOverlayShowDate => new(_haContext, "binary_sensor.hallway_camera_overlay_show_date");
    ///<summary>Hallway Camera Overlay: Show Logo</summary>
    public BinarySensorEntity HallwayCameraOverlayShowLogo => new(_haContext, "binary_sensor.hallway_camera_overlay_show_logo");
    ///<summary>Hallway Camera Overlay: Show Name</summary>
    public BinarySensorEntity HallwayCameraOverlayShowName => new(_haContext, "binary_sensor.hallway_camera_overlay_show_name");
    ///<summary>Hallway Camera Status Light On</summary>
    public BinarySensorEntity HallwayCameraStatusLightOn => new(_haContext, "binary_sensor.hallway_camera_status_light_on");
    ///<summary>Hallway Remote</summary>
    public BinarySensorEntity HallwayRemoteUpdateAvailable => new(_haContext, "binary_sensor.hallway_remote_update_available");
    ///<summary>Hallway Tablet Device admin</summary>
    public BinarySensorEntity HallwayTabletDeviceAdmin => new(_haContext, "binary_sensor.hallway_tablet_device_admin");
    ///<summary>Hallway Tablet Kiosk mode</summary>
    public BinarySensorEntity HallwayTabletKioskMode => new(_haContext, "binary_sensor.hallway_tablet_kiosk_mode");
    ///<summary>Hallway Tablet Plugged in</summary>
    public BinarySensorEntity HallwayTabletPluggedIn => new(_haContext, "binary_sensor.hallway_tablet_plugged_in");
    ///<summary>homeassistant</summary>
    public BinarySensorEntity Homeassistant => new(_haContext, "binary_sensor.homeassistant");
    ///<summary>In Bed</summary>
    public BinarySensorEntity InBed => new(_haContext, "binary_sensor.in_bed");
    ///<summary>Kitchen Camera Audio Object Detected</summary>
    public BinarySensorEntity KitchenCameraAudioObjectDetected => new(_haContext, "binary_sensor.kitchen_camera_audio_object_detected");
    ///<summary>Kitchen Camera Co Alarm Detected</summary>
    public BinarySensorEntity KitchenCameraCoAlarmDetected => new(_haContext, "binary_sensor.kitchen_camera_co_alarm_detected");
    ///<summary>Kitchen Camera Detections: Motion</summary>
    public BinarySensorEntity KitchenCameraDetectionsMotion => new(_haContext, "binary_sensor.kitchen_camera_detections_motion");
    ///<summary>Kitchen Camera Detections: Person</summary>
    public BinarySensorEntity KitchenCameraDetectionsPerson => new(_haContext, "binary_sensor.kitchen_camera_detections_person");
    ///<summary>Kitchen Camera Detections: Smoke/Co</summary>
    public BinarySensorEntity KitchenCameraDetectionsSmokeCo => new(_haContext, "binary_sensor.kitchen_camera_detections_smoke_co");
    ///<summary>Kitchen Camera Detections: Vehicle</summary>
    public BinarySensorEntity KitchenCameraDetectionsVehicle => new(_haContext, "binary_sensor.kitchen_camera_detections_vehicle");
    ///<summary>Kitchen Camera Hdr Mode</summary>
    public BinarySensorEntity KitchenCameraHdrMode => new(_haContext, "binary_sensor.kitchen_camera_hdr_mode");
    ///<summary>Kitchen Camera Is Dark</summary>
    public BinarySensorEntity KitchenCameraIsDark => new(_haContext, "binary_sensor.kitchen_camera_is_dark");
    ///<summary>Kitchen Camera Motion</summary>
    public BinarySensorEntity KitchenCameraMotion => new(_haContext, "binary_sensor.kitchen_camera_motion");
    ///<summary>Kitchen Camera Object Detected</summary>
    public BinarySensorEntity KitchenCameraObjectDetected => new(_haContext, "binary_sensor.kitchen_camera_object_detected");
    ///<summary>Kitchen Camera Overlay: Show Bitrate</summary>
    public BinarySensorEntity KitchenCameraOverlayShowBitrate => new(_haContext, "binary_sensor.kitchen_camera_overlay_show_bitrate");
    ///<summary>Kitchen Camera Overlay: Show Date</summary>
    public BinarySensorEntity KitchenCameraOverlayShowDate => new(_haContext, "binary_sensor.kitchen_camera_overlay_show_date");
    ///<summary>Kitchen Camera Overlay: Show Logo</summary>
    public BinarySensorEntity KitchenCameraOverlayShowLogo => new(_haContext, "binary_sensor.kitchen_camera_overlay_show_logo");
    ///<summary>Kitchen Camera Overlay: Show Name</summary>
    public BinarySensorEntity KitchenCameraOverlayShowName => new(_haContext, "binary_sensor.kitchen_camera_overlay_show_name");
    ///<summary>Kitchen Camera Person Detected</summary>
    public BinarySensorEntity KitchenCameraPersonDetected => new(_haContext, "binary_sensor.kitchen_camera_person_detected");
    ///<summary>Kitchen Camera Smoke Alarm Detected</summary>
    public BinarySensorEntity KitchenCameraSmokeAlarmDetected => new(_haContext, "binary_sensor.kitchen_camera_smoke_alarm_detected");
    ///<summary>Kitchen Camera Status Light On</summary>
    public BinarySensorEntity KitchenCameraStatusLightOn => new(_haContext, "binary_sensor.kitchen_camera_status_light_on");
    ///<summary>Kitchen Camera System Sounds</summary>
    public BinarySensorEntity KitchenCameraSystemSounds => new(_haContext, "binary_sensor.kitchen_camera_system_sounds");
    ///<summary>Kitchen Camera Vehicle Detected</summary>
    public BinarySensorEntity KitchenCameraVehicleDetected => new(_haContext, "binary_sensor.kitchen_camera_vehicle_detected");
    ///<summary>Kitchen Motion</summary>
    public BinarySensorEntity KitchenMotion => new(_haContext, "binary_sensor.kitchen_motion");
    ///<summary>Kitchen Motion Sensors</summary>
    public BinarySensorEntity KitchenMotionSensors => new(_haContext, "binary_sensor.kitchen_motion_sensors");
    ///<summary>Landing Motion</summary>
    public BinarySensorEntity LandingMotion => new(_haContext, "binary_sensor.landing_motion");
    ///<summary>Landing overheating</summary>
    public BinarySensorEntity LandingOverheating => new(_haContext, "binary_sensor.landing_overheating");
    ///<summary>Landing overpowering</summary>
    public BinarySensorEntity LandingOverpowering => new(_haContext, "binary_sensor.landing_overpowering");
    ///<summary>Landing overvoltage</summary>
    public BinarySensorEntity LandingOvervoltage => new(_haContext, "binary_sensor.landing_overvoltage");
    ///<summary>Loft Hatch battery low</summary>
    public BinarySensorEntity LoftHatchBatteryLow => new(_haContext, "binary_sensor.loft_hatch_battery_low");
    ///<summary>Loft Hatch contact</summary>
    public BinarySensorEntity LoftHatchContact => new(_haContext, "binary_sensor.loft_hatch_contact");
    ///<summary>Lounge Motion</summary>
    public BinarySensorEntity LoungeMotion => new(_haContext, "binary_sensor.lounge_motion");
    ///<summary>Lounge Occupancy</summary>
    public BinarySensorEntity LoungeOccupancy => new(_haContext, "binary_sensor.lounge_occupancy");
    ///<summary>Lounge Remote</summary>
    public BinarySensorEntity LoungeRemoteUpdateAvailable => new(_haContext, "binary_sensor.lounge_remote_update_available");
    ///<summary>Main Sofa Occupancy</summary>
    public BinarySensorEntity MainSofaOccupancy => new(_haContext, "binary_sensor.main_sofa_occupancy");
    ///<summary>nspanel Left Button</summary>
    public BinarySensorEntity NspanelLeftButton => new(_haContext, "binary_sensor.nspanel_left_button");
    ///<summary>nspanel Right Button</summary>
    public BinarySensorEntity NspanelRightButton => new(_haContext, "binary_sensor.nspanel_right_button");
    ///<summary>Electricity 22J0181544 1610019557951 Off Peak</summary>
    public BinarySensorEntity OctopusEnergyElectricity22j01815441610019557951OffPeak => new(_haContext, "binary_sensor.octopus_energy_electricity_22j0181544_1610019557951_off_peak");
    ///<summary>Octopus Energy Saving Session</summary>
    public BinarySensorEntity OctopusEnergySavingSessions => new(_haContext, "binary_sensor.octopus_energy_saving_sessions");
    ///<summary>Patio Camera Audio Object Detected</summary>
    public BinarySensorEntity PatioCameraAudioObjectDetected => new(_haContext, "binary_sensor.patio_camera_audio_object_detected");
    ///<summary>Patio Camera Co Alarm Detected</summary>
    public BinarySensorEntity PatioCameraCoAlarmDetected => new(_haContext, "binary_sensor.patio_camera_co_alarm_detected");
    ///<summary>Patio Camera Detections: Motion</summary>
    public BinarySensorEntity PatioCameraDetectionsMotion => new(_haContext, "binary_sensor.patio_camera_detections_motion");
    ///<summary>Patio Camera Detections: Person</summary>
    public BinarySensorEntity PatioCameraDetectionsPerson => new(_haContext, "binary_sensor.patio_camera_detections_person");
    ///<summary>Patio Camera Detections: Smoke/Co</summary>
    public BinarySensorEntity PatioCameraDetectionsSmokeCo => new(_haContext, "binary_sensor.patio_camera_detections_smoke_co");
    ///<summary>Patio Camera Detections: Vehicle</summary>
    public BinarySensorEntity PatioCameraDetectionsVehicle => new(_haContext, "binary_sensor.patio_camera_detections_vehicle");
    ///<summary>Patio Camera Hdr Mode</summary>
    public BinarySensorEntity PatioCameraHdrMode => new(_haContext, "binary_sensor.patio_camera_hdr_mode");
    ///<summary>Patio Camera High Fps</summary>
    public BinarySensorEntity PatioCameraHighFps => new(_haContext, "binary_sensor.patio_camera_high_fps");
    ///<summary>Patio Camera Is Dark</summary>
    public BinarySensorEntity PatioCameraIsDark => new(_haContext, "binary_sensor.patio_camera_is_dark");
    ///<summary>Patio Camera Motion</summary>
    public BinarySensorEntity PatioCameraMotion => new(_haContext, "binary_sensor.patio_camera_motion");
    ///<summary>Patio Camera Object Detected</summary>
    public BinarySensorEntity PatioCameraObjectDetected => new(_haContext, "binary_sensor.patio_camera_object_detected");
    ///<summary>Patio Camera Overlay: Show Bitrate</summary>
    public BinarySensorEntity PatioCameraOverlayShowBitrate => new(_haContext, "binary_sensor.patio_camera_overlay_show_bitrate");
    ///<summary>Patio Camera Overlay: Show Date</summary>
    public BinarySensorEntity PatioCameraOverlayShowDate => new(_haContext, "binary_sensor.patio_camera_overlay_show_date");
    ///<summary>Patio Camera Overlay: Show Logo</summary>
    public BinarySensorEntity PatioCameraOverlayShowLogo => new(_haContext, "binary_sensor.patio_camera_overlay_show_logo");
    ///<summary>Patio Camera Overlay: Show Name</summary>
    public BinarySensorEntity PatioCameraOverlayShowName => new(_haContext, "binary_sensor.patio_camera_overlay_show_name");
    ///<summary>Patio Camera Person Detected</summary>
    public BinarySensorEntity PatioCameraPersonDetected => new(_haContext, "binary_sensor.patio_camera_person_detected");
    ///<summary>Patio Camera Smoke Alarm Detected</summary>
    public BinarySensorEntity PatioCameraSmokeAlarmDetected => new(_haContext, "binary_sensor.patio_camera_smoke_alarm_detected");
    ///<summary>Patio Camera Vehicle Detected</summary>
    public BinarySensorEntity PatioCameraVehicleDetected => new(_haContext, "binary_sensor.patio_camera_vehicle_detected");
    ///<summary>Patio Door</summary>
    public BinarySensorEntity PatioDoor => new(_haContext, "binary_sensor.patio_door");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>Cat Feeder Feeding</summary>
    public BinarySensorEntity RojecoPetFeederFeeding => new(_haContext, "binary_sensor.rojeco_pet_feeder_feeding");
    ///<summary>Shed Camera Audio Object Detected</summary>
    public BinarySensorEntity ShedCameraAudioObjectDetected => new(_haContext, "binary_sensor.shed_camera_audio_object_detected");
    ///<summary>Shed Camera Co Alarm Detected</summary>
    public BinarySensorEntity ShedCameraCoAlarmDetected => new(_haContext, "binary_sensor.shed_camera_co_alarm_detected");
    ///<summary>Shed Camera Detections: Motion</summary>
    public BinarySensorEntity ShedCameraDetectionsMotion => new(_haContext, "binary_sensor.shed_camera_detections_motion");
    ///<summary>Shed Camera Detections: Person</summary>
    public BinarySensorEntity ShedCameraDetectionsPerson => new(_haContext, "binary_sensor.shed_camera_detections_person");
    ///<summary>Shed Camera Detections: Smoke/Co</summary>
    public BinarySensorEntity ShedCameraDetectionsSmokeCo => new(_haContext, "binary_sensor.shed_camera_detections_smoke_co");
    ///<summary>Shed Camera Detections: Vehicle</summary>
    public BinarySensorEntity ShedCameraDetectionsVehicle => new(_haContext, "binary_sensor.shed_camera_detections_vehicle");
    ///<summary>Shed Camera Hdr Mode</summary>
    public BinarySensorEntity ShedCameraHdrMode => new(_haContext, "binary_sensor.shed_camera_hdr_mode");
    ///<summary>Shed Camera Is Dark</summary>
    public BinarySensorEntity ShedCameraIsDark => new(_haContext, "binary_sensor.shed_camera_is_dark");
    ///<summary>Shed Camera Motion</summary>
    public BinarySensorEntity ShedCameraMotion => new(_haContext, "binary_sensor.shed_camera_motion");
    ///<summary>Shed Camera Object Detected</summary>
    public BinarySensorEntity ShedCameraObjectDetected => new(_haContext, "binary_sensor.shed_camera_object_detected");
    ///<summary>Shed Camera Overlay: Show Bitrate</summary>
    public BinarySensorEntity ShedCameraOverlayShowBitrate => new(_haContext, "binary_sensor.shed_camera_overlay_show_bitrate");
    ///<summary>Shed Camera Overlay: Show Date</summary>
    public BinarySensorEntity ShedCameraOverlayShowDate => new(_haContext, "binary_sensor.shed_camera_overlay_show_date");
    ///<summary>Shed Camera Overlay: Show Logo</summary>
    public BinarySensorEntity ShedCameraOverlayShowLogo => new(_haContext, "binary_sensor.shed_camera_overlay_show_logo");
    ///<summary>Shed Camera Overlay: Show Name</summary>
    public BinarySensorEntity ShedCameraOverlayShowName => new(_haContext, "binary_sensor.shed_camera_overlay_show_name");
    ///<summary>Shed Camera Person Detected</summary>
    public BinarySensorEntity ShedCameraPersonDetected => new(_haContext, "binary_sensor.shed_camera_person_detected");
    ///<summary>Shed Camera Smoke Alarm Detected</summary>
    public BinarySensorEntity ShedCameraSmokeAlarmDetected => new(_haContext, "binary_sensor.shed_camera_smoke_alarm_detected");
    ///<summary>Shed Camera Vehicle Detected</summary>
    public BinarySensorEntity ShedCameraVehicleDetected => new(_haContext, "binary_sensor.shed_camera_vehicle_detected");
    ///<summary>shellypro4pm-30c6f784a4e0 input_2 input</summary>
    public BinarySensorEntity ShedInput => new(_haContext, "binary_sensor.shed_input");
    ///<summary>Shed overheating</summary>
    public BinarySensorEntity ShedOverheating => new(_haContext, "binary_sensor.shed_overheating");
    ///<summary>Shed overpowering</summary>
    public BinarySensorEntity ShedOverpowering => new(_haContext, "binary_sensor.shed_overpowering");
    ///<summary>Shed overvoltage</summary>
    public BinarySensorEntity ShedOvervoltage => new(_haContext, "binary_sensor.shed_overvoltage");
    ///<summary>shellypro4pm-30c6f784a4e0 cloud</summary>
    public BinarySensorEntity ShellyShedLightsCloud => new(_haContext, "binary_sensor.shelly_shed_lights_cloud");
    ///<summary>Shelly Shed Sockets Cloud</summary>
    public BinarySensorEntity ShellyShedSocketsCloud => new(_haContext, "binary_sensor.shelly_shed_sockets_cloud");
    ///<summary>Shelly Upstairs Lights 1 Cloud</summary>
    public BinarySensorEntity ShellyUpstairsLights1Cloud => new(_haContext, "binary_sensor.shelly_upstairs_lights_1_cloud");
    ///<summary>Snug Led Strip</summary>
    public BinarySensorEntity SnugLedStripUpdateAvailable => new(_haContext, "binary_sensor.snug_led_strip_update_available");
    ///<summary>Snug Motion</summary>
    public BinarySensorEntity SnugMotion => new(_haContext, "binary_sensor.snug_motion");
    ///<summary>Snug Occupancy</summary>
    public BinarySensorEntity SnugOccupancy => new(_haContext, "binary_sensor.snug_occupancy");
    ///<summary>Sonoff Basement 1 Basement Hall Button</summary>
    public BinarySensorEntity SonoffBasement1BasementHallButton => new(_haContext, "binary_sensor.sonoff_basement_1_basement_hall_button");
    ///<summary>Sonoff Basement 1 Brewery Button</summary>
    public BinarySensorEntity SonoffBasement1BreweryButton => new(_haContext, "binary_sensor.sonoff_basement_1_brewery_button");
    ///<summary>Sonoff Basement 1 Status</summary>
    public BinarySensorEntity SonoffBasement1Status => new(_haContext, "binary_sensor.sonoff_basement_1_status");
    ///<summary>Sonoff Basement 1 Toilet Button</summary>
    public BinarySensorEntity SonoffBasement1ToiletButton => new(_haContext, "binary_sensor.sonoff_basement_1_toilet_button");
    ///<summary>Sonoff Basement 1 Utility Room Button</summary>
    public BinarySensorEntity SonoffBasement1UtilityRoomButton => new(_haContext, "binary_sensor.sonoff_basement_1_utility_room_button");
    ///<summary>Sonoff Basement 2 Dining Room Button</summary>
    public BinarySensorEntity SonoffBasement2DiningRoomButton => new(_haContext, "binary_sensor.sonoff_basement_2_dining_room_button");
    ///<summary>Sonoff Basement 2 Snug Button</summary>
    public BinarySensorEntity SonoffBasement2SnugButton => new(_haContext, "binary_sensor.sonoff_basement_2_snug_button");
    ///<summary>Sonoff Basement 2 Spare Ch3 Button</summary>
    public BinarySensorEntity SonoffBasement2SpareCh3Button => new(_haContext, "binary_sensor.sonoff_basement_2_spare_ch3_button");
    ///<summary>Sonoff Basement 2 Spare Ch4 Button</summary>
    public BinarySensorEntity SonoffBasement2SpareCh4Button => new(_haContext, "binary_sensor.sonoff_basement_2_spare_ch4_button");
    ///<summary>Sonoff Basement 2 Status</summary>
    public BinarySensorEntity SonoffBasement2Status => new(_haContext, "binary_sensor.sonoff_basement_2_status");
    ///<summary>Sonoff Bridge 1 Sonoff Bridge 1 Button1</summary>
    public BinarySensorEntity SonoffBridge1Button1 => new(_haContext, "binary_sensor.sonoff_bridge_1_button1");
    ///<summary>Sonoff Downstairs 1 Bookshelf Light Button</summary>
    public BinarySensorEntity SonoffDownstairs1BookshelfLightButton => new(_haContext, "binary_sensor.sonoff_downstairs_1_bookshelf_light_button");
    ///<summary>Sonoff Downstairs 1 Extractor Fan Button</summary>
    public BinarySensorEntity SonoffDownstairs1ExtractorFanButton => new(_haContext, "binary_sensor.sonoff_downstairs_1_extractor_fan_button");
    ///<summary>Sonoff Downstairs 1 Hallway Light Button</summary>
    public BinarySensorEntity SonoffDownstairs1HallwayLightButton => new(_haContext, "binary_sensor.sonoff_downstairs_1_hallway_light_button");
    ///<summary>Sonoff Downstairs 1 Lounge Light Button</summary>
    public BinarySensorEntity SonoffDownstairs1LoungeLightButton => new(_haContext, "binary_sensor.sonoff_downstairs_1_lounge_light_button");
    ///<summary>Sonoff Downstairs 1 Status</summary>
    public BinarySensorEntity SonoffDownstairs1Status => new(_haContext, "binary_sensor.sonoff_downstairs_1_status");
    ///<summary>Sonoff Downstairs 2 Cabinet Light Button</summary>
    public BinarySensorEntity SonoffDownstairs2CabinetLightButton => new(_haContext, "binary_sensor.sonoff_downstairs_2_cabinet_light_button");
    ///<summary>Sonoff Downstairs 2 Drawing Room Light Button</summary>
    public BinarySensorEntity SonoffDownstairs2DrawingRoomLightButton => new(_haContext, "binary_sensor.sonoff_downstairs_2_drawing_room_light_button");
    ///<summary>Sonoff Downstairs 2 Kitchen Light Button</summary>
    public BinarySensorEntity SonoffDownstairs2KitchenLightButton => new(_haContext, "binary_sensor.sonoff_downstairs_2_kitchen_light_button");
    ///<summary>Sonoff Downstairs 2 Spare Ch1 Button</summary>
    public BinarySensorEntity SonoffDownstairs2SpareCh1Button => new(_haContext, "binary_sensor.sonoff_downstairs_2_spare_ch1_button");
    ///<summary>Sonoff Downstairs 2 Status</summary>
    public BinarySensorEntity SonoffDownstairs2Status => new(_haContext, "binary_sensor.sonoff_downstairs_2_status");
    ///<summary>Sonoff Outside 1 Back Door Button</summary>
    public BinarySensorEntity SonoffOutside1BackDoorButton => new(_haContext, "binary_sensor.sonoff_outside_1_back_door_button");
    ///<summary>Sonoff Outside 1 Cellar Door Button</summary>
    public BinarySensorEntity SonoffOutside1CellarDoorButton => new(_haContext, "binary_sensor.sonoff_outside_1_cellar_door_button");
    ///<summary>Sonoff Outside 1 Patio Button</summary>
    public BinarySensorEntity SonoffOutside1PatioButton => new(_haContext, "binary_sensor.sonoff_outside_1_patio_button");
    ///<summary>Sonoff Outside 1 Porch Button</summary>
    public BinarySensorEntity SonoffOutside1PorchButton => new(_haContext, "binary_sensor.sonoff_outside_1_porch_button");
    ///<summary>Sonoff Outside 1 Status</summary>
    public BinarySensorEntity SonoffOutside1Status => new(_haContext, "binary_sensor.sonoff_outside_1_status");
    ///<summary>Sonoff Upstairs 2 Bathroom Light Button</summary>
    public BinarySensorEntity SonoffUpstairs2BathroomLightButton => new(_haContext, "binary_sensor.sonoff_upstairs_2_bathroom_light_button");
    ///<summary>Sonoff Upstairs 2 Bedroom Light Button</summary>
    public BinarySensorEntity SonoffUpstairs2BedroomLightButton => new(_haContext, "binary_sensor.sonoff_upstairs_2_bedroom_light_button");
    ///<summary>Sonoff Upstairs 2 Mirror Light Button</summary>
    public BinarySensorEntity SonoffUpstairs2MirrorLightButton => new(_haContext, "binary_sensor.sonoff_upstairs_2_mirror_light_button");
    ///<summary>Sonoff Upstairs 2 Status</summary>
    public BinarySensorEntity SonoffUpstairs2Status => new(_haContext, "binary_sensor.sonoff_upstairs_2_status");
    ///<summary>Sonoff Upstairs 2 Studio Light Button</summary>
    public BinarySensorEntity SonoffUpstairs2StudioLightButton => new(_haContext, "binary_sensor.sonoff_upstairs_2_studio_light_button");
    ///<summary>Studio Motion</summary>
    public BinarySensorEntity StudioMotion => new(_haContext, "binary_sensor.studio_motion");
    ///<summary>Sump Alarm Trigger</summary>
    public BinarySensorEntity SumpAlarmTrigger => new(_haContext, "binary_sensor.sump_alarm_trigger");
    ///<summary>Toilet Door</summary>
    public BinarySensorEntity ToiletDoor => new(_haContext, "binary_sensor.toilet_door");
    ///<summary>Toilet Door Battery</summary>
    public BinarySensorEntity ToiletDoorBatteryLow => new(_haContext, "binary_sensor.toilet_door_battery_low");
    ///<summary>Toilet Motion</summary>
    public BinarySensorEntity ToiletMotion => new(_haContext, "binary_sensor.toilet_motion");
    ///<summary>Toilet Occupancy</summary>
    public BinarySensorEntity ToiletWasp => new(_haContext, "binary_sensor.toilet_wasp");
    ///<summary>UDMPRO Hdd 1</summary>
    public BinarySensorEntity UdmproHdd1 => new(_haContext, "binary_sensor.udmpro_hdd_1");
    ///<summary>UniFi Dream Machine WAN status</summary>
    public BinarySensorEntity UnifiDreamMachineWanStatus => new(_haContext, "binary_sensor.unifi_dream_machine_wan_status");
    ///<summary>Updater</summary>
    public BinarySensorEntity Updater => new(_haContext, "binary_sensor.updater");
    ///<summary>Utility Room Motion</summary>
    public BinarySensorEntity UtilityRoomMotion => new(_haContext, "binary_sensor.utility_room_motion");
    ///<summary>WIFI smart CO alarm Safety</summary>
    public BinarySensorEntity WifiSmartCoAlarmSafety => new(_haContext, "binary_sensor.wifi_smart_co_alarm_safety");
    ///<summary>Window Sofa Occupancy</summary>
    public BinarySensorEntity WindowSofaOccupancy => new(_haContext, "binary_sensor.window_sofa_occupancy");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ESPresense Bedroom Restart</summary>
    public ButtonEntity EspresenseBedroomRestart => new(_haContext, "button.espresense_bedroom_restart");
    ///<summary>ESPresense Kitchen Enroll</summary>
    public ButtonEntity EspresenseKitchenEnroll => new(_haContext, "button.espresense_kitchen_enroll");
    ///<summary>ESPresense Kitchen Restart</summary>
    public ButtonEntity EspresenseKitchenRestart => new(_haContext, "button.espresense_kitchen_restart");
    ///<summary>ESPresense Kitchen Update</summary>
    public ButtonEntity EspresenseKitchenUpdate => new(_haContext, "button.espresense_kitchen_update");
    ///<summary>ESPresense Lounge Enroll</summary>
    public ButtonEntity EspresenseLoungeEnroll => new(_haContext, "button.espresense_lounge_enroll");
    ///<summary>ESPresense Lounge Restart</summary>
    public ButtonEntity EspresenseLoungeRestart => new(_haContext, "button.espresense_lounge_restart");
    ///<summary>ESPresense Lounge Update</summary>
    public ButtonEntity EspresenseLoungeUpdate => new(_haContext, "button.espresense_lounge_update");
    ///<summary>ESPresense Snug Restart</summary>
    public ButtonEntity EspresenseSnugRestart => new(_haContext, "button.espresense_snug_restart");
    ///<summary>Hallway Tablet Bring to foreground</summary>
    public ButtonEntity HallwayTabletBringToForeground => new(_haContext, "button.hallway_tablet_bring_to_foreground");
    ///<summary>Hallway Tablet Load start URL</summary>
    public ButtonEntity HallwayTabletLoadStartUrl => new(_haContext, "button.hallway_tablet_load_start_url");
    ///<summary>Hallway Tablet Restart browser</summary>
    public ButtonEntity HallwayTabletRestartBrowser => new(_haContext, "button.hallway_tablet_restart_browser");
    ///<summary>Hallway Tablet Restart device</summary>
    public ButtonEntity HallwayTabletRestartDevice => new(_haContext, "button.hallway_tablet_restart_device");
    ///<summary>Hallway Tablet Send to background</summary>
    public ButtonEntity HallwayTabletSendToBackground => new(_haContext, "button.hallway_tablet_send_to_background");
    ///<summary>Lounge FP2 Identify</summary>
    public ButtonEntity LoungeFp2Identify => new(_haContext, "button.lounge_fp2_identify");
    ///<summary>Dismiss alert</summary>
    public ButtonEntity MarkDismissAlert => new(_haContext, "button.mark_dismiss_alert");
    ///<summary>nspanel Restart</summary>
    public ButtonEntity NspanelRestart => new(_haContext, "button.nspanel_restart");
    ///<summary>nspanel Update TFT display</summary>
    public ButtonEntity NspanelUpdateTftDisplay => new(_haContext, "button.nspanel_update_tft_display");
    ///<summary>studio-bluetooth-proxy Safe Mode Boot</summary>
    public ButtonEntity SafeModeBoot => new(_haContext, "button.safe_mode_boot");
    ///<summary>Shed Identify</summary>
    public ButtonEntity ShedIdentify => new(_haContext, "button.shed_identify");
    ///<summary>Shelly Shed Lights Reboot</summary>
    public ButtonEntity ShellyShedLightsReboot => new(_haContext, "button.shelly_shed_lights_reboot");
    ///<summary>Shelly Shed Sockets Reboot</summary>
    public ButtonEntity ShellyShedSocketsReboot => new(_haContext, "button.shelly_shed_sockets_reboot");
    ///<summary>shellypro4pm-c8f09e83a72c Reboot</summary>
    public ButtonEntity Shellypro4pmC8f09e83a72cReboot => new(_haContext, "button.shellypro4pm_c8f09e83a72c_reboot");
    ///<summary>Snug FP2 Identify</summary>
    public ButtonEntity SnugFp2Identify => new(_haContext, "button.snug_fp2_identify");
    ///<summary>studio-bluetooth-proxy Enroll</summary>
    public ButtonEntity StudioBluetoothProxyEnroll => new(_haContext, "button.studio_bluetooth_proxy_enroll");
    ///<summary>studio-bluetooth-proxy Restart</summary>
    public ButtonEntity StudioBluetoothProxyRestart => new(_haContext, "button.studio_bluetooth_proxy_restart");
    ///<summary>studio-bluetooth-proxy Update</summary>
    public ButtonEntity StudioBluetoothProxyUpdate => new(_haContext, "button.studio_bluetooth_proxy_update");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Andy Workouts</summary>
    public CalendarEntity AndyWorkouts => new(_haContext, "calendar.andy_workouts");
    ///<summary>Contacts</summary>
    public CalendarEntity Contacts => new(_haContext, "calendar.contacts");
    ///<summary>Family</summary>
    public CalendarEntity Family => new(_haContext, "calendar.family");
    ///<summary>Holidays in united kingdom</summary>
    public CalendarEntity HolidaysInUnitedKingdom => new(_haContext, "calendar.holidays_in_united_kingdom");
    ///<summary>Home.andisoft@gmail.com</summary>
    public CalendarEntity HomeAndisoftGmailCom => new(_haContext, "calendar.home_andisoft_gmail_com");
    ///<summary>Stockport Council</summary>
    public CalendarEntity StockportCouncil => new(_haContext, "calendar.stockport_council");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Basement Hall Camera Medium</summary>
    public CameraEntity BasementHallCameraMedium => new(_haContext, "camera.basement_hall_camera_medium");
    ///<summary>Hallway Camera Medium</summary>
    public CameraEntity HallwayCameraMedium => new(_haContext, "camera.hallway_camera_medium");
    ///<summary>Kitchen Camera Medium</summary>
    public CameraEntity KitchenCameraMedium => new(_haContext, "camera.kitchen_camera_medium");
    ///<summary>Cleaning map</summary>
    public CameraEntity MarkCleaningMap => new(_haContext, "camera.mark_cleaning_map");
    ///<summary>Patio Camera Medium</summary>
    public CameraEntity PatioCameraMedium => new(_haContext, "camera.patio_camera_medium");
    ///<summary>Shed Camera Medium</summary>
    public CameraEntity ShedCameraMedium => new(_haContext, "camera.shed_camera_medium");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Basement</summary>
    public ClimateEntity Basement => new(_haContext, "climate.basement");
    ///<summary>Downstairs</summary>
    public ClimateEntity Downstairs => new(_haContext, "climate.downstairs");
    ///<summary>Shed Thermostat</summary>
    public ClimateEntity ShedThermostat => new(_haContext, "climate.shed_thermostat");
    ///<summary>Upstairs</summary>
    public ClimateEntity Upstairs => new(_haContext, "climate.upstairs");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public DeviceTrackerEntity _10079d748ee848e98a1fE565c9fb73241001 => new(_haContext, "device_tracker.10079d74_8ee8_48e9_8a1f_e565c9fb7324_100_1");
    ///<summary>20259E</summary>
    public DeviceTrackerEntity _20259e => new(_haContext, "device_tracker.20259e");
    public DeviceTrackerEntity _74278bdaB64445208f0c720eaf059935023646C68b => new(_haContext, "device_tracker.74278bda_b644_4520_8f0c_720eaf059935_0_23646_c68b");
    public DeviceTrackerEntity _74278bdaB64445208f0c720eaf059935042355512c => new(_haContext, "device_tracker.74278bda_b644_4520_8f0c_720eaf059935_0_42355_512c");
    public DeviceTrackerEntity _74278bdaB64445208f0c720eaf0599350447404a03 => new(_haContext, "device_tracker.74278bda_b644_4520_8f0c_720eaf059935_0_44740_4a03");
    public DeviceTrackerEntity _74278bdaB64445208f0c720eaf059935095650951 => new(_haContext, "device_tracker.74278bda_b644_4520_8f0c_720eaf059935_0_9565_0951");
    public DeviceTrackerEntity _9d41000035d6F4ddBa60E7bd8dc491c027118791269ee => new(_haContext, "device_tracker.9d410000_35d6_f4dd_ba60_e7bd8dc491c0_27118_7912_69ee");
    public DeviceTrackerEntity _9d41000035d6F4ddBa60E7bd8dc491c06538525776Ff69 => new(_haContext, "device_tracker.9d410000_35d6_f4dd_ba60_e7bd8dc491c0_65385_25776_ff69");
    ///<summary>A3 Printer</summary>
    public DeviceTrackerEntity A3Printer => new(_haContext, "device_tracker.a3_printer");
    ///<summary>AB1530BLE</summary>
    public DeviceTrackerEntity Ab1530ble => new(_haContext, "device_tracker.ab1530ble");
    ///<summary>amazon-1b80b5fcd</summary>
    public DeviceTrackerEntity Amazon1b80b5fcd => new(_haContext, "device_tracker.amazon_1b80b5fcd");
    ///<summary>Andrew’s iPhone</summary>
    public DeviceTrackerEntity AndrewsIphoneTile => new(_haContext, "device_tracker.andrews_iphone_tile");
    ///<summary>Andrews-Mini</summary>
    public DeviceTrackerEntity AndrewsMini => new(_haContext, "device_tracker.andrews_mini");
    ///<summary>Andrews-Mini</summary>
    public DeviceTrackerEntity AndrewsMini2 => new(_haContext, "device_tracker.andrews_mini_2");
    ///<summary>Andy Laptop</summary>
    public DeviceTrackerEntity AndyLaptop => new(_haContext, "device_tracker.andy_laptop");
    ///<summary>Andy Sleep Analyser</summary>
    public DeviceTrackerEntity AndySleepAnalyser => new(_haContext, "device_tracker.andy_sleep_analyser");
    ///<summary>Andy&apos;s Keys</summary>
    public DeviceTrackerEntity AndysKeys => new(_haContext, "device_tracker.andys_keys");
    ///<summary>Apple Pencil</summary>
    public DeviceTrackerEntity ApplePencil => new(_haContext, "device_tracker.apple_pencil");
    ///<summary>AT 1E24</summary>
    public DeviceTrackerEntity At1e24 => new(_haContext, "device_tracker.at_1e24");
    ///<summary>AT 52832X</summary>
    public DeviceTrackerEntity At52832x => new(_haContext, "device_tracker.at_52832x");
    ///<summary>Basement Hall Camera</summary>
    public DeviceTrackerEntity BasementHallCamera => new(_haContext, "device_tracker.basement_hall_camera");
    ///<summary>Basement Thermostat</summary>
    public DeviceTrackerEntity BasementThermostat => new(_haContext, "device_tracker.basement_thermostat");
    ///<summary>BCM4350C0 UART 37.4 MHz</summary>
    public DeviceTrackerEntity Bcm4350c0Uart374Mhz => new(_haContext, "device_tracker.bcm4350c0_uart_37_4_mhz");
    ///<summary>Bedroom Echo Show</summary>
    public DeviceTrackerEntity BedroomEchoShow => new(_haContext, "device_tracker.bedroom_echo_show");
    ///<summary>Ben-s-S23-Ultra</summary>
    public DeviceTrackerEntity BenSS23Ultra => new(_haContext, "device_tracker.ben_s_s23_ultra");
    ///<summary>Body+ Scales</summary>
    public DeviceTrackerEntity BodyScales => new(_haContext, "device_tracker.body_scales");
    public DeviceTrackerEntity Brewerypi => new(_haContext, "device_tracker.brewerypi");
    ///<summary>Bulb IHD</summary>
    public DeviceTrackerEntity BulbIhd => new(_haContext, "device_tracker.bulb_ihd");
    ///<summary>Car</summary>
    public DeviceTrackerEntity Car => new(_haContext, "device_tracker.car");
    ///<summary>CB_SmartCam</summary>
    public DeviceTrackerEntity CbSmartcam => new(_haContext, "device_tracker.cb_smartcam");
    ///<summary>Claire-Laptop</summary>
    public DeviceTrackerEntity ClaireLaptop => new(_haContext, "device_tracker.claire_laptop");
    ///<summary>Claire Sleep Analyzer</summary>
    public DeviceTrackerEntity ClaireSleepAnalyzer => new(_haContext, "device_tracker.claire_sleep_analyzer");
    ///<summary>claireiphone</summary>
    public DeviceTrackerEntity Claireiphone => new(_haContext, "device_tracker.claireiphone");
    ///<summary>claireiphone</summary>
    public DeviceTrackerEntity Claireiphone2 => new(_haContext, "device_tracker.claireiphone_2");
    ///<summary>Claire’s Apple Watch</summary>
    public DeviceTrackerEntity ClairesAppleWatch => new(_haContext, "device_tracker.claires_apple_watch");
    ///<summary>claireiphone</summary>
    public DeviceTrackerEntity ClairesIphone => new(_haContext, "device_tracker.claires_iphone");
    ///<summary>Claire’s iPhone</summary>
    public DeviceTrackerEntity ClairesIphoneTile => new(_haContext, "device_tracker.claires_iphone_tile");
    ///<summary>Claire&apos;s Keys</summary>
    public DeviceTrackerEntity ClairesKeys => new(_haContext, "device_tracker.claires_keys");
    ///<summary>claires-laptop</summary>
    public DeviceTrackerEntity ClairesLaptop => new(_haContext, "device_tracker.claires_laptop");
    ///<summary>Dining Room Echo Input</summary>
    public DeviceTrackerEntity DiningRoomEchoInput => new(_haContext, "device_tracker.dining_room_echo_input");
    ///<summary>Docker Host</summary>
    public DeviceTrackerEntity DockerHost => new(_haContext, "device_tracker.docker_host");
    ///<summary>Downstairs Thermostat</summary>
    public DeviceTrackerEntity DownstairsThermostat => new(_haContext, "device_tracker.downstairs_thermostat");
    ///<summary>Dressing Room Ecot Dot</summary>
    public DeviceTrackerEntity DressingRoomEcotDot => new(_haContext, "device_tracker.dressing_room_ecot_dot");
    public DeviceTrackerEntity E20a39f473f54bc4186417d1ad07a962151062235247d4 => new(_haContext, "device_tracker.e20a39f4_73f5_4bc4_1864_17d1ad07a962_15106_22352_47d4");
    public DeviceTrackerEntity E20a39f473f54bc4186417d1ad07a9623810829772C6d1 => new(_haContext, "device_tracker.e20a39f4_73f5_4bc4_1864_17d1ad07a962_38108_29772_c6d1");
    public DeviceTrackerEntity E20a39f473f54bc4186417d1ad07a9623941038168df7 => new(_haContext, "device_tracker.e20a39f4_73f5_4bc4_1864_17d1ad07a962_39410_3816_8df7");
    public DeviceTrackerEntity E20a39f473f54bc4186417d1ad07a9624040050805F0e9 => new(_haContext, "device_tracker.e20a39f4_73f5_4bc4_1864_17d1ad07a962_40400_50805_f0e9");
    public DeviceTrackerEntity E20a39f473f54bc4186417d1ad07a96262393370145f81 => new(_haContext, "device_tracker.e20a39f4_73f5_4bc4_1864_17d1ad07a962_62393_37014_5f81");
    public DeviceTrackerEntity E2c56db5Dffb48d2B060D0f5a71096e000 => new(_haContext, "device_tracker.e2c56db5_dffb_48d2_b060_d0f5a71096e0_0_0");
    ///<summary>Echo Input-263</summary>
    public DeviceTrackerEntity EchoInput263 => new(_haContext, "device_tracker.echo_input_263");
    ///<summary>Echo Show 8-CX9</summary>
    public DeviceTrackerEntity EchoShow8Cx9 => new(_haContext, "device_tracker.echo_show_8_cx9");
    ///<summary>EML-L09%11%CloudClone</summary>
    public DeviceTrackerEntity EmlL0911Cloudclone => new(_haContext, "device_tracker.eml_l09_11_cloudclone");
    ///<summary>Epic Air Sport ANC-BLE</summary>
    public DeviceTrackerEntity EpicAirSportAncBle => new(_haContext, "device_tracker.epic_air_sport_anc_ble");
    ///<summary>EPSON78117F</summary>
    public DeviceTrackerEntity Epson78117f => new(_haContext, "device_tracker.epson78117f");
    ///<summary>ESPHome Cat Feeder</summary>
    public DeviceTrackerEntity EsphomeCatFeeder => new(_haContext, "device_tracker.esphome_cat_feeder");
    ///<summary>ESPHome Doorbell</summary>
    public DeviceTrackerEntity EsphomeDoorbell => new(_haContext, "device_tracker.esphome_doorbell");
    ///<summary>ESPHome Sump Alarm</summary>
    public DeviceTrackerEntity EsphomeSumpAlarm => new(_haContext, "device_tracker.esphome_sump_alarm");
    ///<summary>ESPHome Weather Station</summary>
    public DeviceTrackerEntity EsphomeWeatherStation => new(_haContext, "device_tracker.esphome_weather_station");
    ///<summary>ESPresense Kitchen</summary>
    public DeviceTrackerEntity EspresenseKitchen => new(_haContext, "device_tracker.espresense_kitchen");
    ///<summary>ESPresense Lounge</summary>
    public DeviceTrackerEntity EspresenseLounge => new(_haContext, "device_tracker.espresense_lounge");
    ///<summary>espressif</summary>
    public DeviceTrackerEntity Espressif => new(_haContext, "device_tracker.espressif");
    ///<summary>F_ACE_21</summary>
    public DeviceTrackerEntity FAce21 => new(_haContext, "device_tracker.f_ace_21");
    ///<summary>Galaxy-A20e</summary>
    public DeviceTrackerEntity GalaxyA20e => new(_haContext, "device_tracker.galaxy_a20e");
    ///<summary>Galaxy Watch Active (8F60) LE</summary>
    public DeviceTrackerEntity GalaxyWatchActive8f60Le => new(_haContext, "device_tracker.galaxy_watch_active_8f60_le");
    ///<summary>Galaxy Watch4 (X2PV)</summary>
    public DeviceTrackerEntity GalaxyWatch4X2pv => new(_haContext, "device_tracker.galaxy_watch4_x2pv");
    ///<summary>Guest Room Echo Show</summary>
    public DeviceTrackerEntity GuestRoomEchoShow => new(_haContext, "device_tracker.guest_room_echo_show");
    ///<summary>hauser</summary>
    public DeviceTrackerEntity HauserAndy => new(_haContext, "device_tracker.hauser_andy");
    ///<summary>hauser</summary>
    public DeviceTrackerEntity HauserClaire => new(_haContext, "device_tracker.hauser_claire");
    ///<summary>HP DesignJet 5500ps</summary>
    public DeviceTrackerEntity HpDesignjet5500ps => new(_haContext, "device_tracker.hp_designjet_5500ps");
    ///<summary>HUAWEI_P30_Pro-839be50799</summary>
    public DeviceTrackerEntity HuaweiP30Pro839be50799 => new(_haContext, "device_tracker.huawei_p30_pro_839be50799");
    ///<summary>Inspire 2</summary>
    public DeviceTrackerEntity Inspire2 => new(_haContext, "device_tracker.inspire_2");
    ///<summary>iPad11,6</summary>
    public DeviceTrackerEntity Ipad116 => new(_haContext, "device_tracker.ipad116");
    ///<summary>iPhone</summary>
    public DeviceTrackerEntity Iphone => new(_haContext, "device_tracker.iphone");
    ///<summary>iPhone</summary>
    public DeviceTrackerEntity Iphone2 => new(_haContext, "device_tracker.iphone_2");
    ///<summary>iPhone10,4</summary>
    public DeviceTrackerEntity Iphone104 => new(_haContext, "device_tracker.iphone104");
    ///<summary>iPhone11,6</summary>
    public DeviceTrackerEntity Iphone116 => new(_haContext, "device_tracker.iphone116");
    ///<summary>iPhone12,1</summary>
    public DeviceTrackerEntity Iphone121 => new(_haContext, "device_tracker.iphone121");
    ///<summary>iPhone12,8</summary>
    public DeviceTrackerEntity Iphone128 => new(_haContext, "device_tracker.iphone128");
    ///<summary>iPhone13,2</summary>
    public DeviceTrackerEntity Iphone132 => new(_haContext, "device_tracker.iphone132");
    ///<summary>iPhone13,3</summary>
    public DeviceTrackerEntity Iphone133 => new(_haContext, "device_tracker.iphone133");
    ///<summary>iPhone14,2</summary>
    public DeviceTrackerEntity Iphone142 => new(_haContext, "device_tracker.iphone142");
    ///<summary>iPhone14,5</summary>
    public DeviceTrackerEntity Iphone145 => new(_haContext, "device_tracker.iphone145");
    ///<summary>iPhone14,7</summary>
    public DeviceTrackerEntity Iphone147 => new(_haContext, "device_tracker.iphone147");
    ///<summary>iPhone15,2</summary>
    public DeviceTrackerEntity Iphone152 => new(_haContext, "device_tracker.iphone152");
    ///<summary>iPhone15,3</summary>
    public DeviceTrackerEntity Iphone153 => new(_haContext, "device_tracker.iphone153");
    ///<summary>iPhone9,3</summary>
    public DeviceTrackerEntity Iphone93 => new(_haContext, "device_tracker.iphone93");
    ///<summary>iSpindle Relay</summary>
    public DeviceTrackerEntity IspindleRelay => new(_haContext, "device_tracker.ispindle_relay");
    ///<summary>Jabra</summary>
    public DeviceTrackerEntity Jabra => new(_haContext, "device_tracker.jabra");
    ///<summary>Jabra Elite 45h</summary>
    public DeviceTrackerEntity JabraElite45h => new(_haContext, "device_tracker.jabra_elite_45h");
    ///<summary>KALIBRATE-dDMm8</summary>
    public DeviceTrackerEntity KalibrateDdmm8 => new(_haContext, "device_tracker.kalibrate_ddmm8");
    ///<summary>KANE458S 120222073</summary>
    public DeviceTrackerEntity Kane458s120222073 => new(_haContext, "device_tracker.kane458s_120222073");
    ///<summary>KeyTag</summary>
    public DeviceTrackerEntity Keytag => new(_haContext, "device_tracker.keytag");
    ///<summary>Kitchen</summary>
    public DeviceTrackerEntity Kitchen => new(_haContext, "device_tracker.kitchen");
    ///<summary>Kitchen Camera</summary>
    public DeviceTrackerEntity KitchenCamera => new(_haContext, "device_tracker.kitchen_camera");
    ///<summary>Kitchen Echo Show</summary>
    public DeviceTrackerEntity KitchenEchoShow => new(_haContext, "device_tracker.kitchen_echo_show");
    ///<summary>Konnected Basement</summary>
    public DeviceTrackerEntity KonnectedBasement => new(_haContext, "device_tracker.konnected_basement");
    ///<summary>Konnected Downstairs</summary>
    public DeviceTrackerEntity KonnectedDownstairs => new(_haContext, "device_tracker.konnected_downstairs");
    ///<summary>Konnected Upstairs</summary>
    public DeviceTrackerEntity KonnectedUpstairs => new(_haContext, "device_tracker.konnected_upstairs");
    ///<summary>LE-Headset</summary>
    public DeviceTrackerEntity LeHeadset => new(_haContext, "device_tracker.le_headset");
    ///<summary>LE_WF-C500</summary>
    public DeviceTrackerEntity LeWfC500 => new(_haContext, "device_tracker.le_wf_c500");
    ///<summary>LE_WH-1000XM4</summary>
    public DeviceTrackerEntity LeWh1000xm4 => new(_haContext, "device_tracker.le_wh_1000xm4");
    ///<summary>LE_WH-1000XM5</summary>
    public DeviceTrackerEntity LeWh1000xm5 => new(_haContext, "device_tracker.le_wh_1000xm5");
    ///<summary>LE_WH-H910N (h.ear)</summary>
    public DeviceTrackerEntity LeWhH910nHEar => new(_haContext, "device_tracker.le_wh_h910n_h_ear");
    ///<summary>LE_WH-XB910N</summary>
    public DeviceTrackerEntity LeWhXb910n => new(_haContext, "device_tracker.le_wh_xb910n");
    ///<summary>Lounge Echo Plus</summary>
    public DeviceTrackerEntity LoungeEchoPlus => new(_haContext, "device_tracker.lounge_echo_plus");
    ///<summary>Lounge Fire TV</summary>
    public DeviceTrackerEntity LoungeFireTv => new(_haContext, "device_tracker.lounge_fire_tv");
    ///<summary>Macmini9,1</summary>
    public DeviceTrackerEntity Macmini91 => new(_haContext, "device_tracker.macmini91");
    ///<summary>Michael&apos;s Galaxy A41</summary>
    public DeviceTrackerEntity MichaelSGalaxyA41 => new(_haContext, "device_tracker.michael_s_galaxy_a41");
    ///<summary>MOTIF A.N.C. [LE]</summary>
    public DeviceTrackerEntity MotifANCLe => new(_haContext, "device_tracker.motif_a_n_c_le");
    ///<summary>MS-CAR</summary>
    public DeviceTrackerEntity MsCar => new(_haContext, "device_tracker.ms_car");
    ///<summary>N02RF</summary>
    public DeviceTrackerEntity N02rf => new(_haContext, "device_tracker.n02rf");
    ///<summary>netgear-gs724tp-attic</summary>
    public DeviceTrackerEntity NetgearGs724tpAttic => new(_haContext, "device_tracker.netgear_gs724tp_attic");
    ///<summary>netgear-gs724tp-basement</summary>
    public DeviceTrackerEntity NetgearGs724tpBasement => new(_haContext, "device_tracker.netgear_gs724tp_basement");
    ///<summary>OnePlus Nord2 lg</summary>
    public DeviceTrackerEntity OneplusNord2Lg => new(_haContext, "device_tracker.oneplus_nord2_lg");
    ///<summary>OnePlus5T</summary>
    public DeviceTrackerEntity Oneplus5t => new(_haContext, "device_tracker.oneplus5t");
    ///<summary>Patio Camera</summary>
    public DeviceTrackerEntity PatioCamera => new(_haContext, "device_tracker.patio_camera");
    ///<summary>Pixel-6</summary>
    public DeviceTrackerEntity Pixel6 => new(_haContext, "device_tracker.pixel_6");
    ///<summary>Pixel 6</summary>
    public DeviceTrackerEntity Pixel62 => new(_haContext, "device_tracker.pixel_6_2");
    ///<summary>Pixel-6</summary>
    public DeviceTrackerEntity Pixel63 => new(_haContext, "device_tracker.pixel_6_3");
    ///<summary>Pixel-6</summary>
    public DeviceTrackerEntity Pixel64 => new(_haContext, "device_tracker.pixel_6_4");
    ///<summary>Pixel-6</summary>
    public DeviceTrackerEntity Pixel65 => new(_haContext, "device_tracker.pixel_6_5");
    ///<summary>Pixel-6</summary>
    public DeviceTrackerEntity Pixel66 => new(_haContext, "device_tracker.pixel_6_6");
    ///<summary>Pixel 6 Tile</summary>
    public DeviceTrackerEntity Pixel6Tile => new(_haContext, "device_tracker.pixel_6_tile");
    ///<summary>Presence-Sensor-FP2-8D3C</summary>
    public DeviceTrackerEntity PresenceSensorFp28d3c => new(_haContext, "device_tracker.presence_sensor_fp2_8d3c");
    public DeviceTrackerEntity PresenceSensorFp2Cebc => new(_haContext, "device_tracker.presence_sensor_fp2_cebc");
    ///<summary>RTL62939</summary>
    public DeviceTrackerEntity Rtl62939 => new(_haContext, "device_tracker.rtl62939");
    public DeviceTrackerEntity S424d3be485e872ccc483c => new(_haContext, "device_tracker.s424d3be485e872ccc_483c");
    public DeviceTrackerEntity S56bd949cabb74974cCa91 => new(_haContext, "device_tracker.s56bd949cabb74974c_ca91");
    ///<summary>Samsung</summary>
    public DeviceTrackerEntity Samsung => new(_haContext, "device_tracker.samsung");
    ///<summary>Sense</summary>
    public DeviceTrackerEntity Sense => new(_haContext, "device_tracker.sense");
    ///<summary>Series 06</summary>
    public DeviceTrackerEntity Series06 => new(_haContext, "device_tracker.series_06");
    public DeviceTrackerEntity Sfd85968e835924d1c6058 => new(_haContext, "device_tracker.sfd85968e835924d1c_6058");
    ///<summary>Shed</summary>
    public DeviceTrackerEntity Shed => new(_haContext, "device_tracker.shed");
    ///<summary>Shed Echo Input</summary>
    public DeviceTrackerEntity ShedEchoInput => new(_haContext, "device_tracker.shed_echo_input");
    ///<summary>Shed Thermostat</summary>
    public DeviceTrackerEntity ShedThermostat => new(_haContext, "device_tracker.shed_thermostat");
    ///<summary>Shelly Shed Lights</summary>
    public DeviceTrackerEntity ShellyShedLights => new(_haContext, "device_tracker.shelly_shed_lights");
    ///<summary>Shelly Shed Sockets</summary>
    public DeviceTrackerEntity ShellyShedSockets => new(_haContext, "device_tracker.shelly_shed_sockets");
    ///<summary>Shelly Upstairs Lights 1</summary>
    public DeviceTrackerEntity ShellyUpstairsLights1 => new(_haContext, "device_tracker.shelly_upstairs_lights_1");
    ///<summary>SM-R860</summary>
    public DeviceTrackerEntity SmR860 => new(_haContext, "device_tracker.sm_r860");
    ///<summary>Sonoff Basement 1</summary>
    public DeviceTrackerEntity SonoffBasement1 => new(_haContext, "device_tracker.sonoff_basement_1");
    ///<summary>Sonoff Basement 2</summary>
    public DeviceTrackerEntity SonoffBasement2 => new(_haContext, "device_tracker.sonoff_basement_2");
    ///<summary>Sonoff Downstairs 1</summary>
    public DeviceTrackerEntity SonoffDownstairs1 => new(_haContext, "device_tracker.sonoff_downstairs_1");
    ///<summary>Sonoff Downstairs 2</summary>
    public DeviceTrackerEntity SonoffDownstairs2 => new(_haContext, "device_tracker.sonoff_downstairs_2");
    ///<summary>Sonoff Outside 1</summary>
    public DeviceTrackerEntity SonoffOutside1 => new(_haContext, "device_tracker.sonoff_outside_1");
    ///<summary>Sonoff Upstairs 2</summary>
    public DeviceTrackerEntity SonoffUpstairs2 => new(_haContext, "device_tracker.sonoff_upstairs_2");
    ///<summary>Car Key</summary>
    public DeviceTrackerEntity SpareKey => new(_haContext, "device_tracker.spare_key");
    ///<summary>Squeezebox Dining Room</summary>
    public DeviceTrackerEntity SqueezeboxDiningRoom => new(_haContext, "device_tracker.squeezebox_dining_room");
    ///<summary>Studio</summary>
    public DeviceTrackerEntity Studio => new(_haContext, "device_tracker.studio");
    ///<summary>studio-bluetooth-proxy</summary>
    public DeviceTrackerEntity StudioBluetoothProxy => new(_haContext, "device_tracker.studio_bluetooth_proxy");
    ///<summary>The Death Star</summary>
    public DeviceTrackerEntity TheDeathStar => new(_haContext, "device_tracker.the_death_star");
    ///<summary>Tile</summary>
    public DeviceTrackerEntity Tile => new(_haContext, "device_tracker.tile");
    ///<summary>TOZO-T12</summary>
    public DeviceTrackerEntity TozoT12 => new(_haContext, "device_tracker.tozo_t12");
    ///<summary>UAP-AC-LR-Basement</summary>
    public DeviceTrackerEntity UapAcLrBasement => new(_haContext, "device_tracker.uap_ac_lr_basement");
    ///<summary>UAP-AC-LR-Upstairs</summary>
    public DeviceTrackerEntity UapAcLrUpstairs => new(_haContext, "device_tracker.uap_ac_lr_upstairs");
    ///<summary>UAP-FlexHD-Groundfloor</summary>
    public DeviceTrackerEntity UapFlexhdGroundfloor => new(_haContext, "device_tracker.uap_flexhd_groundfloor");
    ///<summary>UAP-IW-HD-Shed</summary>
    public DeviceTrackerEntity UapIwHdShed => new(_haContext, "device_tracker.uap_iw_hd_shed");
    ///<summary>UDMPRO</summary>
    public DeviceTrackerEntity Udmpro => new(_haContext, "device_tracker.udmpro");
    public DeviceTrackerEntity Unifi000000000000Default => new(_haContext, "device_tracker.unifi_00_00_00_00_00_00_default");
    public DeviceTrackerEntity Unifi000000000400Default => new(_haContext, "device_tracker.unifi_00_00_00_00_04_00_default");
    public DeviceTrackerEntity Unifi0000001e2f28Default => new(_haContext, "device_tracker.unifi_00_00_00_1e_2f_28_default");
    public DeviceTrackerEntity Unifi0000002070B6Default => new(_haContext, "device_tracker.unifi_00_00_00_20_70_b6_default");
    public DeviceTrackerEntity Unifi000000250c02Default => new(_haContext, "device_tracker.unifi_00_00_00_25_0c_02_default");
    public DeviceTrackerEntity Unifi00160170D497Default => new(_haContext, "device_tracker.unifi_00_16_01_70_d4_97_default");
    public DeviceTrackerEntity Unifi001d73061433Default => new(_haContext, "device_tracker.unifi_00_1d_73_06_14_33_default");
    public DeviceTrackerEntity Unifi001d73063856Default => new(_haContext, "device_tracker.unifi_00_1d_73_06_38_56_default");
    public DeviceTrackerEntity Unifi001d73064a29Default => new(_haContext, "device_tracker.unifi_00_1d_73_06_4a_29_default");
    public DeviceTrackerEntity Unifi001d73067d17Default => new(_haContext, "device_tracker.unifi_00_1d_73_06_7d_17_default");
    public DeviceTrackerEntity Unifi001d73067eA0Default => new(_haContext, "device_tracker.unifi_00_1d_73_06_7e_a0_default");
    public DeviceTrackerEntity Unifi0024A5D66191Default => new(_haContext, "device_tracker.unifi_00_24_a5_d6_61_91_default");
    public DeviceTrackerEntity Unifi0024A5D66f65Default => new(_haContext, "device_tracker.unifi_00_24_a5_d6_6f_65_default");
    public DeviceTrackerEntity Unifi007f0804000fDefault => new(_haContext, "device_tracker.unifi_00_7f_08_04_00_0f_default");
    public DeviceTrackerEntity Unifi040100000fAcDefault => new(_haContext, "device_tracker.unifi_04_01_00_00_0f_ac_default");
    public DeviceTrackerEntity Unifi0cE69569000dDefault => new(_haContext, "device_tracker.unifi_0c_e6_95_69_00_0d_default");
    public DeviceTrackerEntity Unifi100d7f59B09fDefault => new(_haContext, "device_tracker.unifi_10_0d_7f_59_b0_9f_default");
    public DeviceTrackerEntity Unifi1c4d6639F031Default => new(_haContext, "device_tracker.unifi_1c_4d_66_39_f0_31_default");
    public DeviceTrackerEntity Unifi202020202020Default => new(_haContext, "device_tracker.unifi_20_20_20_20_20_20_default");
    public DeviceTrackerEntity Unifi224aE5CcA060Default => new(_haContext, "device_tracker.unifi_22_4a_e5_cc_a0_60_default");
    public DeviceTrackerEntity Unifi2aD359F63031Default => new(_haContext, "device_tracker.unifi_2a_d3_59_f6_30_31_default");
    public DeviceTrackerEntity Unifi385eAcFcC9BcDefault => new(_haContext, "device_tracker.unifi_38_5e_ac_fc_c9_bc_default");
    public DeviceTrackerEntity Unifi3a56F1A594E7Default => new(_haContext, "device_tracker.unifi_3a_56_f1_a5_94_e7_default");
    public DeviceTrackerEntity Unifi3a79B9F8BeF3Default => new(_haContext, "device_tracker.unifi_3a_79_b9_f8_be_f3_default");
    public DeviceTrackerEntity Unifi3e476fB6Ea0cDefault => new(_haContext, "device_tracker.unifi_3e_47_6f_b6_ea_0c_default");
    public DeviceTrackerEntity Unifi4e5cFd04479dDefault => new(_haContext, "device_tracker.unifi_4e_5c_fd_04_47_9d_default");
    public DeviceTrackerEntity Unifi540815Fd737dDefault => new(_haContext, "device_tracker.unifi_54_08_15_fd_73_7d_default");
    public DeviceTrackerEntity Unifi542d32355332Default => new(_haContext, "device_tracker.unifi_54_2d_32_35_53_32_default");
    public DeviceTrackerEntity Unifi6022322dE91fDefault => new(_haContext, "device_tracker.unifi_60_22_32_2d_e9_1f_default");
    public DeviceTrackerEntity Unifi6222322dE918Default => new(_haContext, "device_tracker.unifi_62_22_32_2d_e9_18_default");
    public DeviceTrackerEntity Unifi6222Eb41B9E3Default => new(_haContext, "device_tracker.unifi_62_22_eb_41_b9_e3_default");
    public DeviceTrackerEntity Unifi6662C5B8Ad56Default => new(_haContext, "device_tracker.unifi_66_62_c5_b8_ad_56_default");
    ///<summary>Hallway Tablet</summary>
    public DeviceTrackerEntity Unifi68DbF59aB902Default => new(_haContext, "device_tracker.unifi_68_db_f5_9a_b9_02_default");
    public DeviceTrackerEntity Unifi6a7dC10f5b1bDefault => new(_haContext, "device_tracker.unifi_6a_7d_c1_0f_5b_1b_default");
    public DeviceTrackerEntity Unifi6aA9Fe8bB2CfDefault => new(_haContext, "device_tracker.unifi_6a_a9_fe_8b_b2_cf_default");
    public DeviceTrackerEntity Unifi76Ba4785A45eDefault => new(_haContext, "device_tracker.unifi_76_ba_47_85_a4_5e_default");
    public DeviceTrackerEntity Unifi7e2f0965085cDefault => new(_haContext, "device_tracker.unifi_7e_2f_09_65_08_5c_default");
    public DeviceTrackerEntity Unifi7eF51e190696Default => new(_haContext, "device_tracker.unifi_7e_f5_1e_19_06_96_default");
    public DeviceTrackerEntity Unifi84947aCc8a3eDefault => new(_haContext, "device_tracker.unifi_84_94_7a_cc_8a_3e_default");
    public DeviceTrackerEntity Unifi884c3cB50100Default => new(_haContext, "device_tracker.unifi_88_4c_3c_b5_01_00_default");
    public DeviceTrackerEntity Unifi88A583Bc3234Default => new(_haContext, "device_tracker.unifi_88_a5_83_bc_32_34_default");
    ///<summary>Pixel-6</summary>
    public DeviceTrackerEntity Unifi8a61917cA195Default => new(_haContext, "device_tracker.unifi_8a_61_91_7c_a1_95_default");
    public DeviceTrackerEntity Unifi902234Ef0920Default => new(_haContext, "device_tracker.unifi_90_22_34_ef_09_20_default");
    public DeviceTrackerEntity Unifi9a6e66B16a1bDefault => new(_haContext, "device_tracker.unifi_9a_6e_66_b1_6a_1b_default");
    ///<summary>amazon-c67cf2c79</summary>
    public DeviceTrackerEntity UnifiAa556b98EeF2Default => new(_haContext, "device_tracker.unifi_aa_55_6b_98_ee_f2_default");
    public DeviceTrackerEntity UnifiB6351cCb47A0Default => new(_haContext, "device_tracker.unifi_b6_35_1c_cb_47_a0_default");
    ///<summary>brewerypi</summary>
    public DeviceTrackerEntity UnifiB827Eb1224CeDefault => new(_haContext, "device_tracker.unifi_b8_27_eb_12_24_ce_default");
    ///<summary>cat-feed-v2</summary>
    public DeviceTrackerEntity UnifiBcDdC267E7D5Default => new(_haContext, "device_tracker.unifi_bc_dd_c2_67_e7_d5_default");
    public DeviceTrackerEntity UnifiC1Ca84000000Default => new(_haContext, "device_tracker.unifi_c1_ca_84_00_00_00_default");
    public DeviceTrackerEntity UnifiC43dC7Ab3aA0Default => new(_haContext, "device_tracker.unifi_c4_3d_c7_ab_3a_a0_default");
    public DeviceTrackerEntity UnifiC43dC7Ab3aA5Default => new(_haContext, "device_tracker.unifi_c4_3d_c7_ab_3a_a5_default");
    public DeviceTrackerEntity UnifiC43dC7Ab3aA6Default => new(_haContext, "device_tracker.unifi_c4_3d_c7_ab_3a_a6_default");
    ///<summary>tests-Air</summary>
    public DeviceTrackerEntity UnifiC4B301D121E1Default => new(_haContext, "device_tracker.unifi_c4_b3_01_d1_21_e1_default");
    public DeviceTrackerEntity UnifiC7Ca84000000Default => new(_haContext, "device_tracker.unifi_c7_ca_84_00_00_00_default");
    public DeviceTrackerEntity UnifiC9Ca84000000Default => new(_haContext, "device_tracker.unifi_c9_ca_84_00_00_00_default");
    public DeviceTrackerEntity UnifiCaE57bA92c3aDefault => new(_haContext, "device_tracker.unifi_ca_e5_7b_a9_2c_3a_default");
    ///<summary>wlan0</summary>
    public DeviceTrackerEntity UnifiCc8cBfE9A4B9Default => new(_haContext, "device_tracker.unifi_cc_8c_bf_e9_a4_b9_default");
    public DeviceTrackerEntity UnifiCdCa84000000Default => new(_haContext, "device_tracker.unifi_cd_ca_84_00_00_00_default");
    public DeviceTrackerEntity UnifiCeCa84000000Default => new(_haContext, "device_tracker.unifi_ce_ca_84_00_00_00_default");
    public DeviceTrackerEntity UnifiD81f126b3fB9Default => new(_haContext, "device_tracker.unifi_d8_1f_12_6b_3f_b9_default");
    public DeviceTrackerEntity UnifiD8477dC3E8EcDefault => new(_haContext, "device_tracker.unifi_d8_47_7d_c3_e8_ec_default");
    public DeviceTrackerEntity UnifiD8D84eF522EfDefault => new(_haContext, "device_tracker.unifi_d8_d8_4e_f5_22_ef_default");
    public DeviceTrackerEntity UnifiF29a4b8141B4Default => new(_haContext, "device_tracker.unifi_f2_9a_4b_81_41_b4_default");
    public DeviceTrackerEntity UnifiFa70Bf52CaC2Default => new(_haContext, "device_tracker.unifi_fa_70_bf_52_ca_c2_default");
    ///<summary>Upstairs Thermostat</summary>
    public DeviceTrackerEntity UpstairsThermostat => new(_haContext, "device_tracker.upstairs_thermostat");
    ///<summary>Utility Room Echo Dot</summary>
    public DeviceTrackerEntity UtilityRoomEchoDot => new(_haContext, "device_tracker.utility_room_echo_dot");
    ///<summary>VacuumRobot</summary>
    public DeviceTrackerEntity Vacuumrobot => new(_haContext, "device_tracker.vacuumrobot");
    ///<summary>Versa 2</summary>
    public DeviceTrackerEntity Versa2 => new(_haContext, "device_tracker.versa_2");
    ///<summary>Versa 3</summary>
    public DeviceTrackerEntity Versa3 => new(_haContext, "device_tracker.versa_3");
    ///<summary>Watch6,1</summary>
    public DeviceTrackerEntity Watch61 => new(_haContext, "device_tracker.watch61");
    ///<summary>Watch6,14</summary>
    public DeviceTrackerEntity Watch614 => new(_haContext, "device_tracker.watch614");
    ///<summary>Watch6,18</summary>
    public DeviceTrackerEntity Watch618 => new(_haContext, "device_tracker.watch618");
    ///<summary>Watch6,6</summary>
    public DeviceTrackerEntity Watch66 => new(_haContext, "device_tracker.watch66");
    ///<summary>Watch6,7</summary>
    public DeviceTrackerEntity Watch67 => new(_haContext, "device_tracker.watch67");
    ///<summary>XP PP 04E35A</summary>
    public DeviceTrackerEntity XpPp04e35a => new(_haContext, "device_tracker.xp_pp_04e35a");
    ///<summary>Yeelight Basement Stairs Light</summary>
    public DeviceTrackerEntity YeelightBasementStairsLight => new(_haContext, "device_tracker.yeelight_basement_stairs_light");
    ///<summary>Yeelight Bedroom Lamp</summary>
    public DeviceTrackerEntity YeelightBedroomLamp => new(_haContext, "device_tracker.yeelight_bedroom_lamp");
    ///<summary>Yeelight Hallway Lamp</summary>
    public DeviceTrackerEntity YeelightHallwayLamp => new(_haContext, "device_tracker.yeelight_hallway_lamp");
    ///<summary>Yeelight Kitchen Lamp</summary>
    public DeviceTrackerEntity YeelightKitchenLamp => new(_haContext, "device_tracker.yeelight_kitchen_lamp");
    ///<summary>Yeelight Lounge Floor Lamp</summary>
    public DeviceTrackerEntity YeelightLoungeFloorLamp => new(_haContext, "device_tracker.yeelight_lounge_floor_lamp");
    ///<summary>Yeelight Lounge Lamp</summary>
    public DeviceTrackerEntity YeelightLoungeLamp => new(_haContext, "device_tracker.yeelight_lounge_lamp");
    ///<summary>Yeelight Snug Floor Lamp</summary>
    public DeviceTrackerEntity YeelightSnugFloorLamp => new(_haContext, "device_tracker.yeelight_snug_floor_lamp");
    ///<summary>yeelink-light-color1_miio313150241</summary>
    public DeviceTrackerEntity YeelinkLightColor1Miio313150241 => new(_haContext, "device_tracker.yeelink_light_color1_miio313150241");
}

public partial class EntityControllerEntities
{
    private readonly IHaContext _haContext;
    public EntityControllerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Snug Floor Lamp Controller</summary>
    public EntityControllerEntity SnugFloorLampController => new(_haContext, "entity_controller.snug_floor_lamp_controller");
    ///<summary>Snug Light Controller</summary>
    public EntityControllerEntity SnugLightController => new(_haContext, "entity_controller.snug_light_controller");
}

public partial class FanEntities
{
    private readonly IHaContext _haContext;
    public FanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bathroom Fan</summary>
    public FanEntity Bathroom => new(_haContext, "fan.bathroom");
    ///<summary>Extractor Fan</summary>
    public FanEntity Extractor => new(_haContext, "fan.extractor");
}

public partial class GroupEntities
{
    private readonly IHaContext _haContext;
    public GroupEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Basement</summary>
    public GroupEntity Basement => new(_haContext, "group.basement");
    ///<summary>Basement Controllers</summary>
    public GroupEntity BasementControllers => new(_haContext, "group.basement_controllers");
    ///<summary>Basement Hall</summary>
    public GroupEntity BasementHall => new(_haContext, "group.basement_hall");
    ///<summary>Basement Hall Controllers</summary>
    public GroupEntity BasementHallControllers => new(_haContext, "group.basement_hall_controllers");
    ///<summary>Basement Hall Overrides</summary>
    public GroupEntity BasementHallOverrides => new(_haContext, "group.basement_hall_overrides");
    ///<summary>Basement Overrides</summary>
    public GroupEntity BasementOverrides => new(_haContext, "group.basement_overrides");
    ///<summary>Bathroom</summary>
    public GroupEntity Bathroom => new(_haContext, "group.bathroom");
    ///<summary>Bathroom Controllers</summary>
    public GroupEntity BathroomControllers => new(_haContext, "group.bathroom_controllers");
    ///<summary>Bathroom Overrides</summary>
    public GroupEntity BathroomOverrides => new(_haContext, "group.bathroom_overrides");
    ///<summary>Bedroom</summary>
    public GroupEntity Bedroom => new(_haContext, "group.bedroom");
    ///<summary>Bedroom Overrides</summary>
    public GroupEntity BedroomOverrides => new(_haContext, "group.bedroom_overrides");
    ///<summary>Climate Basement</summary>
    public GroupEntity ClimateBasement => new(_haContext, "group.climate_basement");
    ///<summary>Climate Downstairs</summary>
    public GroupEntity ClimateDownstairs => new(_haContext, "group.climate_downstairs");
    ///<summary>Climate Upstairs</summary>
    public GroupEntity ClimateUpstairs => new(_haContext, "group.climate_upstairs");
    ///<summary>Day Overrides</summary>
    public GroupEntity DayOverrides => new(_haContext, "group.day_overrides");
    ///<summary>Dining Room</summary>
    public GroupEntity DiningRoom => new(_haContext, "group.dining_room");
    ///<summary>Dining Room Overrides</summary>
    public GroupEntity DiningRoomOverrides => new(_haContext, "group.dining_room_overrides");
    ///<summary>Downstairs</summary>
    public GroupEntity Downstairs => new(_haContext, "group.downstairs");
    ///<summary>Downstairs Controllers</summary>
    public GroupEntity DownstairsControllers => new(_haContext, "group.downstairs_controllers");
    ///<summary>Downstairs Overrides</summary>
    public GroupEntity DownstairsOverrides => new(_haContext, "group.downstairs_overrides");
    ///<summary>Drawing Room</summary>
    public GroupEntity DrawingRoom => new(_haContext, "group.drawing_room");
    ///<summary>Drawing Room Controllers</summary>
    public GroupEntity DrawingRoomControllers => new(_haContext, "group.drawing_room_controllers");
    ///<summary>Drawing Room Overrides</summary>
    public GroupEntity DrawingRoomOverrides => new(_haContext, "group.drawing_room_overrides");
    ///<summary>Dressing room</summary>
    public GroupEntity DressingRoom => new(_haContext, "group.dressing_room");
    ///<summary>Dressing Room Controllers</summary>
    public GroupEntity DressingRoomControllers => new(_haContext, "group.dressing_room_controllers");
    ///<summary>Dressing Room Overrides</summary>
    public GroupEntity DressingRoomOverrides => new(_haContext, "group.dressing_room_overrides");
    ///<summary>Electric cabinet</summary>
    public GroupEntity ElectricCabinet => new(_haContext, "group.electric_cabinet");
    ///<summary>Entity Controllers</summary>
    public GroupEntity EntityControllers => new(_haContext, "group.entity_controllers");
    ///<summary>Entity Overrides</summary>
    public GroupEntity EntityOverrides => new(_haContext, "group.entity_overrides");
    ///<summary>Doorbell</summary>
    public GroupEntity EspDoorbell => new(_haContext, "group.esp_doorbell");
    ///<summary>Evening Overrides</summary>
    public GroupEntity EveningOverrides => new(_haContext, "group.evening_overrides");
    ///<summary>Guest Room</summary>
    public GroupEntity GuestBedroom => new(_haContext, "group.guest_bedroom");
    ///<summary>Guest Room Controllers</summary>
    public GroupEntity GuestRoomControllers => new(_haContext, "group.guest_room_controllers");
    ///<summary>Guest Room Overrides</summary>
    public GroupEntity GuestRoomOverrides => new(_haContext, "group.guest_room_overrides");
    ///<summary>Hallway</summary>
    public GroupEntity Hallway => new(_haContext, "group.hallway");
    ///<summary>Hallway Controllers</summary>
    public GroupEntity HallwayControllers => new(_haContext, "group.hallway_controllers");
    ///<summary>Hallway Overrides</summary>
    public GroupEntity HallwayOverrides => new(_haContext, "group.hallway_overrides");
    ///<summary>Kitchen</summary>
    public GroupEntity Kitchen => new(_haContext, "group.kitchen");
    ///<summary>Kitchen Controllers</summary>
    public GroupEntity KitchenControllers => new(_haContext, "group.kitchen_controllers");
    ///<summary>Kitchen Overrides</summary>
    public GroupEntity KitchenOverrides => new(_haContext, "group.kitchen_overrides");
    ///<summary>Landing</summary>
    public GroupEntity Landing => new(_haContext, "group.landing");
    ///<summary>Landing Controllers</summary>
    public GroupEntity LandingControllers => new(_haContext, "group.landing_controllers");
    ///<summary>Landing Overrides</summary>
    public GroupEntity LandingOverrides => new(_haContext, "group.landing_overrides");
    ///<summary>Lounge</summary>
    public GroupEntity Lounge => new(_haContext, "group.lounge");
    ///<summary>Lounge Controllers</summary>
    public GroupEntity LoungeControllers => new(_haContext, "group.lounge_controllers");
    ///<summary>Lounge Overrides</summary>
    public GroupEntity LoungeOverrides => new(_haContext, "group.lounge_overrides");
    ///<summary>Bedroom Echo Show</summary>
    public GroupEntity MediaBedroomEchoShow => new(_haContext, "group.media_bedroom_echo_show");
    ///<summary>Dining Room Echo Input</summary>
    public GroupEntity MediaDiningRoomEchoInput => new(_haContext, "group.media_dining_room_echo_input");
    ///<summary>Drawing Room Echo Dot</summary>
    public GroupEntity MediaDrawingRoomEchoDot => new(_haContext, "group.media_drawing_room_echo_dot");
    ///<summary>Dressing Room Echo Dot</summary>
    public GroupEntity MediaDressingRoomEchoDot => new(_haContext, "group.media_dressing_room_echo_dot");
    ///<summary>Guest Room Echo Show</summary>
    public GroupEntity MediaGuestRoomEchoShow => new(_haContext, "group.media_guest_room_echo_show");
    ///<summary>Hallway Tablet</summary>
    public GroupEntity MediaHallwayTablet => new(_haContext, "group.media_hallway_tablet");
    ///<summary>Kitchen Echo Show</summary>
    public GroupEntity MediaKitchenEchoShow => new(_haContext, "group.media_kitchen_echo_show");
    ///<summary>Landing Tablet</summary>
    public GroupEntity MediaLandingTablet => new(_haContext, "group.media_landing_tablet");
    ///<summary>Lounge Echo Plus</summary>
    public GroupEntity MediaLoungeEchoPlus => new(_haContext, "group.media_lounge_echo_plus");
    ///<summary>Snug Echo Input</summary>
    public GroupEntity MediaSnugEchoInput => new(_haContext, "group.media_snug_echo_input");
    ///<summary>Utility Room Echo Dot</summary>
    public GroupEntity MediaUtilityRoomEchoDot => new(_haContext, "group.media_utility_room_echo_dot");
    ///<summary>Night Overrides</summary>
    public GroupEntity NightOverrides => new(_haContext, "group.night_overrides");
    ///<summary>Outside</summary>
    public GroupEntity Outside => new(_haContext, "group.outside");
    ///<summary>Patio</summary>
    public GroupEntity Patio => new(_haContext, "group.patio");
    ///<summary>Person Locations</summary>
    public GroupEntity PersonHomeAway => new(_haContext, "group.person_home_away");
    ///<summary>Person Locations</summary>
    public GroupEntity PersonLocations => new(_haContext, "group.person_locations");
    ///<summary>Porch</summary>
    public GroupEntity Porch => new(_haContext, "group.porch");
    ///<summary>Snug</summary>
    public GroupEntity Snug => new(_haContext, "group.snug");
    ///<summary>Snug Controllers</summary>
    public GroupEntity SnugControllers => new(_haContext, "group.snug_controllers");
    ///<summary>Snug Overrides</summary>
    public GroupEntity SnugOverrides => new(_haContext, "group.snug_overrides");
    ///<summary>Studio</summary>
    public GroupEntity Studio => new(_haContext, "group.studio");
    ///<summary>Studio Controllers</summary>
    public GroupEntity StudioControllers => new(_haContext, "group.studio_controllers");
    ///<summary>Studio Overrides</summary>
    public GroupEntity StudioOverrides => new(_haContext, "group.studio_overrides");
    ///<summary>Toilet</summary>
    public GroupEntity Toilet => new(_haContext, "group.toilet");
    ///<summary>Toilet Controllers</summary>
    public GroupEntity ToiletControllers => new(_haContext, "group.toilet_controllers");
    ///<summary>Toilet Overrides</summary>
    public GroupEntity ToiletOverrides => new(_haContext, "group.toilet_overrides");
    ///<summary>Upstairs</summary>
    public GroupEntity Upstairs => new(_haContext, "group.upstairs");
    ///<summary>Upstairs Controllers</summary>
    public GroupEntity UpstairsControllers => new(_haContext, "group.upstairs_controllers");
    ///<summary>Upstairs Overrides</summary>
    public GroupEntity UpstairsOverrides => new(_haContext, "group.upstairs_overrides");
    ///<summary>Utility Controllers</summary>
    public GroupEntity UtilityControllers => new(_haContext, "group.utility_controllers");
    ///<summary>Utility Overrides</summary>
    public GroupEntity UtilityOverrides => new(_haContext, "group.utility_overrides");
    ///<summary>Utility Room</summary>
    public GroupEntity UtilityRoom => new(_haContext, "group.utility_room");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bed State Control Enabled</summary>
    public InputBooleanEntity BedStateControlEnabled => new(_haContext, "input_boolean.bed_state_control_enabled");
    ///<summary>Bedroom Mode Control Enabled</summary>
    public InputBooleanEntity BedroomModeControlEnabled => new(_haContext, "input_boolean.bedroom_mode_control_enabled");
    ///<summary>Brightness Control Enabled</summary>
    public InputBooleanEntity BrightnessControlEnabled => new(_haContext, "input_boolean.brightness_control_enabled");
    ///<summary>In Bed</summary>
    public InputBooleanEntity InBed => new(_haContext, "input_boolean.in_bed");
    ///<summary>in_shower</summary>
    public InputBooleanEntity InShower => new(_haContext, "input_boolean.in_shower");
    ///<summary>Light Control Mode Enabled</summary>
    public InputBooleanEntity LightControlModeEnabled => new(_haContext, "input_boolean.light_control_mode_enabled");
    ///<summary>Location Mode Enabled</summary>
    public InputBooleanEntity LocationModeEnabled => new(_haContext, "input_boolean.location_mode_enabled");
    ///<summary>Lounge Lamp Automation</summary>
    public InputBooleanEntity LoungeLampAutomation => new(_haContext, "input_boolean.lounge_lamp_automation");
    ///<summary>Lounge Light Automation</summary>
    public InputBooleanEntity LoungeLightAutomation => new(_haContext, "input_boolean.lounge_light_automation");
    ///<summary>netdaemon_basement_basement_lights</summary>
    public InputBooleanEntity NetdaemonBasementBasementLights => new(_haContext, "input_boolean.netdaemon_basement_basement_lights");
    ///<summary>netdaemon_basement_dining_room_light</summary>
    public InputBooleanEntity NetdaemonBasementDiningRoomLight => new(_haContext, "input_boolean.netdaemon_basement_dining_room_light");
    ///<summary>netdaemon_downstairs_downstairs_lights</summary>
    public InputBooleanEntity NetdaemonDownstairsDownstairsLights => new(_haContext, "input_boolean.netdaemon_downstairs_downstairs_lights");
    ///<summary>netdaemon_net_daemon_apps_automations_states_alarm_app_controller</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAutomationsStatesAlarmAppController => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_automations_states_alarm_app_controller");
    ///<summary>netdaemon_net_daemon_apps_automations_states_bed_state_controller</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAutomationsStatesBedStateController => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_automations_states_bed_state_controller");
    ///<summary>netdaemon_net_daemon_apps_automations_states_bedroom_mode_controller</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAutomationsStatesBedroomModeController => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_automations_states_bedroom_mode_controller");
    ///<summary>netdaemon_net_daemon_apps_automations_states_brightness_controller</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAutomationsStatesBrightnessController => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_automations_states_brightness_controller");
    ///<summary>netdaemon_net_daemon_apps_automations_states_light_control_mode_controller</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAutomationsStatesLightControlModeController => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_automations_states_light_control_mode_controller");
    ///<summary>netdaemon_net_daemon_apps_automations_states_location_mode_controller</summary>
    public InputBooleanEntity NetdaemonNetDaemonAppsAutomationsStatesLocationModeController => new(_haContext, "input_boolean.netdaemon_net_daemon_apps_automations_states_location_mode_controller");
    ///<summary>netdaemon_outside_patio_back_door_light_control</summary>
    public InputBooleanEntity NetdaemonOutsidePatioBackDoorLightControl => new(_haContext, "input_boolean.netdaemon_outside_patio_back_door_light_control");
    ///<summary>netdaemon_scene_bedroom_scenes</summary>
    public InputBooleanEntity NetdaemonSceneBedroomScenes => new(_haContext, "input_boolean.netdaemon_scene_bedroom_scenes");
    ///<summary>netdaemon_states_light_modes</summary>
    public InputBooleanEntity NetdaemonStatesLightModes => new(_haContext, "input_boolean.netdaemon_states_light_modes");
    ///<summary>netdaemon_time_of_day_control_app</summary>
    public InputBooleanEntity NetdaemonTimeOfDayControlApp => new(_haContext, "input_boolean.netdaemon_time_of_day_control_app");
    ///<summary>netdaemon_upstairs_upstairs_lights</summary>
    public InputBooleanEntity NetdaemonUpstairsUpstairsLights => new(_haContext, "input_boolean.netdaemon_upstairs_upstairs_lights");
    ///<summary>Reload Netdaemon</summary>
    public InputBooleanEntity ReloadNetdaemon => new(_haContext, "input_boolean.reload_netdaemon");
    ///<summary>Snug Floor Lamp Constrained</summary>
    public InputBooleanEntity SnugFloorLampConstrained => new(_haContext, "input_boolean.snug_floor_lamp_constrained");
    ///<summary>Snug Light Constrained</summary>
    public InputBooleanEntity SnugLightConstrained => new(_haContext, "input_boolean.snug_light_constrained");
    ///<summary>Time Of Day Enabled</summary>
    public InputBooleanEntity TimeOfDayEnabled => new(_haContext, "input_boolean.time_of_day_enabled");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Kitchen Appliance Beep</summary>
    public InputButtonEntity KitchenApplianceBeep => new(_haContext, "input_button.kitchen_appliance_beep");
    ///<summary>Smoke Alarm Beep</summary>
    public InputButtonEntity SmokeAlarmBeep => new(_haContext, "input_button.smoke_alarm_beep");
    ///<summary>Utilitiy Appliance Beep</summary>
    public InputButtonEntity UtilitiyApplianceBeep => new(_haContext, "input_button.utilitiy_appliance_beep");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Evening Feed Time</summary>
    public InputDatetimeEntity EveningFeedTime => new(_haContext, "input_datetime.evening_feed_time");
    ///<summary>Morning Feed Time</summary>
    public InputDatetimeEntity MorningFeedTime => new(_haContext, "input_datetime.morning_feed_time");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Brightness Bright Threshold</summary>
    public InputNumberEntity BrightnessBrightThreshold => new(_haContext, "input_number.brightness_bright_threshold");
    ///<summary>Brightness Dark Threshold</summary>
    public InputNumberEntity BrightnessDarkThreshold => new(_haContext, "input_number.brightness_dark_threshold");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bathroom Mode</summary>
    public InputSelectEntity BathroomMode => new(_haContext, "input_select.bathroom_mode");
    ///<summary>Bedroom Mode</summary>
    public InputSelectEntity BedroomMode => new(_haContext, "input_select.bedroom_mode");
    ///<summary>Brightness</summary>
    public InputSelectEntity Brightness => new(_haContext, "input_select.brightness");
    ///<summary>Light Control Mode</summary>
    public InputSelectEntity LightControlMode => new(_haContext, "input_select.light_control_mode");
    ///<summary>Location Mode</summary>
    public InputSelectEntity LocationMode => new(_haContext, "input_select.location_mode");
    ///<summary>Lounge Mode</summary>
    public InputSelectEntity LoungeMode => new(_haContext, "input_select.lounge_mode");
    ///<summary>Snug Mode</summary>
    public InputSelectEntity SnugMode => new(_haContext, "input_select.snug_mode");
    ///<summary>Time Of Day</summary>
    public InputSelectEntity TimeOfDay => new(_haContext, "input_select.time_of_day");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alexa Actionable Notification Holder</summary>
    public InputTextEntity AlexaActionableNotification => new(_haContext, "input_text.alexa_actionable_notification");
    ///<summary>Guest Room Remote Last State</summary>
    public InputTextEntity GuestRoomRemoteLastState => new(_haContext, "input_text.guest_room_remote_last_state");
    ///<summary>Hallway Remote Last State</summary>
    public InputTextEntity HallwayRemoteLastState => new(_haContext, "input_text.hallway_remote_last_state");
    ///<summary>Lounge Remote Last State</summary>
    public InputTextEntity LoungeRemoteLastState => new(_haContext, "input_text.lounge_remote_last_state");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>All Lights</summary>
    public LightEntity AllLights => new(_haContext, "light.all_lights");
    ///<summary>Back Door Light</summary>
    public LightEntity BackDoor => new(_haContext, "light.back_door");
    ///<summary>Basement Hall Light</summary>
    public LightEntity BasementHall => new(_haContext, "light.basement_hall");
    ///<summary>Basement Hall Lights</summary>
    public LightEntity BasementHallLights => new(_haContext, "light.basement_hall_lights");
    ///<summary>Basement Lights</summary>
    public LightEntity BasementLights => new(_haContext, "light.basement_lights");
    ///<summary>Basement Stairs</summary>
    public LightEntity BasementStairs => new(_haContext, "light.basement_stairs");
    ///<summary>Bathroom Light</summary>
    public LightEntity Bathroom => new(_haContext, "light.bathroom");
    ///<summary>Bathroom Lights</summary>
    public LightEntity BathroomLights => new(_haContext, "light.bathroom_lights");
    ///<summary>Bedroom Light</summary>
    public LightEntity Bedroom => new(_haContext, "light.bedroom");
    ///<summary>Bedroom Lights</summary>
    public LightEntity BedroomLights => new(_haContext, "light.bedroom_lights");
    ///<summary>Bedside Lamp</summary>
    public LightEntity BedsideLamp => new(_haContext, "light.bedside_lamp");
    ///<summary>Bookshelf Light</summary>
    public LightEntity Bookshelf => new(_haContext, "light.bookshelf");
    ///<summary>Breakfast Bar Lamp</summary>
    public LightEntity BreakfastBarLamp => new(_haContext, "light.breakfast_bar_lamp");
    ///<summary>Brewery</summary>
    public LightEntity Brewery => new(_haContext, "light.brewery");
    ///<summary>Cabinet Light</summary>
    public LightEntity Cabinet => new(_haContext, "light.cabinet");
    ///<summary>Cellar Door Light</summary>
    public LightEntity CellarDoor => new(_haContext, "light.cellar_door");
    ///<summary>Decking Wall</summary>
    public LightEntity DeckingWall => new(_haContext, "light.decking_wall");
    ///<summary>Dining Room Light</summary>
    public LightEntity DiningRoom => new(_haContext, "light.dining_room");
    ///<summary>Downstairs Lights</summary>
    public LightEntity DownstairsLights => new(_haContext, "light.downstairs_lights");
    ///<summary>Drawing Room Light</summary>
    public LightEntity DrawingRoom => new(_haContext, "light.drawing_room");
    ///<summary>Drawing Room Lights</summary>
    public LightEntity DrawingRoomLights => new(_haContext, "light.drawing_room_lights");
    ///<summary>Dressing Room</summary>
    public LightEntity DressingRoom => new(_haContext, "light.dressing_room");
    ///<summary>Fence Lights</summary>
    public LightEntity FenceLights => new(_haContext, "light.fence_lights");
    ///<summary>Garden Lights</summary>
    public LightEntity GardenLights => new(_haContext, "light.garden_lights");
    ///<summary>Guest Room</summary>
    public LightEntity GuestRoom => new(_haContext, "light.guest_room");
    ///<summary>Hallway Light</summary>
    public LightEntity Hallway => new(_haContext, "light.hallway");
    ///<summary>Hallway Lamp</summary>
    public LightEntity HallwayLamp => new(_haContext, "light.hallway_lamp");
    ///<summary>Hallway Lights</summary>
    public LightEntity HallwayLights => new(_haContext, "light.hallway_lights");
    ///<summary>Inside Lights</summary>
    public LightEntity InsideLights => new(_haContext, "light.inside_lights");
    ///<summary>Inside No Room Control Not Basement</summary>
    public LightEntity InsideNoRoomControlNotBasement => new(_haContext, "light.inside_no_room_control_not_basement");
    ///<summary>Kitchen Light</summary>
    public LightEntity Kitchen => new(_haContext, "light.kitchen");
    ///<summary>Kitchen Lights</summary>
    public LightEntity KitchenLights => new(_haContext, "light.kitchen_lights");
    ///<summary>Landing</summary>
    public LightEntity Landing => new(_haContext, "light.landing");
    ///<summary>Lounge Light</summary>
    public LightEntity Lounge => new(_haContext, "light.lounge");
    ///<summary>Lounge Corner Lamp</summary>
    public LightEntity LoungeCornerLamp => new(_haContext, "light.lounge_corner_lamp");
    ///<summary>Lounge Floor Lamp</summary>
    public LightEntity LoungeFloorLamp => new(_haContext, "light.lounge_floor_lamp");
    ///<summary>Lounge Lamps</summary>
    public LightEntity LoungeLamps => new(_haContext, "light.lounge_lamps");
    ///<summary>Lounge Lights</summary>
    public LightEntity LoungeLights => new(_haContext, "light.lounge_lights");
    ///<summary>Mirror Light</summary>
    public LightEntity Mirror => new(_haContext, "light.mirror");
    ///<summary>Outside Lights</summary>
    public LightEntity OutsideLights => new(_haContext, "light.outside_lights");
    ///<summary>Patio Light</summary>
    public LightEntity Patio => new(_haContext, "light.patio");
    ///<summary>Patio Floor Lamp</summary>
    public LightEntity PatioFloorLamp => new(_haContext, "light.patio_floor_lamp");
    ///<summary>Patio Lights</summary>
    public LightEntity PatioLights => new(_haContext, "light.patio_lights");
    ///<summary>Porch Light</summary>
    public LightEntity Porch => new(_haContext, "light.porch");
    ///<summary>RGB Lights</summary>
    public LightEntity RgbLights => new(_haContext, "light.rgb_lights");
    ///<summary>Shed</summary>
    public LightEntity Shed => new(_haContext, "light.shed");
    ///<summary>Snug Light</summary>
    public LightEntity Snug => new(_haContext, "light.snug");
    ///<summary>Snug Floor Lamp</summary>
    public LightEntity SnugFloorLamp => new(_haContext, "light.snug_floor_lamp");
    ///<summary>Snug Led Strip</summary>
    public LightEntity SnugLedStrip => new(_haContext, "light.snug_led_strip");
    ///<summary>Snug Lights</summary>
    public LightEntity SnugLights => new(_haContext, "light.snug_lights");
    ///<summary>Sonoff Basement 1 Blue LED</summary>
    public LightEntity SonoffBasement1BlueLed => new(_haContext, "light.sonoff_basement_1_blue_led");
    ///<summary>Sonoff Basement 2 Blue LED</summary>
    public LightEntity SonoffBasement2BlueLed => new(_haContext, "light.sonoff_basement_2_blue_led");
    ///<summary>Sonoff Downstairs 1 Blue LED</summary>
    public LightEntity SonoffDownstairs1BlueLed => new(_haContext, "light.sonoff_downstairs_1_blue_led");
    ///<summary>Sonoff Downstairs 2 Blue LED</summary>
    public LightEntity SonoffDownstairs2BlueLed => new(_haContext, "light.sonoff_downstairs_2_blue_led");
    ///<summary>Sonoff Outside 1 Blue LED</summary>
    public LightEntity SonoffOutside1BlueLed => new(_haContext, "light.sonoff_outside_1_blue_led");
    ///<summary>Sonoff Upstairs 2 Blue LED</summary>
    public LightEntity SonoffUpstairs2BlueLed => new(_haContext, "light.sonoff_upstairs_2_blue_led");
    ///<summary>Store Light</summary>
    public LightEntity Store => new(_haContext, "light.store");
    ///<summary>Studio Light</summary>
    public LightEntity Studio => new(_haContext, "light.studio");
    ///<summary>studio-bluetooth-proxy LED 1</summary>
    public LightEntity StudioBluetoothProxyLed1 => new(_haContext, "light.studio_bluetooth_proxy_led_1");
    ///<summary>Toilet Light</summary>
    public LightEntity Toilet => new(_haContext, "light.toilet");
    ///<summary>Upstairs Lights</summary>
    public LightEntity UpstairsLights => new(_haContext, "light.upstairs_lights");
    ///<summary>Utility Room Light</summary>
    public LightEntity UtilityRoom => new(_haContext, "light.utility_room");
    ///<summary>Utility Room Lights</summary>
    public LightEntity UtilityRoomLights => new(_haContext, "light.utility_room_lights");
    ///<summary>Without Room Control</summary>
    public LightEntity WithoutRoomControl => new(_haContext, "light.without_room_control");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>All Speakers</summary>
    public MediaPlayerEntity AllSpeakers => new(_haContext, "media_player.all_speakers");
    ///<summary>Andrew&apos;s Echo Buds</summary>
    public MediaPlayerEntity AndrewSEchoBuds => new(_haContext, "media_player.andrew_s_echo_buds");
    ///<summary>Andrew&apos;s Echo Studio</summary>
    public MediaPlayerEntity AndrewSEchoStudio => new(_haContext, "media_player.andrew_s_echo_studio");
    ///<summary>Snug Fire TV</summary>
    public MediaPlayerEntity AndrewSFireTv => new(_haContext, "media_player.andrew_s_fire_tv");
    ///<summary>Andrew&apos;s Samsung TV 2020-U</summary>
    public MediaPlayerEntity AndrewSSamsungTv2020U => new(_haContext, "media_player.andrew_s_samsung_tv_2020_u");
    ///<summary>Basement</summary>
    public MediaPlayerEntity Basement => new(_haContext, "media_player.basement");
    ///<summary>Bedroom Echo Show</summary>
    public MediaPlayerEntity BedroomEchoShow => new(_haContext, "media_player.bedroom_echo_show");
    ///<summary>Dining Room Echo Input</summary>
    public MediaPlayerEntity DiningRoomEchoInput => new(_haContext, "media_player.dining_room_echo_input");
    ///<summary>Dining Room Radio</summary>
    public MediaPlayerEntity DiningRoomRadio => new(_haContext, "media_player.dining_room_radio");
    ///<summary>Downstairs</summary>
    public MediaPlayerEntity Downstairs => new(_haContext, "media_player.downstairs");
    ///<summary>Drawing Room Echo Dot</summary>
    public MediaPlayerEntity DrawingRoomEchoDot => new(_haContext, "media_player.drawing_room_echo_dot");
    ///<summary>Dressing Room Echo Dot</summary>
    public MediaPlayerEntity DressingRoomEchoDot => new(_haContext, "media_player.dressing_room_echo_dot");
    ///<summary>Garden</summary>
    public MediaPlayerEntity Garden => new(_haContext, "media_player.garden");
    ///<summary>Guest Room Echo Show</summary>
    public MediaPlayerEntity GuestRoomEchoShow => new(_haContext, "media_player.guest_room_echo_show");
    ///<summary>Hall Tablet</summary>
    public MediaPlayerEntity HallTablet => new(_haContext, "media_player.hall_tablet");
    ///<summary>Hallway Tablet</summary>
    public MediaPlayerEntity HallwayTablet => new(_haContext, "media_player.hallway_tablet");
    ///<summary>Kitchen Camera Speaker</summary>
    public MediaPlayerEntity KitchenCameraSpeaker => new(_haContext, "media_player.kitchen_camera_speaker");
    ///<summary>Kitchen Echo Show</summary>
    public MediaPlayerEntity KitchenEchoShow => new(_haContext, "media_player.kitchen_echo_show");
    ///<summary>Landing Tablet</summary>
    public MediaPlayerEntity LandingTablet => new(_haContext, "media_player.landing_tablet");
    ///<summary>Lounge Echo Plus</summary>
    public MediaPlayerEntity LoungeEchoPlus => new(_haContext, "media_player.lounge_echo_plus");
    ///<summary>Lounge Fire TV</summary>
    public MediaPlayerEntity LoungeFireTv => new(_haContext, "media_player.lounge_fire_tv");
    ///<summary>Offices</summary>
    public MediaPlayerEntity Offices => new(_haContext, "media_player.offices");
    ///<summary>Patio</summary>
    public MediaPlayerEntity Patio => new(_haContext, "media_player.patio");
    ///<summary>Shed Echo Input</summary>
    public MediaPlayerEntity ShedEchoInput => new(_haContext, "media_player.shed_echo_input");
    ///<summary>Snug Echo Show</summary>
    public MediaPlayerEntity SnugEchoShow => new(_haContext, "media_player.snug_echo_show");
    ///<summary>Projector</summary>
    public MediaPlayerEntity SnugProjector => new(_haContext, "media_player.snug_projector");
    ///<summary>Snug Projector</summary>
    public MediaPlayerEntity SnugProjector2 => new(_haContext, "media_player.snug_projector_2");
    public MediaPlayerEntity SnugRadio => new(_haContext, "media_player.snug_radio");
    ///<summary>Spotify Andrew McInnes</summary>
    public MediaPlayerEntity SpotifyAndrewMcinnes => new(_haContext, "media_player.spotify_andrew_mcinnes");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice => new(_haContext, "media_player.this_device");
    ///<summary>Upstairs</summary>
    public MediaPlayerEntity Upstairs => new(_haContext, "media_player.upstairs");
    ///<summary>Utility Room Echo Dot</summary>
    public MediaPlayerEntity UtilityRoomEchoDot => new(_haContext, "media_player.utility_room_echo_dot");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>ESPresense Bedroom Absorption</summary>
    public NumberEntity EspresenseBedroomAbsorption => new(_haContext, "number.espresense_bedroom_absorption");
    ///<summary>ESPresense Bedroom Max Distance</summary>
    public NumberEntity EspresenseBedroomMaxDistance => new(_haContext, "number.espresense_bedroom_max_distance");
    ///<summary>ESPresense DrawingRoom Max Distance</summary>
    public NumberEntity EspresenseDrawingroomMaxDistance => new(_haContext, "number.espresense_drawingroom_max_distance");
    ///<summary>ESPresense Kitchen Absorption</summary>
    public NumberEntity EspresenseKitchenAbsorption => new(_haContext, "number.espresense_kitchen_absorption");
    ///<summary>ESPresense Kitchen Max Distance</summary>
    public NumberEntity EspresenseKitchenMaxDistance => new(_haContext, "number.espresense_kitchen_max_distance");
    ///<summary>ESPresense Lounge Absorption</summary>
    public NumberEntity EspresenseLoungeAbsorption => new(_haContext, "number.espresense_lounge_absorption");
    ///<summary>ESPresense Lounge Max Distance</summary>
    public NumberEntity EspresenseLoungeMaxDistance => new(_haContext, "number.espresense_lounge_max_distance");
    ///<summary>ESPresense Snug Absorption</summary>
    public NumberEntity EspresenseSnugAbsorption => new(_haContext, "number.espresense_snug_absorption");
    ///<summary>ESPresense Snug Max Distance</summary>
    public NumberEntity EspresenseSnugMaxDistance => new(_haContext, "number.espresense_snug_max_distance");
    ///<summary>studio-bluetooth-proxy Max Distance</summary>
    public NumberEntity EspresenseStudioMaxDistance => new(_haContext, "number.espresense_studio_max_distance");
    ///<summary>Hallway Tablet Screen brightness</summary>
    public NumberEntity HallwayTabletScreenBrightness => new(_haContext, "number.hallway_tablet_screen_brightness");
    ///<summary>Hallway Tablet Screen off timer</summary>
    public NumberEntity HallwayTabletScreenOffTimer => new(_haContext, "number.hallway_tablet_screen_off_timer");
    ///<summary>Hallway Tablet Screensaver brightness</summary>
    public NumberEntity HallwayTabletScreensaverBrightness => new(_haContext, "number.hallway_tablet_screensaver_brightness");
    ///<summary>Hallway Tablet Screensaver timer</summary>
    public NumberEntity HallwayTabletScreensaverTimer => new(_haContext, "number.hallway_tablet_screensaver_timer");
    ///<summary>nspanel Display Brightness</summary>
    public NumberEntity NspanelDisplayBrightness => new(_haContext, "number.nspanel_display_brightness");
    ///<summary>nspanel Display Brightness Dimdown</summary>
    public NumberEntity NspanelDisplayBrightnessDimdown => new(_haContext, "number.nspanel_display_brightness_dimdown");
    ///<summary>nspanel Page Timeout</summary>
    public NumberEntity NspanelPageTimeout => new(_haContext, "number.nspanel_page_timeout");
    ///<summary>nspanel Temperature Correction</summary>
    public NumberEntity NspanelTemperatureCorrection => new(_haContext, "number.nspanel_temperature_correction");
    ///<summary>Cat Feeder Feed</summary>
    public NumberEntity RojecoPetFeederFeed => new(_haContext, "number.rojeco_pet_feeder_feed");
    ///<summary>studio-bluetooth-proxy Absorption</summary>
    public NumberEntity StudioBluetoothProxyAbsorption => new(_haContext, "number.studio_bluetooth_proxy_absorption");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Andy</summary>
    public PersonEntity Andy => new(_haContext, "person.andy");
    ///<summary>Car</summary>
    public PersonEntity Car => new(_haContext, "person.car");
    ///<summary>Claire</summary>
    public PersonEntity Claire => new(_haContext, "person.claire");
}

public partial class ProximityEntities
{
    private readonly IHaContext _haContext;
    public ProximityEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>home</summary>
    public ProximityEntity Home => new(_haContext, "proximity.home");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Projector</summary>
    public RemoteEntity SnugProjector => new(_haContext, "remote.snug_projector");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Awake</summary>
    public SceneEntity Awake => new(_haContext, "scene.awake");
    ///<summary>Bathroom Normal</summary>
    public SceneEntity BathroomNormal => new(_haContext, "scene.bathroom_normal");
    ///<summary>Cleaning</summary>
    public SceneEntity Cleaning => new(_haContext, "scene.cleaning");
    ///<summary>Get Ready For Bed</summary>
    public SceneEntity GetReadyForBed => new(_haContext, "scene.get_ready_for_bed");
    ///<summary>Get Up</summary>
    public SceneEntity GetUp => new(_haContext, "scene.get_up");
    ///<summary>Lighting Ambient</summary>
    public SceneEntity LightingAmbient => new(_haContext, "scene.lighting_ambient");
    ///<summary>Lighting Automatic</summary>
    public SceneEntity LightingAutomatic => new(_haContext, "scene.lighting_automatic");
    ///<summary>Lighting Bright</summary>
    public SceneEntity LightingBright => new(_haContext, "scene.lighting_bright");
    ///<summary>Lighting Day</summary>
    public SceneEntity LightingDay => new(_haContext, "scene.lighting_day");
    ///<summary>Lighting Evening</summary>
    public SceneEntity LightingEvening => new(_haContext, "scene.lighting_evening");
    ///<summary>Lighting Manual</summary>
    public SceneEntity LightingManual => new(_haContext, "scene.lighting_manual");
    ///<summary>Lighting Night</summary>
    public SceneEntity LightingNight => new(_haContext, "scene.lighting_night");
    ///<summary>Lights Up</summary>
    public SceneEntity LightsUp => new(_haContext, "scene.lights_up");
    ///<summary>Lounge Normal</summary>
    public SceneEntity LoungeNormal => new(_haContext, "scene.lounge_normal");
    ///<summary>Pre Movie</summary>
    public SceneEntity PreMovie => new(_haContext, "scene.pre_movie");
    ///<summary>Showering</summary>
    public SceneEntity Showering => new(_haContext, "scene.showering");
    ///<summary>Sleeping</summary>
    public SceneEntity Sleeping => new(_haContext, "scene.sleeping");
    ///<summary>Waking</summary>
    public SceneEntity Waking => new(_haContext, "scene.waking");
    ///<summary>Watch Movie</summary>
    public SceneEntity WatchMovie => new(_haContext, "scene.watch_movie");
    ///<summary>Watch TV</summary>
    public SceneEntity WatchTv => new(_haContext, "scene.watch_tv");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Triggered</summary>
    public ScriptEntity AlarmTriggered => new(_haContext, "script.alarm_triggered");
    ///<summary>Doorbell Alexa</summary>
    public ScriptEntity DoorbellAlexa => new(_haContext, "script.doorbell_alexa");
    ///<summary>Entity Controller Reset</summary>
    public ScriptEntity EntityControllerReset => new(_haContext, "script.entity_controller_reset");
    ///<summary>Feed Cats</summary>
    public ScriptEntity FeedCats => new(_haContext, "script.feed_cats");
    ///<summary>Light Effect Continuous</summary>
    public ScriptEntity LightEffectContinuous => new(_haContext, "script.light_effect_continuous");
    ///<summary>Light Effect Timed</summary>
    public ScriptEntity LightEffectTimed => new(_haContext, "script.light_effect_timed");
    ///<summary>activate_alexa_actionable_notification</summary>
    public ScriptEntity NewScript => new(_haContext, "script.new_script");
    ///<summary>Notify Alexa Everywhere</summary>
    public ScriptEntity NotifyAlexaEverywhere => new(_haContext, "script.notify_alexa_everywhere");
    ///<summary>Notify All</summary>
    public ScriptEntity NotifyAll => new(_haContext, "script.notify_all");
    ///<summary>Notify Pushbullet</summary>
    public ScriptEntity NotifyPushbullet => new(_haContext, "script.notify_pushbullet");
    ///<summary>Room Controller Reset</summary>
    public ScriptEntity RoomControllerReset => new(_haContext, "script.room_controller_reset");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Coffee Machine Power-on behavior</summary>
    public SelectEntity CoffeeMachinePowerOnBehavior2 => new(_haContext, "select.coffee_machine_power_on_behavior_2");
    ///<summary>Display Cabinet Light Power-on behavior</summary>
    public SelectEntity DisplayCabinetLightPowerOnBehavior => new(_haContext, "select.display_cabinet_light_power_on_behavior");
    ///<summary>Guest Room Bedside Lamp Power-on behavior</summary>
    public SelectEntity GuestRoomBedsideLampPowerOnBehavior => new(_haContext, "select.guest_room_bedside_lamp_power_on_behavior");
    ///<summary>Shed Temperature Display Units</summary>
    public SelectEntity ShedTemperatureDisplayUnits => new(_haContext, "select.shed_temperature_display_units");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Andrew&apos;s Echo Buds next Reminder</summary>
    public SensorEntity AndrewSEchoBudsNextReminder => new(_haContext, "sensor.andrew_s_echo_buds_next_reminder");
    ///<summary>Snug Fire TV next Alarm</summary>
    public SensorEntity AndrewSFireTvNextAlarm => new(_haContext, "sensor.andrew_s_fire_tv_next_alarm");
    ///<summary>Snug Fire TV next Reminder</summary>
    public SensorEntity AndrewSFireTvNextReminder => new(_haContext, "sensor.andrew_s_fire_tv_next_reminder");
    ///<summary>Snug Fire TV next Timer</summary>
    public SensorEntity AndrewSFireTvNextTimer => new(_haContext, "sensor.andrew_s_fire_tv_next_timer");
    ///<summary>Andrew&apos;s Samsung TV 2020-U next Alarm</summary>
    public SensorEntity AndrewSSamsungTv2020UNextAlarm => new(_haContext, "sensor.andrew_s_samsung_tv_2020_u_next_alarm");
    ///<summary>Andrew&apos;s Samsung TV 2020-U next Reminder</summary>
    public SensorEntity AndrewSSamsungTv2020UNextReminder => new(_haContext, "sensor.andrew_s_samsung_tv_2020_u_next_reminder");
    ///<summary>Andrew&apos;s Samsung TV 2020-U next Timer</summary>
    public SensorEntity AndrewSSamsungTv2020UNextTimer => new(_haContext, "sensor.andrew_s_samsung_tv_2020_u_next_timer");
    ///<summary>Andy Breathing disturbances intensity</summary>
    public SensorEntity AndyBreathingDisturbancesIntensity => new(_haContext, "sensor.andy_breathing_disturbances_intensity");
    ///<summary>Andy Last workout intensity</summary>
    public SensorEntity AndyLastWorkoutIntensity => new(_haContext, "sensor.andy_last_workout_intensity");
    ///<summary>Andy Last workout type</summary>
    public SensorEntity AndyLastWorkoutType => new(_haContext, "sensor.andy_last_workout_type");
    ///<summary>Andy Snoring</summary>
    public SensorEntity AndySnoring => new(_haContext, "sensor.andy_snoring");
    ///<summary>Andy Snoring episode count</summary>
    public SensorEntity AndySnoringEpisodeCount => new(_haContext, "sensor.andy_snoring_episode_count");
    ///<summary>Basement Alarm Panel Uptime</summary>
    public SensorEntity BasementAlarmPanelUptime => new(_haContext, "sensor.basement_alarm_panel_uptime");
    ///<summary>Basement Hall Camera Infrared Mode</summary>
    public SensorEntity BasementHallCameraInfraredMode => new(_haContext, "sensor.basement_hall_camera_infrared_mode");
    ///<summary>Basement Hall Camera Last Motion Detected</summary>
    public SensorEntity BasementHallCameraLastMotionDetected => new(_haContext, "sensor.basement_hall_camera_last_motion_detected");
    ///<summary>Basement Hall Camera Recording Mode</summary>
    public SensorEntity BasementHallCameraRecordingMode => new(_haContext, "sensor.basement_hall_camera_recording_mode");
    ///<summary>Basement Hall Camera Uptime</summary>
    public SensorEntity BasementHallCameraUptime => new(_haContext, "sensor.basement_hall_camera_uptime");
    ///<summary>Bedroom Echo Show next Alarm</summary>
    public SensorEntity BedroomEchoShowNextAlarm => new(_haContext, "sensor.bedroom_echo_show_next_alarm");
    ///<summary>Bedroom Echo Show next Reminder</summary>
    public SensorEntity BedroomEchoShowNextReminder => new(_haContext, "sensor.bedroom_echo_show_next_reminder");
    ///<summary>Bedroom Echo Show next Timer</summary>
    public SensorEntity BedroomEchoShowNextTimer => new(_haContext, "sensor.bedroom_echo_show_next_timer");
    ///<summary>Black bin</summary>
    public SensorEntity BlackBin => new(_haContext, "sensor.black_bin");
    ///<summary>Blue bin</summary>
    public SensorEntity BlueBin => new(_haContext, "sensor.blue_bin");
    ///<summary>Brother MFC-J5910DW CUPS</summary>
    public SensorEntity BrotherMfcJ5910dwCups => new(_haContext, "sensor.brother_mfc_j5910dw_cups");
    ///<summary>Brown bin</summary>
    public SensorEntity BrownBin => new(_haContext, "sensor.brown_bin");
    ///<summary>cat-feeder Uptime</summary>
    public SensorEntity CatFeederUptime2 => new(_haContext, "sensor.cat_feeder_uptime_2");
    ///<summary>Claire Breathing disturbances intensity</summary>
    public SensorEntity ClaireBreathingDisturbancesIntensity => new(_haContext, "sensor.claire_breathing_disturbances_intensity");
    ///<summary>Claire Snoring</summary>
    public SensorEntity ClaireSnoring => new(_haContext, "sensor.claire_snoring");
    ///<summary>Claire Snoring episode count</summary>
    public SensorEntity ClaireSnoringEpisodeCount => new(_haContext, "sensor.claire_snoring_episode_count");
    ///<summary>Claire’s iPhone Activity</summary>
    public SensorEntity ClairesIphoneActivity => new(_haContext, "sensor.claires_iphone_activity");
    ///<summary>Claire’s iPhone Battery State</summary>
    public SensorEntity ClairesIphoneBatteryState => new(_haContext, "sensor.claires_iphone_battery_state");
    ///<summary>Claire’s iPhone BSSID</summary>
    public SensorEntity ClairesIphoneBssid => new(_haContext, "sensor.claires_iphone_bssid");
    ///<summary>Claire’s iPhone Connection Type</summary>
    public SensorEntity ClairesIphoneConnectionType => new(_haContext, "sensor.claires_iphone_connection_type");
    ///<summary>Claire’s iPhone Geocoded Location</summary>
    public SensorEntity ClairesIphoneGeocodedLocation => new(_haContext, "sensor.claires_iphone_geocoded_location");
    ///<summary>Claire’s iPhone Last Update Trigger</summary>
    public SensorEntity ClairesIphoneLastUpdateTrigger => new(_haContext, "sensor.claires_iphone_last_update_trigger");
    ///<summary>Claire’s iPhone SIM 1</summary>
    public SensorEntity ClairesIphoneSim1 => new(_haContext, "sensor.claires_iphone_sim_1");
    ///<summary>Claire’s iPhone SSID</summary>
    public SensorEntity ClairesIphoneSsid => new(_haContext, "sensor.claires_iphone_ssid");
    ///<summary>Dining Room Echo Input next Alarm</summary>
    public SensorEntity DiningRoomEchoInputNextAlarm => new(_haContext, "sensor.dining_room_echo_input_next_alarm");
    ///<summary>Dining Room Echo Input next Reminder</summary>
    public SensorEntity DiningRoomEchoInputNextReminder => new(_haContext, "sensor.dining_room_echo_input_next_reminder");
    ///<summary>Dining Room Echo Input next Timer</summary>
    public SensorEntity DiningRoomEchoInputNextTimer => new(_haContext, "sensor.dining_room_echo_input_next_timer");
    ///<summary>Doorbell BSSID</summary>
    public SensorEntity DoorbellBssid => new(_haContext, "sensor.doorbell_bssid");
    ///<summary>Doorbell ESPHome Version</summary>
    public SensorEntity DoorbellEsphomeVersion => new(_haContext, "sensor.doorbell_esphome_version");
    ///<summary>Doorbell IP</summary>
    public SensorEntity DoorbellIp => new(_haContext, "sensor.doorbell_ip");
    ///<summary>Doorbell SSID</summary>
    public SensorEntity DoorbellSsid => new(_haContext, "sensor.doorbell_ssid");
    ///<summary>Drawing Room Echo Dot next Alarm</summary>
    public SensorEntity DrawingRoomEchoDotNextAlarm => new(_haContext, "sensor.drawing_room_echo_dot_next_alarm");
    ///<summary>Drawing Room Echo Dot next Reminder</summary>
    public SensorEntity DrawingRoomEchoDotNextReminder => new(_haContext, "sensor.drawing_room_echo_dot_next_reminder");
    ///<summary>Drawing Room Echo Dot next Timer</summary>
    public SensorEntity DrawingRoomEchoDotNextTimer => new(_haContext, "sensor.drawing_room_echo_dot_next_timer");
    ///<summary>Dressing Room Echo Dot next Alarm</summary>
    public SensorEntity DressingRoomEchoDotNextAlarm => new(_haContext, "sensor.dressing_room_echo_dot_next_alarm");
    ///<summary>Dressing Room Echo Dot next Reminder</summary>
    public SensorEntity DressingRoomEchoDotNextReminder => new(_haContext, "sensor.dressing_room_echo_dot_next_reminder");
    ///<summary>Dressing Room Echo Dot next Timer</summary>
    public SensorEntity DressingRoomEchoDotNextTimer => new(_haContext, "sensor.dressing_room_echo_dot_next_timer");
    public SensorEntity EpsonXp950Series => new(_haContext, "sensor.epson_xp_950_series");
    ///<summary>Uptime</summary>
    public SensorEntity EpsonXp950SeriesUptime => new(_haContext, "sensor.epson_xp_950_series_uptime");
    ///<summary>Green bin</summary>
    public SensorEntity GreenBin => new(_haContext, "sensor.green_bin");
    ///<summary>Guest Room Echo Show next Alarm</summary>
    public SensorEntity GuestRoomEchoShowNextAlarm => new(_haContext, "sensor.guest_room_echo_show_next_alarm");
    ///<summary>Guest Room Echo Show next Reminder</summary>
    public SensorEntity GuestRoomEchoShowNextReminder => new(_haContext, "sensor.guest_room_echo_show_next_reminder");
    ///<summary>Guest Room Echo Show next Timer</summary>
    public SensorEntity GuestRoomEchoShowNextTimer => new(_haContext, "sensor.guest_room_echo_show_next_timer");
    ///<summary>Guest Room Remote Action</summary>
    public SensorEntity GuestRoomRemoteAction => new(_haContext, "sensor.guest_room_remote_action");
    ///<summary>Guest Room Remote Click</summary>
    public SensorEntity GuestRoomRemoteClick => new(_haContext, "sensor.guest_room_remote_click");
    ///<summary>Hall Tablet next Alarm</summary>
    public SensorEntity HallTabletNextAlarm => new(_haContext, "sensor.hall_tablet_next_alarm");
    ///<summary>Hall Tablet next Reminder</summary>
    public SensorEntity HallTabletNextReminder => new(_haContext, "sensor.hall_tablet_next_reminder");
    ///<summary>Hall Tablet next Timer</summary>
    public SensorEntity HallTabletNextTimer => new(_haContext, "sensor.hall_tablet_next_timer");
    ///<summary>Hallway Camera Infrared Mode</summary>
    public SensorEntity HallwayCameraInfraredMode => new(_haContext, "sensor.hallway_camera_infrared_mode");
    ///<summary>Hallway Camera Last Motion Detected</summary>
    public SensorEntity HallwayCameraLastMotionDetected => new(_haContext, "sensor.hallway_camera_last_motion_detected");
    ///<summary>Hallway Camera Recording Mode</summary>
    public SensorEntity HallwayCameraRecordingMode => new(_haContext, "sensor.hallway_camera_recording_mode");
    ///<summary>Hallway Remote Action</summary>
    public SensorEntity HallwayRemoteAction => new(_haContext, "sensor.hallway_remote_action");
    ///<summary>Hallway Remote Click</summary>
    public SensorEntity HallwayRemoteClick => new(_haContext, "sensor.hallway_remote_click");
    ///<summary>Hallway Tablet Current page</summary>
    public SensorEntity HallwayTabletCurrentPage => new(_haContext, "sensor.hallway_tablet_current_page");
    ///<summary>Hallway Tablet Foreground app</summary>
    public SensorEntity HallwayTabletForegroundApp => new(_haContext, "sensor.hallway_tablet_foreground_app");
    ///<summary>Hallway Tablet Screen orientation</summary>
    public SensorEntity HallwayTabletScreenOrientation => new(_haContext, "sensor.hallway_tablet_screen_orientation");
    ///<summary>home.andisoft.co.uk</summary>
    public SensorEntity HomeAndisoftCoUk => new(_haContext, "sensor.home_andisoft_co_uk");
    ///<summary>Home.Guest.Wifi</summary>
    public SensorEntity HomeGuestWifi => new(_haContext, "sensor.home_guest_wifi");
    ///<summary>Home.Iot.Private_2g</summary>
    public SensorEntity HomeIotPrivate2g => new(_haContext, "sensor.home_iot_private_2g");
    ///<summary>Home.Iot.Web</summary>
    public SensorEntity HomeIotWeb => new(_haContext, "sensor.home_iot_web");
    ///<summary>Home.Iot.Web_2g</summary>
    public SensorEntity HomeIotWeb2g => new(_haContext, "sensor.home_iot_web_2g");
    ///<summary>Home.Local.Wifi</summary>
    public SensorEntity HomeLocalWifi => new(_haContext, "sensor.home_local_wifi");
    ///<summary>homeassistant</summary>
    public SensorEntity Homeassistant => new(_haContext, "sensor.homeassistant");
    ///<summary>iCloud3 Event Log</summary>
    public SensorEntity Icloud3EventLog => new(_haContext, "sensor.icloud3_event_log");
    ///<summary>iCloud3 Waze History Track</summary>
    public SensorEntity Icloud3WazehistTrack => new(_haContext, "sensor.icloud3_wazehist_track");
    ///<summary>Kitchen Camera Infrared Mode</summary>
    public SensorEntity KitchenCameraInfraredMode => new(_haContext, "sensor.kitchen_camera_infrared_mode");
    ///<summary>Kitchen Camera Last Motion Detected</summary>
    public SensorEntity KitchenCameraLastMotionDetected => new(_haContext, "sensor.kitchen_camera_last_motion_detected");
    ///<summary>Kitchen Camera Recording Mode</summary>
    public SensorEntity KitchenCameraRecordingMode => new(_haContext, "sensor.kitchen_camera_recording_mode");
    ///<summary>Kitchen Echo Show next Alarm</summary>
    public SensorEntity KitchenEchoShowNextAlarm => new(_haContext, "sensor.kitchen_echo_show_next_alarm");
    ///<summary>Kitchen Echo Show next Reminder</summary>
    public SensorEntity KitchenEchoShowNextReminder => new(_haContext, "sensor.kitchen_echo_show_next_reminder");
    ///<summary>Kitchen Echo Show next Timer</summary>
    public SensorEntity KitchenEchoShowNextTimer => new(_haContext, "sensor.kitchen_echo_show_next_timer");
    ///<summary>Landing Tablet next Alarm</summary>
    public SensorEntity LandingTabletNextAlarm => new(_haContext, "sensor.landing_tablet_next_alarm");
    ///<summary>Landing Tablet next Reminder</summary>
    public SensorEntity LandingTabletNextReminder => new(_haContext, "sensor.landing_tablet_next_reminder");
    ///<summary>Landing Tablet next Timer</summary>
    public SensorEntity LandingTabletNextTimer => new(_haContext, "sensor.landing_tablet_next_timer");
    ///<summary>local_ip</summary>
    public SensorEntity LocalIp => new(_haContext, "sensor.local_ip");
    ///<summary>Lounge Echo Plus next Alarm</summary>
    public SensorEntity LoungeEchoPlusNextAlarm => new(_haContext, "sensor.lounge_echo_plus_next_alarm");
    ///<summary>Lounge Echo Plus next Reminder</summary>
    public SensorEntity LoungeEchoPlusNextReminder => new(_haContext, "sensor.lounge_echo_plus_next_reminder");
    ///<summary>Lounge Echo Plus next Timer</summary>
    public SensorEntity LoungeEchoPlusNextTimer => new(_haContext, "sensor.lounge_echo_plus_next_timer");
    ///<summary>Lounge Fire TV next Alarm</summary>
    public SensorEntity LoungeFireTvNextAlarm => new(_haContext, "sensor.lounge_fire_tv_next_alarm");
    ///<summary>Lounge Fire TV next Reminder</summary>
    public SensorEntity LoungeFireTvNextReminder => new(_haContext, "sensor.lounge_fire_tv_next_reminder");
    ///<summary>Lounge Fire TV next Timer</summary>
    public SensorEntity LoungeFireTvNextTimer => new(_haContext, "sensor.lounge_fire_tv_next_timer");
    ///<summary>Lounge Remote Action</summary>
    public SensorEntity LoungeRemoteAction => new(_haContext, "sensor.lounge_remote_action");
    ///<summary>Lounge TV Media Input Source</summary>
    public SensorEntity LoungeTvMediaInputSource => new(_haContext, "sensor.lounge_tv_media_input_source");
    ///<summary>Lounge TV Media Playback Status</summary>
    public SensorEntity LoungeTvMediaPlaybackStatus => new(_haContext, "sensor.lounge_tv_media_playback_status");
    ///<summary>Lounge TV Tv Channel</summary>
    public SensorEntity LoungeTvTvChannel => new(_haContext, "sensor.lounge_tv_tv_channel");
    ///<summary>Lounge TV Tv Channel Name</summary>
    public SensorEntity LoungeTvTvChannelName => new(_haContext, "sensor.lounge_tv_tv_channel_name");
    ///<summary>Met Office Heaton Chapel Station name 3-hourly</summary>
    public SensorEntity MetOfficeHeatonChapelStationName3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_station_name_3_hourly");
    ///<summary>Met Office Heaton Chapel Station name daily</summary>
    public SensorEntity MetOfficeHeatonChapelStationNameDaily => new(_haContext, "sensor.met_office_heaton_chapel_station_name_daily");
    ///<summary>Met Office Heaton Chapel Visibility 3-hourly</summary>
    public SensorEntity MetOfficeHeatonChapelVisibility3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_visibility_3_hourly");
    ///<summary>Met Office Heaton Chapel Visibility daily</summary>
    public SensorEntity MetOfficeHeatonChapelVisibilityDaily => new(_haContext, "sensor.met_office_heaton_chapel_visibility_daily");
    ///<summary>Met Office Heaton Chapel Weather 3-hourly</summary>
    public SensorEntity MetOfficeHeatonChapelWeather3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_weather_3_hourly");
    ///<summary>Met Office Heaton Chapel Weather daily</summary>
    public SensorEntity MetOfficeHeatonChapelWeatherDaily => new(_haContext, "sensor.met_office_heaton_chapel_weather_daily");
    ///<summary>Met Office Heaton Chapel Wind direction 3-hourly</summary>
    public SensorEntity MetOfficeHeatonChapelWindDirection3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_wind_direction_3_hourly");
    ///<summary>Met Office Heaton Chapel Wind direction daily</summary>
    public SensorEntity MetOfficeHeatonChapelWindDirectionDaily => new(_haContext, "sensor.met_office_heaton_chapel_wind_direction_daily");
    ///<summary>Status</summary>
    public SensorEntity MfcJ5910dwStatus => new(_haContext, "sensor.mfc_j5910dw_status");
    ///<summary>Last restart</summary>
    public SensorEntity MfcJ5910dwUptime => new(_haContext, "sensor.mfc_j5910dw_uptime");
    ///<summary>myip</summary>
    public SensorEntity Myip => new(_haContext, "sensor.myip");
    ///<summary>nspanel currentpage</summary>
    public SensorEntity NspanelCurrentpage => new(_haContext, "sensor.nspanel_currentpage");
    ///<summary>nspanel Display Target Temperature</summary>
    public SensorEntity NspanelDisplayTargetTemperature => new(_haContext, "sensor.nspanel_display_target_temperature");
    ///<summary>nspanel IP</summary>
    public SensorEntity NspanelIp => new(_haContext, "sensor.nspanel_ip");
    ///<summary>nspanel Last Click</summary>
    public SensorEntity NspanelLastClick => new(_haContext, "sensor.nspanel_last_click");
    ///<summary>nspanel last click climatesettings</summary>
    public SensorEntity NspanelLastClickClimatesettings => new(_haContext, "sensor.nspanel_last_click_climatesettings");
    ///<summary>nspanel last click coversettings</summary>
    public SensorEntity NspanelLastClickCoversettings => new(_haContext, "sensor.nspanel_last_click_coversettings");
    ///<summary>nspanel last click lightsettings</summary>
    public SensorEntity NspanelLastClickLightsettings => new(_haContext, "sensor.nspanel_last_click_lightsettings");
    ///<summary>nspanel Notification Label</summary>
    public SensorEntity NspanelNotificationLabel => new(_haContext, "sensor.nspanel_notification_label");
    ///<summary>nspanel Notification Text</summary>
    public SensorEntity NspanelNotificationText => new(_haContext, "sensor.nspanel_notification_text");
    ///<summary>nspanel Settings Entity</summary>
    public SensorEntity NspanelSettingsEntity => new(_haContext, "sensor.nspanel_settings_entity");
    ///<summary>Octopus Energy Saving Session Points</summary>
    public SensorEntity OctopusEnergySavingSessionPoints => new(_haContext, "sensor.octopus_energy_saving_session_points");
    ///<summary>Patio Camera Infrared Mode</summary>
    public SensorEntity PatioCameraInfraredMode => new(_haContext, "sensor.patio_camera_infrared_mode");
    ///<summary>Patio Camera Last Motion Detected</summary>
    public SensorEntity PatioCameraLastMotionDetected => new(_haContext, "sensor.patio_camera_last_motion_detected");
    ///<summary>Patio Camera Recording Mode</summary>
    public SensorEntity PatioCameraRecordingMode => new(_haContext, "sensor.patio_camera_recording_mode");
    ///<summary>Pixel 6 Battery state</summary>
    public SensorEntity Pixel6BatteryState => new(_haContext, "sensor.pixel_6_battery_state");
    ///<summary>Pixel 6 Charger type</summary>
    public SensorEntity Pixel6ChargerType => new(_haContext, "sensor.pixel_6_charger_type");
    ///<summary>Shed Camera Infrared Mode</summary>
    public SensorEntity ShedCameraInfraredMode => new(_haContext, "sensor.shed_camera_infrared_mode");
    ///<summary>Shed Camera Last Motion Detected</summary>
    public SensorEntity ShedCameraLastMotionDetected => new(_haContext, "sensor.shed_camera_last_motion_detected");
    ///<summary>Shed Camera Recording Mode</summary>
    public SensorEntity ShedCameraRecordingMode => new(_haContext, "sensor.shed_camera_recording_mode");
    ///<summary>Shed Echo Input next Alarm</summary>
    public SensorEntity ShedEchoInputNextAlarm => new(_haContext, "sensor.shed_echo_input_next_alarm");
    ///<summary>Shed Echo Input next Reminder</summary>
    public SensorEntity ShedEchoInputNextReminder => new(_haContext, "sensor.shed_echo_input_next_reminder");
    ///<summary>Shed Echo Input next Timer</summary>
    public SensorEntity ShedEchoInputNextTimer => new(_haContext, "sensor.shed_echo_input_next_timer");
    ///<summary>shellypro4pm-30c6f784a4e0 uptime</summary>
    public SensorEntity ShellyShedLightsUptime => new(_haContext, "sensor.shelly_shed_lights_uptime");
    ///<summary>Shelly Shed Sockets Uptime</summary>
    public SensorEntity ShellyShedSocketsUptime => new(_haContext, "sensor.shelly_shed_sockets_uptime");
    ///<summary>Shelly Shed Sockets Uptime</summary>
    public SensorEntity ShellyShedSocketsUptime2 => new(_haContext, "sensor.shelly_shed_sockets_uptime_2");
    ///<summary>Shelly Upstairs Lights 1 Uptime</summary>
    public SensorEntity ShellyUpstairsLights1Uptime => new(_haContext, "sensor.shelly_upstairs_lights_1_uptime");
    ///<summary>Mode</summary>
    public SensorEntity SmartSeries700047aeMode => new(_haContext, "sensor.smart_series_7000_47ae_mode");
    ///<summary>Number of sectors</summary>
    public SensorEntity SmartSeries700047aeNumberOfSectors => new(_haContext, "sensor.smart_series_7000_47ae_number_of_sectors");
    ///<summary>Pressure</summary>
    public SensorEntity SmartSeries700047aePressure => new(_haContext, "sensor.smart_series_7000_47ae_pressure");
    ///<summary>Sector</summary>
    public SensorEntity SmartSeries700047aeSector => new(_haContext, "sensor.smart_series_7000_47ae_sector");
    ///<summary>Sector Timer</summary>
    public SensorEntity SmartSeries700047aeSectorTimer => new(_haContext, "sensor.smart_series_7000_47ae_sector_timer");
    ///<summary>Toothbrush State</summary>
    public SensorEntity SmartSeries700047aeToothbrushState => new(_haContext, "sensor.smart_series_7000_47ae_toothbrush_state");
    ///<summary>Snug Echo Show next Alarm</summary>
    public SensorEntity SnugEchoShowNextAlarm => new(_haContext, "sensor.snug_echo_show_next_alarm");
    ///<summary>Snug Echo Show next Reminder</summary>
    public SensorEntity SnugEchoShowNextReminder => new(_haContext, "sensor.snug_echo_show_next_reminder");
    ///<summary>Snug Echo Show next Timer</summary>
    public SensorEntity SnugEchoShowNextTimer => new(_haContext, "sensor.snug_echo_show_next_timer");
    ///<summary>Snug Led Strip Update state</summary>
    public SensorEntity SnugLedStripUpdateState => new(_haContext, "sensor.snug_led_strip_update_state");
    ///<summary>Snug Switch Action</summary>
    public SensorEntity SnugSwitchAction => new(_haContext, "sensor.snug_switch_action");
    ///<summary>Sonoff Basement 1 BSSID</summary>
    public SensorEntity SonoffBasement1Bssid => new(_haContext, "sensor.sonoff_basement_1_bssid");
    ///<summary>Sonoff Basement 1 ESPHome Version</summary>
    public SensorEntity SonoffBasement1EsphomeVersion => new(_haContext, "sensor.sonoff_basement_1_esphome_version");
    ///<summary>Sonoff Basement 1 IP</summary>
    public SensorEntity SonoffBasement1Ip => new(_haContext, "sensor.sonoff_basement_1_ip");
    ///<summary>Sonoff Basement 1 SSID</summary>
    public SensorEntity SonoffBasement1Ssid => new(_haContext, "sensor.sonoff_basement_1_ssid");
    ///<summary>Sonoff Basement 2 BSSID</summary>
    public SensorEntity SonoffBasement2Bssid => new(_haContext, "sensor.sonoff_basement_2_bssid");
    ///<summary>Sonoff Basement 2 ESPHome Version</summary>
    public SensorEntity SonoffBasement2EsphomeVersion => new(_haContext, "sensor.sonoff_basement_2_esphome_version");
    ///<summary>Sonoff Basement 2 IP</summary>
    public SensorEntity SonoffBasement2Ip => new(_haContext, "sensor.sonoff_basement_2_ip");
    ///<summary>Sonoff Basement 2 SSID</summary>
    public SensorEntity SonoffBasement2Ssid => new(_haContext, "sensor.sonoff_basement_2_ssid");
    ///<summary>Sonoff Downstairs 1 BSSID</summary>
    public SensorEntity SonoffDownstairs1Bssid => new(_haContext, "sensor.sonoff_downstairs_1_bssid");
    ///<summary>Sonoff Downstairs 1 ESPHome Version</summary>
    public SensorEntity SonoffDownstairs1EsphomeVersion => new(_haContext, "sensor.sonoff_downstairs_1_esphome_version");
    ///<summary>Sonoff Downstairs 1 IP</summary>
    public SensorEntity SonoffDownstairs1Ip => new(_haContext, "sensor.sonoff_downstairs_1_ip");
    ///<summary>Sonoff Downstairs 1 SSID</summary>
    public SensorEntity SonoffDownstairs1Ssid => new(_haContext, "sensor.sonoff_downstairs_1_ssid");
    ///<summary>Sonoff Downstairs 2 BSSID</summary>
    public SensorEntity SonoffDownstairs2Bssid => new(_haContext, "sensor.sonoff_downstairs_2_bssid");
    ///<summary>Sonoff Downstairs 2 ESPHome Version</summary>
    public SensorEntity SonoffDownstairs2EsphomeVersion => new(_haContext, "sensor.sonoff_downstairs_2_esphome_version");
    ///<summary>Sonoff Downstairs 2 IP</summary>
    public SensorEntity SonoffDownstairs2Ip => new(_haContext, "sensor.sonoff_downstairs_2_ip");
    ///<summary>Sonoff Downstairs 2 SSID</summary>
    public SensorEntity SonoffDownstairs2Ssid => new(_haContext, "sensor.sonoff_downstairs_2_ssid");
    ///<summary>Sonoff Outside 1 BSSID</summary>
    public SensorEntity SonoffOutside1Bssid => new(_haContext, "sensor.sonoff_outside_1_bssid");
    ///<summary>Sonoff Outside 1 ESPHome Version</summary>
    public SensorEntity SonoffOutside1EsphomeVersion => new(_haContext, "sensor.sonoff_outside_1_esphome_version");
    ///<summary>Sonoff Outside 1 IP</summary>
    public SensorEntity SonoffOutside1Ip => new(_haContext, "sensor.sonoff_outside_1_ip");
    ///<summary>Sonoff Outside 1 SSID</summary>
    public SensorEntity SonoffOutside1Ssid => new(_haContext, "sensor.sonoff_outside_1_ssid");
    ///<summary>Sonoff Upstairs 2 BSSID</summary>
    public SensorEntity SonoffUpstairs2Bssid => new(_haContext, "sensor.sonoff_upstairs_2_bssid");
    ///<summary>Sonoff Upstairs 2 ESPHome Version</summary>
    public SensorEntity SonoffUpstairs2EsphomeVersion => new(_haContext, "sensor.sonoff_upstairs_2_esphome_version");
    ///<summary>Sonoff Upstairs 2 IP</summary>
    public SensorEntity SonoffUpstairs2Ip => new(_haContext, "sensor.sonoff_upstairs_2_ip");
    ///<summary>Sonoff Upstairs 2 SSID</summary>
    public SensorEntity SonoffUpstairs2Ssid => new(_haContext, "sensor.sonoff_upstairs_2_ssid");
    ///<summary>Sump Alarm BSSID</summary>
    public SensorEntity SumpAlarmBssid => new(_haContext, "sensor.sump_alarm_bssid");
    ///<summary>Sump Alarm ESPHome Version</summary>
    public SensorEntity SumpAlarmEsphomeVersion => new(_haContext, "sensor.sump_alarm_esphome_version");
    ///<summary>Sump Alarm IP</summary>
    public SensorEntity SumpAlarmIp => new(_haContext, "sensor.sump_alarm_ip");
    ///<summary>Sump Alarm SSID</summary>
    public SensorEntity SumpAlarmSsid => new(_haContext, "sensor.sump_alarm_ssid");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm => new(_haContext, "sensor.this_device_next_alarm");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder => new(_haContext, "sensor.this_device_next_reminder");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer => new(_haContext, "sensor.this_device_next_timer");
    ///<summary>UAP-AC-LR-Basement Uptime</summary>
    public SensorEntity UapAcLrBasementUptime => new(_haContext, "sensor.uap_ac_lr_basement_uptime");
    ///<summary>UAP-AC-LR-Upstairs Uptime</summary>
    public SensorEntity UapAcLrUpstairsUptime => new(_haContext, "sensor.uap_ac_lr_upstairs_uptime");
    ///<summary>UAP-FlexHD-Groundfloor Uptime</summary>
    public SensorEntity UapFlexhdGroundfloorUptime => new(_haContext, "sensor.uap_flexhd_groundfloor_uptime");
    ///<summary>UAP-IW-HD-Shed Uptime</summary>
    public SensorEntity UapIwHdShedUptime => new(_haContext, "sensor.uap_iw_hd_shed_uptime");
    ///<summary>UDMPRO Uptime</summary>
    public SensorEntity UdmproUptime => new(_haContext, "sensor.udmpro_uptime");
    ///<summary>UDMPRO Uptime</summary>
    public SensorEntity UdmproUptime2 => new(_haContext, "sensor.udmpro_uptime_2");
    ///<summary>UniFi Dream Machine External IP</summary>
    public SensorEntity UnifiDreamMachineExternalIp => new(_haContext, "sensor.unifi_dream_machine_external_ip");
    ///<summary>Utility Room Echo Dot next Alarm</summary>
    public SensorEntity UtilityRoomEchoDotNextAlarm => new(_haContext, "sensor.utility_room_echo_dot_next_alarm");
    ///<summary>Utility Room Echo Dot next Reminder</summary>
    public SensorEntity UtilityRoomEchoDotNextReminder => new(_haContext, "sensor.utility_room_echo_dot_next_reminder");
    ///<summary>Utility Room Echo Dot next Timer</summary>
    public SensorEntity UtilityRoomEchoDotNextTimer => new(_haContext, "sensor.utility_room_echo_dot_next_timer");
    ///<summary>Weather Station Altitude</summary>
    public SensorEntity WeatherStationAltitude => new(_haContext, "sensor.weather_station_altitude");
    ///<summary>Weather Station BSSID</summary>
    public SensorEntity WeatherStationBssid => new(_haContext, "sensor.weather_station_bssid");
    ///<summary>Weather Station ESPHome Version</summary>
    public SensorEntity WeatherStationEsphomeVersion => new(_haContext, "sensor.weather_station_esphome_version");
    ///<summary>Weather Station Humidity</summary>
    public SensorEntity WeatherStationHumidity => new(_haContext, "sensor.weather_station_humidity");
    ///<summary>Weather Station IP</summary>
    public SensorEntity WeatherStationIp => new(_haContext, "sensor.weather_station_ip");
    ///<summary>Weather Station SSID</summary>
    public SensorEntity WeatherStationSsid => new(_haContext, "sensor.weather_station_ssid");
    ///<summary>Snug Switch Linkquality</summary>
    public NumericSensorEntity _0x00124b00226650a6Linkquality => new(_haContext, "sensor.0x00124b00226650a6_linkquality");
    ///<summary>Snug Switch Voltage</summary>
    public NumericSensorEntity _0x00124b00226650a6Voltage => new(_haContext, "sensor.0x00124b00226650a6_voltage");
    ///<summary>Estimated distance</summary>
    public NumericSensorEntity _10079d748ee848e98a1fE565c9fb73241001EstimatedDistance => new(_haContext, "sensor.10079d74_8ee8_48e9_8a1f_e565c9fb7324_100_1_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity _74278bdaB64445208f0c720eaf059935023646C68bEstimatedDistance => new(_haContext, "sensor.74278bda_b644_4520_8f0c_720eaf059935_0_23646_c68b_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity _74278bdaB64445208f0c720eaf059935042355512cEstimatedDistance => new(_haContext, "sensor.74278bda_b644_4520_8f0c_720eaf059935_0_42355_512c_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity _74278bdaB64445208f0c720eaf0599350447404a03EstimatedDistance => new(_haContext, "sensor.74278bda_b644_4520_8f0c_720eaf059935_0_44740_4a03_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity _74278bdaB64445208f0c720eaf059935095650951EstimatedDistance => new(_haContext, "sensor.74278bda_b644_4520_8f0c_720eaf059935_0_9565_0951_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity _9d41000035d6F4ddBa60E7bd8dc491c027118791269eeEstimatedDistance => new(_haContext, "sensor.9d410000_35d6_f4dd_ba60_e7bd8dc491c0_27118_7912_69ee_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity _9d41000035d6F4ddBa60E7bd8dc491c06538525776Ff69EstimatedDistance => new(_haContext, "sensor.9d410000_35d6_f4dd_ba60_e7bd8dc491c0_65385_25776_ff69_estimated_distance");
    ///<summary>A3 Printer RX</summary>
    public NumericSensorEntity A3PrinterRx => new(_haContext, "sensor.a3_printer_rx");
    ///<summary>A3 Printer TX</summary>
    public NumericSensorEntity A3PrinterTx => new(_haContext, "sensor.a3_printer_tx");
    ///<summary>AdGuard Home Average processing speed</summary>
    public NumericSensorEntity AdguardAverageProcessingSpeed => new(_haContext, "sensor.adguard_average_processing_speed");
    ///<summary>AdGuard Home DNS queries</summary>
    public NumericSensorEntity AdguardDnsQueries => new(_haContext, "sensor.adguard_dns_queries");
    ///<summary>AdGuard Home DNS queries blocked</summary>
    public NumericSensorEntity AdguardDnsQueriesBlocked => new(_haContext, "sensor.adguard_dns_queries_blocked");
    ///<summary>AdGuard Home DNS queries blocked ratio</summary>
    public NumericSensorEntity AdguardDnsQueriesBlockedRatio => new(_haContext, "sensor.adguard_dns_queries_blocked_ratio");
    ///<summary>AdGuard Home Parental control blocked</summary>
    public NumericSensorEntity AdguardParentalControlBlocked => new(_haContext, "sensor.adguard_parental_control_blocked");
    ///<summary>AdGuard Home Rules count</summary>
    public NumericSensorEntity AdguardRulesCount => new(_haContext, "sensor.adguard_rules_count");
    ///<summary>AdGuard Home Safe browsing blocked</summary>
    public NumericSensorEntity AdguardSafeBrowsingBlocked => new(_haContext, "sensor.adguard_safe_browsing_blocked");
    ///<summary>amazon-1b80b5fcd RX</summary>
    public NumericSensorEntity Amazon1b80b5fcdRx => new(_haContext, "sensor.amazon_1b80b5fcd_rx");
    ///<summary>amazon-1b80b5fcd TX</summary>
    public NumericSensorEntity Amazon1b80b5fcdTx => new(_haContext, "sensor.amazon_1b80b5fcd_tx");
    ///<summary>Andrews-Mini RX</summary>
    public NumericSensorEntity AndrewsMiniRx => new(_haContext, "sensor.andrews_mini_rx");
    ///<summary>Andrews-Mini RX</summary>
    public NumericSensorEntity AndrewsMiniRx2 => new(_haContext, "sensor.andrews_mini_rx_2");
    ///<summary>Andrews-Mini TX</summary>
    public NumericSensorEntity AndrewsMiniTx => new(_haContext, "sensor.andrews_mini_tx");
    ///<summary>Andrews-Mini TX</summary>
    public NumericSensorEntity AndrewsMiniTx2 => new(_haContext, "sensor.andrews_mini_tx_2");
    ///<summary>Andy Active calories burnt today</summary>
    public NumericSensorEntity AndyActiveCaloriesBurntToday => new(_haContext, "sensor.andy_active_calories_burnt_today");
    ///<summary>Andy Active time today</summary>
    public NumericSensorEntity AndyActiveTimeToday => new(_haContext, "sensor.andy_active_time_today");
    ///<summary>Andy Average heart rate</summary>
    public NumericSensorEntity AndyAverageHeartRate => new(_haContext, "sensor.andy_average_heart_rate");
    ///<summary>Andy Average respiratory rate</summary>
    public NumericSensorEntity AndyAverageRespiratoryRate => new(_haContext, "sensor.andy_average_respiratory_rate");
    ///<summary>Body temperature</summary>
    public NumericSensorEntity AndyBodyTemperature => new(_haContext, "sensor.andy_body_temperature");
    ///<summary>Bone mass</summary>
    public NumericSensorEntity AndyBoneMass => new(_haContext, "sensor.andy_bone_mass");
    ///<summary>Andy Calories burnt last workout</summary>
    public NumericSensorEntity AndyCaloriesBurntLastWorkout => new(_haContext, "sensor.andy_calories_burnt_last_workout");
    ///<summary>Andy Deep sleep</summary>
    public NumericSensorEntity AndyDeepSleep => new(_haContext, "sensor.andy_deep_sleep");
    ///<summary>Diastolic blood pressure</summary>
    public NumericSensorEntity AndyDiastolicBloodPressure => new(_haContext, "sensor.andy_diastolic_blood_pressure");
    ///<summary>Andy Distance travelled last workout</summary>
    public NumericSensorEntity AndyDistanceTravelledLastWorkout => new(_haContext, "sensor.andy_distance_travelled_last_workout");
    ///<summary>Andy Distance travelled today</summary>
    public NumericSensorEntity AndyDistanceTravelledToday => new(_haContext, "sensor.andy_distance_travelled_today");
    ///<summary>Fat free mass</summary>
    public NumericSensorEntity AndyFatFreeMass => new(_haContext, "sensor.andy_fat_free_mass");
    ///<summary>Fat mass</summary>
    public NumericSensorEntity AndyFatMass => new(_haContext, "sensor.andy_fat_mass");
    ///<summary>Fat ratio</summary>
    public NumericSensorEntity AndyFatRatio => new(_haContext, "sensor.andy_fat_ratio");
    ///<summary>Andy Floors climbed last workout</summary>
    public NumericSensorEntity AndyFloorsClimbedLastWorkout => new(_haContext, "sensor.andy_floors_climbed_last_workout");
    ///<summary>Andy Floors climbed today</summary>
    public NumericSensorEntity AndyFloorsClimbedToday => new(_haContext, "sensor.andy_floors_climbed_today");
    ///<summary>Heart pulse</summary>
    public NumericSensorEntity AndyHeartPulse => new(_haContext, "sensor.andy_heart_pulse");
    ///<summary>Height</summary>
    public NumericSensorEntity AndyHeight => new(_haContext, "sensor.andy_height");
    ///<summary>Hydration</summary>
    public NumericSensorEntity AndyHydration => new(_haContext, "sensor.andy_hydration");
    ///<summary>Andy Laptop RX</summary>
    public NumericSensorEntity AndyLaptopRx => new(_haContext, "sensor.andy_laptop_rx");
    ///<summary>Andy Laptop TX</summary>
    public NumericSensorEntity AndyLaptopTx => new(_haContext, "sensor.andy_laptop_tx");
    ///<summary>Andy Last workout duration</summary>
    public NumericSensorEntity AndyLastWorkoutDuration => new(_haContext, "sensor.andy_last_workout_duration");
    ///<summary>Andy Light sleep</summary>
    public NumericSensorEntity AndyLightSleep => new(_haContext, "sensor.andy_light_sleep");
    ///<summary>Andy Maximum heart rate</summary>
    public NumericSensorEntity AndyMaximumHeartRate => new(_haContext, "sensor.andy_maximum_heart_rate");
    ///<summary>Andy Maximum respiratory rate</summary>
    public NumericSensorEntity AndyMaximumRespiratoryRate => new(_haContext, "sensor.andy_maximum_respiratory_rate");
    ///<summary>Andy Minimum heart rate</summary>
    public NumericSensorEntity AndyMinimumHeartRate => new(_haContext, "sensor.andy_minimum_heart_rate");
    ///<summary>Andy Minimum respiratory rate</summary>
    public NumericSensorEntity AndyMinimumRespiratoryRate => new(_haContext, "sensor.andy_minimum_respiratory_rate");
    ///<summary>Muscle mass</summary>
    public NumericSensorEntity AndyMuscleMass => new(_haContext, "sensor.andy_muscle_mass");
    ///<summary>Andy Pause during last workout</summary>
    public NumericSensorEntity AndyPauseDuringLastWorkout => new(_haContext, "sensor.andy_pause_during_last_workout");
    ///<summary>Pulse wave velocity</summary>
    public NumericSensorEntity AndyPulseWaveVelocity => new(_haContext, "sensor.andy_pulse_wave_velocity");
    ///<summary>Andy REM sleep</summary>
    public NumericSensorEntity AndyRemSleep => new(_haContext, "sensor.andy_rem_sleep");
    ///<summary>Skin temperature</summary>
    public NumericSensorEntity AndySkinTemperature => new(_haContext, "sensor.andy_skin_temperature");
    ///<summary>Andy Sleep Analyser RX</summary>
    public NumericSensorEntity AndySleepAnalyserRx => new(_haContext, "sensor.andy_sleep_analyser_rx");
    ///<summary>Andy Sleep Analyser TX</summary>
    public NumericSensorEntity AndySleepAnalyserTx => new(_haContext, "sensor.andy_sleep_analyser_tx");
    ///<summary>Andy Sleep score</summary>
    public NumericSensorEntity AndySleepScore => new(_haContext, "sensor.andy_sleep_score");
    ///<summary>SpO2</summary>
    public NumericSensorEntity AndySpo2 => new(_haContext, "sensor.andy_spo2");
    ///<summary>Andy Step goal</summary>
    public NumericSensorEntity AndyStepGoal => new(_haContext, "sensor.andy_step_goal");
    ///<summary>Andy Steps today</summary>
    public NumericSensorEntity AndyStepsToday => new(_haContext, "sensor.andy_steps_today");
    ///<summary>Systolic blood pressure</summary>
    public NumericSensorEntity AndySystolicBloodPressure => new(_haContext, "sensor.andy_systolic_blood_pressure");
    ///<summary>Temperature</summary>
    public NumericSensorEntity AndyTemperature => new(_haContext, "sensor.andy_temperature");
    ///<summary>Andy Time to sleep</summary>
    public NumericSensorEntity AndyTimeToSleep => new(_haContext, "sensor.andy_time_to_sleep");
    ///<summary>Andy Time to wakeup</summary>
    public NumericSensorEntity AndyTimeToWakeup => new(_haContext, "sensor.andy_time_to_wakeup");
    ///<summary>Andy Total calories burnt today</summary>
    public NumericSensorEntity AndyTotalCaloriesBurntToday => new(_haContext, "sensor.andy_total_calories_burnt_today");
    ///<summary>Andy Wakeup count</summary>
    public NumericSensorEntity AndyWakeupCount => new(_haContext, "sensor.andy_wakeup_count");
    ///<summary>Andy Wakeup time</summary>
    public NumericSensorEntity AndyWakeupTime => new(_haContext, "sensor.andy_wakeup_time");
    ///<summary>Andy Weight</summary>
    public NumericSensorEntity AndyWeight => new(_haContext, "sensor.andy_weight");
    ///<summary>Andy Weight goal</summary>
    public NumericSensorEntity AndyWeightGoal => new(_haContext, "sensor.andy_weight_goal");
    ///<summary>Basement Alarm Panel RX</summary>
    public NumericSensorEntity BasementAlarmPanelRx => new(_haContext, "sensor.basement_alarm_panel_rx");
    ///<summary>Basement Alarm Panel TX</summary>
    public NumericSensorEntity BasementAlarmPanelTx => new(_haContext, "sensor.basement_alarm_panel_tx");
    ///<summary>Basement Hall Camera Disk Write Rate</summary>
    public NumericSensorEntity BasementHallCameraDiskWriteRate => new(_haContext, "sensor.basement_hall_camera_disk_write_rate");
    ///<summary>Basement Hall Camera Microphone Level</summary>
    public NumericSensorEntity BasementHallCameraMicrophoneLevel => new(_haContext, "sensor.basement_hall_camera_microphone_level");
    ///<summary>Basement Hall Camera RX</summary>
    public NumericSensorEntity BasementHallCameraRx => new(_haContext, "sensor.basement_hall_camera_rx");
    ///<summary>Basement Hall Camera Storage Used</summary>
    public NumericSensorEntity BasementHallCameraStorageUsed => new(_haContext, "sensor.basement_hall_camera_storage_used");
    ///<summary>Basement Hall Camera TX</summary>
    public NumericSensorEntity BasementHallCameraTx => new(_haContext, "sensor.basement_hall_camera_tx");
    ///<summary>Basement Humidity</summary>
    public NumericSensorEntity BasementHumidity => new(_haContext, "sensor.basement_humidity");
    ///<summary>Basement Stairs Motion Battery</summary>
    public NumericSensorEntity BasementStairsMotionBattery => new(_haContext, "sensor.basement_stairs_motion_battery");
    ///<summary>Basement Stairs Motion Linkquality</summary>
    public NumericSensorEntity BasementStairsMotionLinkquality => new(_haContext, "sensor.basement_stairs_motion_linkquality");
    ///<summary>Basement Stairs Motion Voltage</summary>
    public NumericSensorEntity BasementStairsMotionVoltage => new(_haContext, "sensor.basement_stairs_motion_voltage");
    ///<summary>Basement Temperature</summary>
    public NumericSensorEntity BasementTemperature => new(_haContext, "sensor.basement_temperature");
    ///<summary>Basement Thermostat RX</summary>
    public NumericSensorEntity BasementThermostatRx => new(_haContext, "sensor.basement_thermostat_rx");
    ///<summary>Basement Thermostat TX</summary>
    public NumericSensorEntity BasementThermostatTx => new(_haContext, "sensor.basement_thermostat_tx");
    ///<summary>Bathroom Door Battery</summary>
    public NumericSensorEntity BathroomDoorBattery => new(_haContext, "sensor.bathroom_door_battery");
    ///<summary>Bathroom Door Linkquality</summary>
    public NumericSensorEntity BathroomDoorLinkquality => new(_haContext, "sensor.bathroom_door_linkquality");
    ///<summary>Bathroom Door Voltage</summary>
    public NumericSensorEntity BathroomDoorVoltage => new(_haContext, "sensor.bathroom_door_voltage");
    ///<summary>Bathroom Fan current</summary>
    public NumericSensorEntity BathroomFanCurrent => new(_haContext, "sensor.bathroom_fan_current");
    ///<summary>Bathroom Fan device temperature</summary>
    public NumericSensorEntity BathroomFanDeviceTemperature => new(_haContext, "sensor.bathroom_fan_device_temperature");
    ///<summary>Bathroom Fan energy</summary>
    public NumericSensorEntity BathroomFanEnergy => new(_haContext, "sensor.bathroom_fan_energy");
    ///<summary>Bathroom Fan frequency</summary>
    public NumericSensorEntity BathroomFanFrequency => new(_haContext, "sensor.bathroom_fan_frequency");
    ///<summary>Bathroom Fan power</summary>
    public NumericSensorEntity BathroomFanPower => new(_haContext, "sensor.bathroom_fan_power");
    ///<summary>Bathroom Fan voltage</summary>
    public NumericSensorEntity BathroomFanVoltage => new(_haContext, "sensor.bathroom_fan_voltage");
    ///<summary>Bathroom Humidistat Battery</summary>
    public NumericSensorEntity BathroomHumidistatBattery => new(_haContext, "sensor.bathroom_humidistat_battery");
    ///<summary>Bathroom Humidity</summary>
    public NumericSensorEntity BathroomHumidistatHumidity => new(_haContext, "sensor.bathroom_humidistat_humidity");
    ///<summary>Bathroom Humidistat Linkquality</summary>
    public NumericSensorEntity BathroomHumidistatLinkquality => new(_haContext, "sensor.bathroom_humidistat_linkquality");
    ///<summary>Bathroom Temperature</summary>
    public NumericSensorEntity BathroomHumidistatTemperature => new(_haContext, "sensor.bathroom_humidistat_temperature");
    ///<summary>Bedroom Echo Show RX</summary>
    public NumericSensorEntity BedroomEchoShowRx => new(_haContext, "sensor.bedroom_echo_show_rx");
    ///<summary>Bedroom Echo Show TX</summary>
    public NumericSensorEntity BedroomEchoShowTx => new(_haContext, "sensor.bedroom_echo_show_tx");
    ///<summary>Ben-s-S23-Ultra RX</summary>
    public NumericSensorEntity BenSS23UltraRx => new(_haContext, "sensor.ben_s_s23_ultra_rx");
    ///<summary>Ben-s-S23-Ultra TX</summary>
    public NumericSensorEntity BenSS23UltraTx => new(_haContext, "sensor.ben_s_s23_ultra_tx");
    ///<summary>Body+ Scales RX</summary>
    public NumericSensorEntity BodyScalesRx => new(_haContext, "sensor.body_scales_rx");
    ///<summary>Body+ Scales TX</summary>
    public NumericSensorEntity BodyScalesTx => new(_haContext, "sensor.body_scales_tx");
    ///<summary>Brewery current</summary>
    public NumericSensorEntity BreweryCurrent => new(_haContext, "sensor.brewery_current");
    ///<summary>Brewery device temperature</summary>
    public NumericSensorEntity BreweryDeviceTemperature => new(_haContext, "sensor.brewery_device_temperature");
    ///<summary>Brewery energy</summary>
    public NumericSensorEntity BreweryEnergy => new(_haContext, "sensor.brewery_energy");
    ///<summary>Brewery frequency</summary>
    public NumericSensorEntity BreweryFrequency => new(_haContext, "sensor.brewery_frequency");
    ///<summary>Brewery power</summary>
    public NumericSensorEntity BreweryPower => new(_haContext, "sensor.brewery_power");
    ///<summary>Brewery voltage</summary>
    public NumericSensorEntity BreweryVoltage => new(_haContext, "sensor.brewery_voltage");
    ///<summary>brewerypi RX</summary>
    public NumericSensorEntity BrewerypiRx => new(_haContext, "sensor.brewerypi_rx");
    ///<summary>brewerypi TX</summary>
    public NumericSensorEntity BrewerypiTx => new(_haContext, "sensor.brewerypi_tx");
    ///<summary>Brother MFC-J5910DW CUPS Black</summary>
    public NumericSensorEntity BrotherMfcJ5910dwCupsBlack => new(_haContext, "sensor.brother_mfc_j5910dw_cups_black");
    ///<summary>Brother MFC-J5910DW CUPS Cyan</summary>
    public NumericSensorEntity BrotherMfcJ5910dwCupsCyan => new(_haContext, "sensor.brother_mfc_j5910dw_cups_cyan");
    ///<summary>Brother MFC-J5910DW CUPS Magenta</summary>
    public NumericSensorEntity BrotherMfcJ5910dwCupsMagenta => new(_haContext, "sensor.brother_mfc_j5910dw_cups_magenta");
    ///<summary>Brother MFC-J5910DW CUPS Yellow</summary>
    public NumericSensorEntity BrotherMfcJ5910dwCupsYellow => new(_haContext, "sensor.brother_mfc_j5910dw_cups_yellow");
    ///<summary>Bulb IHD RX</summary>
    public NumericSensorEntity BulbIhdRx => new(_haContext, "sensor.bulb_ihd_rx");
    ///<summary>Bulb IHD TX</summary>
    public NumericSensorEntity BulbIhdTx => new(_haContext, "sensor.bulb_ihd_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity CatFeedV2Rx => new(_haContext, "sensor.cat_feed_v2_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity CatFeedV2Tx => new(_haContext, "sensor.cat_feed_v2_tx");
    ///<summary>cat-feeder RX</summary>
    public NumericSensorEntity CatFeederRx => new(_haContext, "sensor.cat_feeder_rx");
    ///<summary>cat-feeder TX</summary>
    public NumericSensorEntity CatFeederTx => new(_haContext, "sensor.cat_feeder_tx");
    ///<summary>Claire Average heart rate</summary>
    public NumericSensorEntity ClaireAverageHeartRate => new(_haContext, "sensor.claire_average_heart_rate");
    ///<summary>Claire Average respiratory rate</summary>
    public NumericSensorEntity ClaireAverageRespiratoryRate => new(_haContext, "sensor.claire_average_respiratory_rate");
    ///<summary>Body temperature</summary>
    public NumericSensorEntity ClaireBodyTemperature => new(_haContext, "sensor.claire_body_temperature");
    ///<summary>Bone mass</summary>
    public NumericSensorEntity ClaireBoneMass => new(_haContext, "sensor.claire_bone_mass");
    ///<summary>Claire Deep sleep</summary>
    public NumericSensorEntity ClaireDeepSleep => new(_haContext, "sensor.claire_deep_sleep");
    ///<summary>Diastolic blood pressure</summary>
    public NumericSensorEntity ClaireDiastolicBloodPressure => new(_haContext, "sensor.claire_diastolic_blood_pressure");
    ///<summary>Fat free mass</summary>
    public NumericSensorEntity ClaireFatFreeMass => new(_haContext, "sensor.claire_fat_free_mass");
    ///<summary>Fat mass</summary>
    public NumericSensorEntity ClaireFatMass => new(_haContext, "sensor.claire_fat_mass");
    ///<summary>Fat ratio</summary>
    public NumericSensorEntity ClaireFatRatio => new(_haContext, "sensor.claire_fat_ratio");
    ///<summary>Heart pulse</summary>
    public NumericSensorEntity ClaireHeartPulse => new(_haContext, "sensor.claire_heart_pulse");
    ///<summary>Height</summary>
    public NumericSensorEntity ClaireHeight => new(_haContext, "sensor.claire_height");
    ///<summary>Hydration</summary>
    public NumericSensorEntity ClaireHydration => new(_haContext, "sensor.claire_hydration");
    ///<summary>Claire-Laptop RX</summary>
    public NumericSensorEntity ClaireLaptopRx => new(_haContext, "sensor.claire_laptop_rx");
    ///<summary>Claire-Laptop TX</summary>
    public NumericSensorEntity ClaireLaptopTx => new(_haContext, "sensor.claire_laptop_tx");
    ///<summary>Claire Light sleep</summary>
    public NumericSensorEntity ClaireLightSleep => new(_haContext, "sensor.claire_light_sleep");
    ///<summary>Claire Maximum heart rate</summary>
    public NumericSensorEntity ClaireMaximumHeartRate => new(_haContext, "sensor.claire_maximum_heart_rate");
    ///<summary>Claire Maximum respiratory rate</summary>
    public NumericSensorEntity ClaireMaximumRespiratoryRate => new(_haContext, "sensor.claire_maximum_respiratory_rate");
    ///<summary>Claire Minimum heart rate</summary>
    public NumericSensorEntity ClaireMinimumHeartRate => new(_haContext, "sensor.claire_minimum_heart_rate");
    ///<summary>Claire Minimum respiratory rate</summary>
    public NumericSensorEntity ClaireMinimumRespiratoryRate => new(_haContext, "sensor.claire_minimum_respiratory_rate");
    ///<summary>Muscle mass</summary>
    public NumericSensorEntity ClaireMuscleMass => new(_haContext, "sensor.claire_muscle_mass");
    ///<summary>Pulse wave velocity</summary>
    public NumericSensorEntity ClairePulseWaveVelocity => new(_haContext, "sensor.claire_pulse_wave_velocity");
    ///<summary>Claire REM sleep</summary>
    public NumericSensorEntity ClaireRemSleep => new(_haContext, "sensor.claire_rem_sleep");
    ///<summary>Skin temperature</summary>
    public NumericSensorEntity ClaireSkinTemperature => new(_haContext, "sensor.claire_skin_temperature");
    ///<summary>Claire Sleep Analyzer RX</summary>
    public NumericSensorEntity ClaireSleepAnalyzerRx => new(_haContext, "sensor.claire_sleep_analyzer_rx");
    ///<summary>Claire Sleep Analyzer TX</summary>
    public NumericSensorEntity ClaireSleepAnalyzerTx => new(_haContext, "sensor.claire_sleep_analyzer_tx");
    ///<summary>Claire Sleep score</summary>
    public NumericSensorEntity ClaireSleepScore => new(_haContext, "sensor.claire_sleep_score");
    ///<summary>SpO2</summary>
    public NumericSensorEntity ClaireSpo2 => new(_haContext, "sensor.claire_spo2");
    ///<summary>Systolic blood pressure</summary>
    public NumericSensorEntity ClaireSystolicBloodPressure => new(_haContext, "sensor.claire_systolic_blood_pressure");
    ///<summary>Temperature</summary>
    public NumericSensorEntity ClaireTemperature => new(_haContext, "sensor.claire_temperature");
    ///<summary>Claire Time to sleep</summary>
    public NumericSensorEntity ClaireTimeToSleep => new(_haContext, "sensor.claire_time_to_sleep");
    ///<summary>Claire Time to wakeup</summary>
    public NumericSensorEntity ClaireTimeToWakeup => new(_haContext, "sensor.claire_time_to_wakeup");
    ///<summary>Claire Wakeup count</summary>
    public NumericSensorEntity ClaireWakeupCount => new(_haContext, "sensor.claire_wakeup_count");
    ///<summary>Claire Wakeup time</summary>
    public NumericSensorEntity ClaireWakeupTime => new(_haContext, "sensor.claire_wakeup_time");
    ///<summary>Weight</summary>
    public NumericSensorEntity ClaireWeight => new(_haContext, "sensor.claire_weight");
    ///<summary>claireiphone Battery</summary>
    public NumericSensorEntity ClaireiphoneBattery => new(_haContext, "sensor.claireiphone_battery");
    ///<summary>claireiphone RX</summary>
    public NumericSensorEntity ClaireiphoneRx => new(_haContext, "sensor.claireiphone_rx");
    ///<summary>claireiphone TX</summary>
    public NumericSensorEntity ClaireiphoneTx => new(_haContext, "sensor.claireiphone_tx");
    ///<summary>Claire’s Apple Watch Battery</summary>
    public NumericSensorEntity ClairesAppleWatchBattery => new(_haContext, "sensor.claires_apple_watch_battery");
    ///<summary>Claire’s iPhone Average Active Pace</summary>
    public NumericSensorEntity ClairesIphoneAverageActivePace => new(_haContext, "sensor.claires_iphone_average_active_pace");
    ///<summary>Claire’s iPhone Battery Level</summary>
    public NumericSensorEntity ClairesIphoneBatteryLevel => new(_haContext, "sensor.claires_iphone_battery_level");
    ///<summary>Claire’s iPhone Distance</summary>
    public NumericSensorEntity ClairesIphoneDistance => new(_haContext, "sensor.claires_iphone_distance");
    ///<summary>Claire’s iPhone Floors Ascended</summary>
    public NumericSensorEntity ClairesIphoneFloorsAscended => new(_haContext, "sensor.claires_iphone_floors_ascended");
    ///<summary>Claire’s iPhone Floors Descended</summary>
    public NumericSensorEntity ClairesIphoneFloorsDescended => new(_haContext, "sensor.claires_iphone_floors_descended");
    ///<summary>Claire’s iPhone Steps</summary>
    public NumericSensorEntity ClairesIphoneSteps => new(_haContext, "sensor.claires_iphone_steps");
    ///<summary>Claire’s iPhone Storage</summary>
    public NumericSensorEntity ClairesIphoneStorage => new(_haContext, "sensor.claires_iphone_storage");
    ///<summary>claires-laptop RX</summary>
    public NumericSensorEntity ClairesLaptopRx => new(_haContext, "sensor.claires_laptop_rx");
    ///<summary>claires-laptop TX</summary>
    public NumericSensorEntity ClairesLaptopTx => new(_haContext, "sensor.claires_laptop_tx");
    ///<summary>Electricity Maps CO2 intensity</summary>
    public NumericSensorEntity Co2Intensity => new(_haContext, "sensor.co2_intensity");
    ///<summary>Cold Frame current</summary>
    public NumericSensorEntity ColdFrameCurrent => new(_haContext, "sensor.cold_frame_current");
    ///<summary>Cold Frame device temperature</summary>
    public NumericSensorEntity ColdFrameDeviceTemperature => new(_haContext, "sensor.cold_frame_device_temperature");
    ///<summary>Cold Frame energy</summary>
    public NumericSensorEntity ColdFrameEnergy => new(_haContext, "sensor.cold_frame_energy");
    ///<summary>Cold Frame frequency</summary>
    public NumericSensorEntity ColdFrameFrequency => new(_haContext, "sensor.cold_frame_frequency");
    ///<summary>Cold Frame power</summary>
    public NumericSensorEntity ColdFramePower => new(_haContext, "sensor.cold_frame_power");
    ///<summary>Cold Frame voltage</summary>
    public NumericSensorEntity ColdFrameVoltage => new(_haContext, "sensor.cold_frame_voltage");
    ///<summary>Decking Socket Current</summary>
    public NumericSensorEntity DeckingSocketCurrent => new(_haContext, "sensor.decking_socket_current");
    ///<summary>Decking Socket device temperature</summary>
    public NumericSensorEntity DeckingSocketDeviceTemperature => new(_haContext, "sensor.decking_socket_device_temperature");
    ///<summary>Decking Socket energy</summary>
    public NumericSensorEntity DeckingSocketEnergy => new(_haContext, "sensor.decking_socket_energy");
    ///<summary>Decking Socket Frequency</summary>
    public NumericSensorEntity DeckingSocketFrequency => new(_haContext, "sensor.decking_socket_frequency");
    ///<summary>Decking Socket power</summary>
    public NumericSensorEntity DeckingSocketPower => new(_haContext, "sensor.decking_socket_power");
    ///<summary>Decking Socket Voltage</summary>
    public NumericSensorEntity DeckingSocketVoltage => new(_haContext, "sensor.decking_socket_voltage");
    ///<summary>Decking Wall current</summary>
    public NumericSensorEntity DeckingWallCurrent => new(_haContext, "sensor.decking_wall_current");
    ///<summary>Decking Wall device temperature</summary>
    public NumericSensorEntity DeckingWallDeviceTemperature => new(_haContext, "sensor.decking_wall_device_temperature");
    ///<summary>Decking Wall energy</summary>
    public NumericSensorEntity DeckingWallEnergy => new(_haContext, "sensor.decking_wall_energy");
    ///<summary>Decking Wall frequency</summary>
    public NumericSensorEntity DeckingWallFrequency => new(_haContext, "sensor.decking_wall_frequency");
    ///<summary>Decking Wall power</summary>
    public NumericSensorEntity DeckingWallPower => new(_haContext, "sensor.decking_wall_power");
    ///<summary>Decking Wall voltage</summary>
    public NumericSensorEntity DeckingWallVoltage => new(_haContext, "sensor.decking_wall_voltage");
    ///<summary>Dining Room Echo Input RX</summary>
    public NumericSensorEntity DiningRoomEchoInputRx => new(_haContext, "sensor.dining_room_echo_input_rx");
    ///<summary>Dining Room Echo Input TX</summary>
    public NumericSensorEntity DiningRoomEchoInputTx => new(_haContext, "sensor.dining_room_echo_input_tx");
    ///<summary>Docker Host RX</summary>
    public NumericSensorEntity DockerHostRx => new(_haContext, "sensor.docker_host_rx");
    ///<summary>Docker Host TX</summary>
    public NumericSensorEntity DockerHostTx => new(_haContext, "sensor.docker_host_tx");
    ///<summary>Doorbell RX</summary>
    public NumericSensorEntity DoorbellRx => new(_haContext, "sensor.doorbell_rx");
    ///<summary>Doorbell TX</summary>
    public NumericSensorEntity DoorbellTx => new(_haContext, "sensor.doorbell_tx");
    ///<summary>Doorbell Uptime</summary>
    public NumericSensorEntity DoorbellUptime => new(_haContext, "sensor.doorbell_uptime");
    ///<summary>Doorbell WiFi Signal</summary>
    public NumericSensorEntity DoorbellWifiSignal => new(_haContext, "sensor.doorbell_wifi_signal");
    ///<summary>Downstairs Humidity</summary>
    public NumericSensorEntity DownstairsHumidity => new(_haContext, "sensor.downstairs_humidity");
    ///<summary>Downstairs Temperature</summary>
    public NumericSensorEntity DownstairsTemperature => new(_haContext, "sensor.downstairs_temperature");
    ///<summary>Downstairs Thermostat RX</summary>
    public NumericSensorEntity DownstairsThermostatRx => new(_haContext, "sensor.downstairs_thermostat_rx");
    ///<summary>Downstairs Thermostat TX</summary>
    public NumericSensorEntity DownstairsThermostatTx => new(_haContext, "sensor.downstairs_thermostat_tx");
    ///<summary>Dressing Room current</summary>
    public NumericSensorEntity DressingRoomCurrent => new(_haContext, "sensor.dressing_room_current");
    ///<summary>Dressing Room device temperature</summary>
    public NumericSensorEntity DressingRoomDeviceTemperature => new(_haContext, "sensor.dressing_room_device_temperature");
    ///<summary>Dressing Room Ecot Dot RX</summary>
    public NumericSensorEntity DressingRoomEcotDotRx => new(_haContext, "sensor.dressing_room_ecot_dot_rx");
    ///<summary>Dressing Room Ecot Dot TX</summary>
    public NumericSensorEntity DressingRoomEcotDotTx => new(_haContext, "sensor.dressing_room_ecot_dot_tx");
    ///<summary>Dressing Room energy</summary>
    public NumericSensorEntity DressingRoomEnergy => new(_haContext, "sensor.dressing_room_energy");
    ///<summary>Dressing Room frequency</summary>
    public NumericSensorEntity DressingRoomFrequency => new(_haContext, "sensor.dressing_room_frequency");
    ///<summary>Dressing Room power</summary>
    public NumericSensorEntity DressingRoomPower => new(_haContext, "sensor.dressing_room_power");
    ///<summary>Dressing Room voltage</summary>
    public NumericSensorEntity DressingRoomVoltage => new(_haContext, "sensor.dressing_room_voltage");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity E20a39f473f54bc4186417d1ad07a962151062235247d4EstimatedDistance => new(_haContext, "sensor.e20a39f4_73f5_4bc4_1864_17d1ad07a962_15106_22352_47d4_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity E20a39f473f54bc4186417d1ad07a9623810829772C6d1EstimatedDistance => new(_haContext, "sensor.e20a39f4_73f5_4bc4_1864_17d1ad07a962_38108_29772_c6d1_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity E20a39f473f54bc4186417d1ad07a9623941038168df7EstimatedDistance => new(_haContext, "sensor.e20a39f4_73f5_4bc4_1864_17d1ad07a962_39410_3816_8df7_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity E20a39f473f54bc4186417d1ad07a9624040050805F0e9EstimatedDistance => new(_haContext, "sensor.e20a39f4_73f5_4bc4_1864_17d1ad07a962_40400_50805_f0e9_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity E20a39f473f54bc4186417d1ad07a96262393370145f81EstimatedDistance => new(_haContext, "sensor.e20a39f4_73f5_4bc4_1864_17d1ad07a962_62393_37014_5f81_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity E2c56db5Dffb48d2B060D0f5a71096e000EstimatedDistance => new(_haContext, "sensor.e2c56db5_dffb_48d2_b060_d0f5a71096e0_0_0_estimated_distance");
    ///<summary>Electric Cabinet Door Battery</summary>
    public NumericSensorEntity ElectricCabinetDoorBattery => new(_haContext, "sensor.electric_cabinet_door_battery");
    ///<summary>Electric Cabinet Door Linkquality</summary>
    public NumericSensorEntity ElectricCabinetDoorLinkquality => new(_haContext, "sensor.electric_cabinet_door_linkquality");
    ///<summary>Electric Cabinet Door Voltage</summary>
    public NumericSensorEntity ElectricCabinetDoorVoltage => new(_haContext, "sensor.electric_cabinet_door_voltage");
    ///<summary>Black ink</summary>
    public NumericSensorEntity EpsonXp950SeriesBlackInk => new(_haContext, "sensor.epson_xp_950_series_black_ink");
    ///<summary>Cyan ink</summary>
    public NumericSensorEntity EpsonXp950SeriesCyanInk => new(_haContext, "sensor.epson_xp_950_series_cyan_ink");
    ///<summary>Light Cyan ink</summary>
    public NumericSensorEntity EpsonXp950SeriesLightCyanInk => new(_haContext, "sensor.epson_xp_950_series_light_cyan_ink");
    ///<summary>Light Magenta ink</summary>
    public NumericSensorEntity EpsonXp950SeriesLightMagentaInk => new(_haContext, "sensor.epson_xp_950_series_light_magenta_ink");
    ///<summary>Magenta ink</summary>
    public NumericSensorEntity EpsonXp950SeriesMagentaInk => new(_haContext, "sensor.epson_xp_950_series_magenta_ink");
    ///<summary>Yellow ink</summary>
    public NumericSensorEntity EpsonXp950SeriesYellowInk => new(_haContext, "sensor.epson_xp_950_series_yellow_ink");
    ///<summary>EPSON78117F RX</summary>
    public NumericSensorEntity Epson78117fRx => new(_haContext, "sensor.epson78117f_rx");
    ///<summary>EPSON78117F TX</summary>
    public NumericSensorEntity Epson78117fTx => new(_haContext, "sensor.epson78117f_tx");
    ///<summary>ESPresense Bedroom Free Mem</summary>
    public NumericSensorEntity EspresenseBedroomFreeMemory => new(_haContext, "sensor.espresense_bedroom_free_memory");
    ///<summary>ESPresense Bedroom Uptime</summary>
    public NumericSensorEntity EspresenseBedroomUptime => new(_haContext, "sensor.espresense_bedroom_uptime");
    ///<summary>ESPresense Kitchen Free Mem</summary>
    public NumericSensorEntity EspresenseKitchenFreeMemory => new(_haContext, "sensor.espresense_kitchen_free_memory");
    ///<summary>ESPresense Kitchen RX</summary>
    public NumericSensorEntity EspresenseKitchenRx => new(_haContext, "sensor.espresense_kitchen_rx");
    ///<summary>ESPresense Kitchen TX</summary>
    public NumericSensorEntity EspresenseKitchenTx => new(_haContext, "sensor.espresense_kitchen_tx");
    ///<summary>ESPresense Kitchen Uptime</summary>
    public NumericSensorEntity EspresenseKitchenUptime => new(_haContext, "sensor.espresense_kitchen_uptime");
    ///<summary>ESPresense Lounge Free Mem</summary>
    public NumericSensorEntity EspresenseLoungeFreeMemory => new(_haContext, "sensor.espresense_lounge_free_memory");
    ///<summary>ESPresense Lounge RX</summary>
    public NumericSensorEntity EspresenseLoungeRx => new(_haContext, "sensor.espresense_lounge_rx");
    ///<summary>ESPresense Lounge TX</summary>
    public NumericSensorEntity EspresenseLoungeTx => new(_haContext, "sensor.espresense_lounge_tx");
    ///<summary>ESPresense Lounge Uptime</summary>
    public NumericSensorEntity EspresenseLoungeUptime => new(_haContext, "sensor.espresense_lounge_uptime");
    ///<summary>ESPresense Snug Free Mem</summary>
    public NumericSensorEntity EspresenseSnugFreeMem => new(_haContext, "sensor.espresense_snug_free_mem");
    ///<summary>ESPresense Snug Uptime</summary>
    public NumericSensorEntity EspresenseSnugUptime => new(_haContext, "sensor.espresense_snug_uptime");
    ///<summary>RX</summary>
    public NumericSensorEntity EspressifRx => new(_haContext, "sensor.espressif_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity EspressifTx => new(_haContext, "sensor.espressif_tx");
    ///<summary>Fence Lights Current</summary>
    public NumericSensorEntity FenceLightsCurrent => new(_haContext, "sensor.fence_lights_current");
    ///<summary>Fence Lights device temperature</summary>
    public NumericSensorEntity FenceLightsDeviceTemperature => new(_haContext, "sensor.fence_lights_device_temperature");
    ///<summary>Fence Lights energy</summary>
    public NumericSensorEntity FenceLightsEnergy => new(_haContext, "sensor.fence_lights_energy");
    ///<summary>Fence Lights Frequency</summary>
    public NumericSensorEntity FenceLightsFrequency => new(_haContext, "sensor.fence_lights_frequency");
    ///<summary>Fence Lights power</summary>
    public NumericSensorEntity FenceLightsPower => new(_haContext, "sensor.fence_lights_power");
    ///<summary>Fence Lights Voltage</summary>
    public NumericSensorEntity FenceLightsVoltage => new(_haContext, "sensor.fence_lights_voltage");
    ///<summary>Front Door Battery</summary>
    public NumericSensorEntity FrontDoorBattery => new(_haContext, "sensor.front_door_battery");
    ///<summary>Front Door Linkquality</summary>
    public NumericSensorEntity FrontDoorLinkquality => new(_haContext, "sensor.front_door_linkquality");
    ///<summary>Front Door Voltage</summary>
    public NumericSensorEntity FrontDoorVoltage => new(_haContext, "sensor.front_door_voltage");
    ///<summary>Galaxy-A20e RX</summary>
    public NumericSensorEntity GalaxyA20eRx => new(_haContext, "sensor.galaxy_a20e_rx");
    ///<summary>RX</summary>
    public NumericSensorEntity GalaxyA20eRx2 => new(_haContext, "sensor.galaxy_a20e_rx_2");
    ///<summary>Galaxy-A20e TX</summary>
    public NumericSensorEntity GalaxyA20eTx => new(_haContext, "sensor.galaxy_a20e_tx");
    ///<summary>TX</summary>
    public NumericSensorEntity GalaxyA20eTx2 => new(_haContext, "sensor.galaxy_a20e_tx_2");
    ///<summary>Garden Sockets Current</summary>
    public NumericSensorEntity GardenSocketsCurrent => new(_haContext, "sensor.garden_sockets_current");
    ///<summary>Garden Sockets device temperature</summary>
    public NumericSensorEntity GardenSocketsDeviceTemperature => new(_haContext, "sensor.garden_sockets_device_temperature");
    ///<summary>Garden Sockets energy</summary>
    public NumericSensorEntity GardenSocketsEnergy => new(_haContext, "sensor.garden_sockets_energy");
    ///<summary>Garden Sockets Frequency</summary>
    public NumericSensorEntity GardenSocketsFrequency => new(_haContext, "sensor.garden_sockets_frequency");
    ///<summary>Garden Sockets power</summary>
    public NumericSensorEntity GardenSocketsPower => new(_haContext, "sensor.garden_sockets_power");
    ///<summary>Garden Sockets Voltage</summary>
    public NumericSensorEntity GardenSocketsVoltage => new(_haContext, "sensor.garden_sockets_voltage");
    ///<summary>Gate Socket Current</summary>
    public NumericSensorEntity GateSocketCurrent => new(_haContext, "sensor.gate_socket_current");
    ///<summary>Gate Socket device temperature</summary>
    public NumericSensorEntity GateSocketDeviceTemperature => new(_haContext, "sensor.gate_socket_device_temperature");
    ///<summary>Gate Socket energy</summary>
    public NumericSensorEntity GateSocketEnergy => new(_haContext, "sensor.gate_socket_energy");
    ///<summary>Gate Socket Frequency</summary>
    public NumericSensorEntity GateSocketFrequency => new(_haContext, "sensor.gate_socket_frequency");
    ///<summary>Gate Socket power</summary>
    public NumericSensorEntity GateSocketPower => new(_haContext, "sensor.gate_socket_power");
    ///<summary>Gate Socket Voltage</summary>
    public NumericSensorEntity GateSocketVoltage => new(_haContext, "sensor.gate_socket_voltage");
    ///<summary>Battery</summary>
    public NumericSensorEntity GeniusX47aeBattery => new(_haContext, "sensor.genius_x_47ae_battery");
    ///<summary>Electricity Maps Grid fossil fuel percentage</summary>
    public NumericSensorEntity GridFossilFuelPercentage => new(_haContext, "sensor.grid_fossil_fuel_percentage");
    ///<summary>Ground Floor Alarm Panel RX</summary>
    public NumericSensorEntity GroundFloorAlarmPanelRx => new(_haContext, "sensor.ground_floor_alarm_panel_rx");
    ///<summary>Ground Floor Alarm Panel TX</summary>
    public NumericSensorEntity GroundFloorAlarmPanelTx => new(_haContext, "sensor.ground_floor_alarm_panel_tx");
    ///<summary>Guest Room current</summary>
    public NumericSensorEntity GuestRoomCurrent => new(_haContext, "sensor.guest_room_current");
    ///<summary>Guest Room device temperature</summary>
    public NumericSensorEntity GuestRoomDeviceTemperature => new(_haContext, "sensor.guest_room_device_temperature");
    ///<summary>Guest Room Echo Show RX</summary>
    public NumericSensorEntity GuestRoomEchoShowRx => new(_haContext, "sensor.guest_room_echo_show_rx");
    ///<summary>Guest Room Echo Show TX</summary>
    public NumericSensorEntity GuestRoomEchoShowTx => new(_haContext, "sensor.guest_room_echo_show_tx");
    ///<summary>Guest Room energy</summary>
    public NumericSensorEntity GuestRoomEnergy => new(_haContext, "sensor.guest_room_energy");
    ///<summary>Guest Room frequency</summary>
    public NumericSensorEntity GuestRoomFrequency => new(_haContext, "sensor.guest_room_frequency");
    ///<summary>Guest Room power</summary>
    public NumericSensorEntity GuestRoomPower => new(_haContext, "sensor.guest_room_power");
    ///<summary>Guest Room Remote Battery</summary>
    public NumericSensorEntity GuestRoomRemoteBattery => new(_haContext, "sensor.guest_room_remote_battery");
    ///<summary>Guest Room voltage</summary>
    public NumericSensorEntity GuestRoomVoltage => new(_haContext, "sensor.guest_room_voltage");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>Hallway Camera Disk Write Rate</summary>
    public NumericSensorEntity HallwayCameraDiskWriteRate => new(_haContext, "sensor.hallway_camera_disk_write_rate");
    ///<summary>Hallway Camera Microphone Level</summary>
    public NumericSensorEntity HallwayCameraMicrophoneLevel => new(_haContext, "sensor.hallway_camera_microphone_level");
    ///<summary>Hallway Camera Storage Used</summary>
    public NumericSensorEntity HallwayCameraStorageUsed => new(_haContext, "sensor.hallway_camera_storage_used");
    ///<summary>Hallway Remote Battery</summary>
    public NumericSensorEntity HallwayRemoteBattery => new(_haContext, "sensor.hallway_remote_battery");
    ///<summary>Hallway Tablet Battery</summary>
    public NumericSensorEntity HallwayTabletBattery => new(_haContext, "sensor.hallway_tablet_battery");
    ///<summary>Hallway Tablet Free memory</summary>
    public NumericSensorEntity HallwayTabletFreeMemory => new(_haContext, "sensor.hallway_tablet_free_memory");
    ///<summary>Hallway Tablet Internal storage free space</summary>
    public NumericSensorEntity HallwayTabletInternalStorageFreeSpace => new(_haContext, "sensor.hallway_tablet_internal_storage_free_space");
    ///<summary>Hallway Tablet Internal storage total space</summary>
    public NumericSensorEntity HallwayTabletInternalStorageTotalSpace => new(_haContext, "sensor.hallway_tablet_internal_storage_total_space");
    ///<summary>Hallway Tablet Total memory</summary>
    public NumericSensorEntity HallwayTabletTotalMemory => new(_haContext, "sensor.hallway_tablet_total_memory");
    ///<summary>Home Assistant Supervisor CPU percent</summary>
    public NumericSensorEntity HomeAssistantSupervisorCpuPercent => new(_haContext, "sensor.home_assistant_supervisor_cpu_percent");
    ///<summary>Home Assistant Supervisor Memory percent</summary>
    public NumericSensorEntity HomeAssistantSupervisorMemoryPercent => new(_haContext, "sensor.home_assistant_supervisor_memory_percent");
    ///<summary>HP DesignJet 5500ps RX</summary>
    public NumericSensorEntity HpDesignjet5500psRx => new(_haContext, "sensor.hp_designjet_5500ps_rx");
    ///<summary>HP DesignJet 5500ps TX</summary>
    public NumericSensorEntity HpDesignjet5500psTx => new(_haContext, "sensor.hp_designjet_5500ps_tx");
    ///<summary>HUAWEI_P30_Pro-839be50799 RX</summary>
    public NumericSensorEntity HuaweiP30Pro839be50799Rx => new(_haContext, "sensor.huawei_p30_pro_839be50799_rx");
    ///<summary>HUAWEI_P30_Pro-839be50799 TX</summary>
    public NumericSensorEntity HuaweiP30Pro839be50799Tx => new(_haContext, "sensor.huawei_p30_pro_839be50799_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity IphoneRx => new(_haContext, "sensor.iphone_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity IphoneTx => new(_haContext, "sensor.iphone_tx");
    ///<summary>iSpindle Relay RX</summary>
    public NumericSensorEntity IspindleRelayRx => new(_haContext, "sensor.ispindle_relay_rx");
    ///<summary>iSpindle Relay TX</summary>
    public NumericSensorEntity IspindleRelayTx => new(_haContext, "sensor.ispindle_relay_tx");
    ///<summary>KALIBRATE-dDMm8 RX</summary>
    public NumericSensorEntity KalibrateDdmm8Rx => new(_haContext, "sensor.kalibrate_ddmm8_rx");
    ///<summary>KALIBRATE-dDMm8 TX</summary>
    public NumericSensorEntity KalibrateDdmm8Tx => new(_haContext, "sensor.kalibrate_ddmm8_tx");
    ///<summary>Kitchen Camera Disk Write Rate</summary>
    public NumericSensorEntity KitchenCameraDiskWriteRate => new(_haContext, "sensor.kitchen_camera_disk_write_rate");
    ///<summary>Kitchen Camera Microphone Level</summary>
    public NumericSensorEntity KitchenCameraMicrophoneLevel => new(_haContext, "sensor.kitchen_camera_microphone_level");
    ///<summary>Hallway Camera RX</summary>
    public NumericSensorEntity KitchenCameraRx => new(_haContext, "sensor.kitchen_camera_rx");
    ///<summary>Kitchen Camera Storage Used</summary>
    public NumericSensorEntity KitchenCameraStorageUsed => new(_haContext, "sensor.kitchen_camera_storage_used");
    ///<summary>Hallway Camera TX</summary>
    public NumericSensorEntity KitchenCameraTx => new(_haContext, "sensor.kitchen_camera_tx");
    ///<summary>Kitchen Echo Show RX</summary>
    public NumericSensorEntity KitchenEchoShowRx => new(_haContext, "sensor.kitchen_echo_show_rx");
    ///<summary>Kitchen Echo Show TX</summary>
    public NumericSensorEntity KitchenEchoShowTx => new(_haContext, "sensor.kitchen_echo_show_tx");
    ///<summary>Kitchen Camera RX</summary>
    public NumericSensorEntity KitchenRx => new(_haContext, "sensor.kitchen_rx");
    ///<summary>Kitchen Camera TX</summary>
    public NumericSensorEntity KitchenTx => new(_haContext, "sensor.kitchen_tx");
    ///<summary>Landing current</summary>
    public NumericSensorEntity LandingCurrent => new(_haContext, "sensor.landing_current");
    ///<summary>Landing device temperature</summary>
    public NumericSensorEntity LandingDeviceTemperature => new(_haContext, "sensor.landing_device_temperature");
    ///<summary>Landing energy</summary>
    public NumericSensorEntity LandingEnergy => new(_haContext, "sensor.landing_energy");
    ///<summary>Landing frequency</summary>
    public NumericSensorEntity LandingFrequency => new(_haContext, "sensor.landing_frequency");
    ///<summary>Landing power</summary>
    public NumericSensorEntity LandingPower => new(_haContext, "sensor.landing_power");
    ///<summary>Landing voltage</summary>
    public NumericSensorEntity LandingVoltage => new(_haContext, "sensor.landing_voltage");
    ///<summary>Loft Hatch battery</summary>
    public NumericSensorEntity LoftHatchBattery => new(_haContext, "sensor.loft_hatch_battery");
    ///<summary>Loft Hatch linkquality</summary>
    public NumericSensorEntity LoftHatchLinkquality => new(_haContext, "sensor.loft_hatch_linkquality");
    ///<summary>Loft Hatch voltage</summary>
    public NumericSensorEntity LoftHatchVoltage => new(_haContext, "sensor.loft_hatch_voltage");
    ///<summary>Lounge Echo Plus RX</summary>
    public NumericSensorEntity LoungeEchoPlusRx => new(_haContext, "sensor.lounge_echo_plus_rx");
    ///<summary>Lounge Echo Plus TX</summary>
    public NumericSensorEntity LoungeEchoPlusTx => new(_haContext, "sensor.lounge_echo_plus_tx");
    ///<summary>Lounge Fire TV RX</summary>
    public NumericSensorEntity LoungeFireTvRx => new(_haContext, "sensor.lounge_fire_tv_rx");
    ///<summary>Lounge Fire TV TX</summary>
    public NumericSensorEntity LoungeFireTvTx => new(_haContext, "sensor.lounge_fire_tv_tx");
    ///<summary>Lounge Illuminance</summary>
    public NumericSensorEntity LoungeIlluminance => new(_haContext, "sensor.lounge_illuminance");
    ///<summary>Lounge Remote Battery</summary>
    public NumericSensorEntity LoungeRemoteBattery => new(_haContext, "sensor.lounge_remote_battery");
    ///<summary>Lounge TV Energy Meter</summary>
    public NumericSensorEntity LoungeTvEnergyMeter => new(_haContext, "sensor.lounge_tv_energy_meter");
    ///<summary>Lounge TV Power Meter</summary>
    public NumericSensorEntity LoungeTvPowerMeter => new(_haContext, "sensor.lounge_tv_power_meter");
    ///<summary>Lounge TV RX</summary>
    public NumericSensorEntity LoungeTvRx => new(_haContext, "sensor.lounge_tv_rx");
    ///<summary>Lounge TV TX</summary>
    public NumericSensorEntity LoungeTvTx => new(_haContext, "sensor.lounge_tv_tx");
    ///<summary>Lounge TV Volume</summary>
    public NumericSensorEntity LoungeTvVolume => new(_haContext, "sensor.lounge_tv_volume");
    ///<summary>Battery</summary>
    public NumericSensorEntity MarkBattery => new(_haContext, "sensor.mark_battery");
    ///<summary>Met Office Heaton Chapel Feels like temperature 3-hourly</summary>
    public NumericSensorEntity MetOfficeHeatonChapelFeelsLikeTemperature3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_feels_like_temperature_3_hourly");
    ///<summary>Met Office Heaton Chapel Feels like temperature daily</summary>
    public NumericSensorEntity MetOfficeHeatonChapelFeelsLikeTemperatureDaily => new(_haContext, "sensor.met_office_heaton_chapel_feels_like_temperature_daily");
    ///<summary>Met Office Heaton Chapel Humidity 3-hourly</summary>
    public NumericSensorEntity MetOfficeHeatonChapelHumidity3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_humidity_3_hourly");
    ///<summary>Met Office Heaton Chapel Humidity daily</summary>
    public NumericSensorEntity MetOfficeHeatonChapelHumidityDaily => new(_haContext, "sensor.met_office_heaton_chapel_humidity_daily");
    ///<summary>Met Office Heaton Chapel Probability of precipitation 3-hourly</summary>
    public NumericSensorEntity MetOfficeHeatonChapelProbabilityOfPrecipitation3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_probability_of_precipitation_3_hourly");
    ///<summary>Met Office Heaton Chapel Probability of precipitation daily</summary>
    public NumericSensorEntity MetOfficeHeatonChapelProbabilityOfPrecipitationDaily => new(_haContext, "sensor.met_office_heaton_chapel_probability_of_precipitation_daily");
    ///<summary>Met Office Heaton Chapel Temperature 3-hourly</summary>
    public NumericSensorEntity MetOfficeHeatonChapelTemperature3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_temperature_3_hourly");
    ///<summary>Met Office Heaton Chapel Temperature daily</summary>
    public NumericSensorEntity MetOfficeHeatonChapelTemperatureDaily => new(_haContext, "sensor.met_office_heaton_chapel_temperature_daily");
    ///<summary>Met Office Heaton Chapel UV index 3-hourly</summary>
    public NumericSensorEntity MetOfficeHeatonChapelUvIndex3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_uv_index_3_hourly");
    ///<summary>Met Office Heaton Chapel UV index daily</summary>
    public NumericSensorEntity MetOfficeHeatonChapelUvIndexDaily => new(_haContext, "sensor.met_office_heaton_chapel_uv_index_daily");
    ///<summary>Visibility distance 3-hourly</summary>
    public NumericSensorEntity MetOfficeHeatonChapelVisibilityDistance3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_visibility_distance_3_hourly");
    ///<summary>Visibility distance daily</summary>
    public NumericSensorEntity MetOfficeHeatonChapelVisibilityDistanceDaily => new(_haContext, "sensor.met_office_heaton_chapel_visibility_distance_daily");
    ///<summary>Met Office Heaton Chapel Wind gust 3-hourly</summary>
    public NumericSensorEntity MetOfficeHeatonChapelWindGust3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_wind_gust_3_hourly");
    ///<summary>Met Office Heaton Chapel Wind gust daily</summary>
    public NumericSensorEntity MetOfficeHeatonChapelWindGustDaily => new(_haContext, "sensor.met_office_heaton_chapel_wind_gust_daily");
    ///<summary>Met Office Heaton Chapel Wind speed 3-hourly</summary>
    public NumericSensorEntity MetOfficeHeatonChapelWindSpeed3Hourly => new(_haContext, "sensor.met_office_heaton_chapel_wind_speed_3_hourly");
    ///<summary>Met Office Heaton Chapel Wind speed daily</summary>
    public NumericSensorEntity MetOfficeHeatonChapelWindSpeedDaily => new(_haContext, "sensor.met_office_heaton_chapel_wind_speed_daily");
    ///<summary>Black ink remaining</summary>
    public NumericSensorEntity MfcJ5910dwBlackInkRemaining => new(_haContext, "sensor.mfc_j5910dw_black_ink_remaining");
    ///<summary>Cyan ink remaining</summary>
    public NumericSensorEntity MfcJ5910dwCyanInkRemaining => new(_haContext, "sensor.mfc_j5910dw_cyan_ink_remaining");
    ///<summary>Magenta ink remaining</summary>
    public NumericSensorEntity MfcJ5910dwMagentaInkRemaining => new(_haContext, "sensor.mfc_j5910dw_magenta_ink_remaining");
    ///<summary>Page counter</summary>
    public NumericSensorEntity MfcJ5910dwPageCounter => new(_haContext, "sensor.mfc_j5910dw_page_counter");
    ///<summary>Yellow ink remaining</summary>
    public NumericSensorEntity MfcJ5910dwYellowInkRemaining => new(_haContext, "sensor.mfc_j5910dw_yellow_ink_remaining");
    ///<summary>netgear-gs724tp-attic RX</summary>
    public NumericSensorEntity NetgearGs724tpAtticRx => new(_haContext, "sensor.netgear_gs724tp_attic_rx");
    ///<summary>netgear-gs724tp-attic TX</summary>
    public NumericSensorEntity NetgearGs724tpAtticTx => new(_haContext, "sensor.netgear_gs724tp_attic_tx");
    ///<summary>netgear-gs724tp-basement RX</summary>
    public NumericSensorEntity NetgearGs724tpBasementRx => new(_haContext, "sensor.netgear_gs724tp_basement_rx");
    ///<summary>netgear-gs724tp-basement TX</summary>
    public NumericSensorEntity NetgearGs724tpBasementTx => new(_haContext, "sensor.netgear_gs724tp_basement_tx");
    ///<summary>nspanel RSSI</summary>
    public NumericSensorEntity NspanelRssi => new(_haContext, "sensor.nspanel_rssi");
    ///<summary>nspanel Temperature</summary>
    public NumericSensorEntity NspanelTemperature => new(_haContext, "sensor.nspanel_temperature");
    ///<summary>Electricity 22J0181544 1610019557951 Current Rate</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951CurrentRate => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_current_rate");
    ///<summary>Electricity 22J0181544 1610019557951 Current Standing Charge</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951CurrentStandingCharge => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_current_standing_charge");
    ///<summary>Electricity 22J0181544 1610019557951 Next Rate</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951NextRate => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_next_rate");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Accumulative Consumption</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeConsumption => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_consumption");
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeConsumptionCost => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_consumption_cost");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Accumulative Consumption (Off Peak)</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeConsumptionOffPeak => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_consumption_off_peak");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Accumulative Consumption (Peak)</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeConsumptionPeak => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_consumption_peak");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Accumulative Cost</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeCost => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_cost");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Accumulative Cost (Off Peak)</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeCostOffPeak => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_cost_off_peak");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Accumulative Cost Override</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeCostOverride => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_cost_override");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Accumulative Cost (Peak)</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeCostPeak => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_cost_peak");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Rate</summary>
    public NumericSensorEntity OctopusEnergyElectricity22j01815441610019557951PreviousRate => new(_haContext, "sensor.octopus_energy_electricity_22j0181544_1610019557951_previous_rate");
    ///<summary>Gas E6E09476682323 1590806503 Current Rate</summary>
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503CurrentRate => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_current_rate");
    ///<summary>Gas E6E09476682323 1590806503 Current Standing Charge</summary>
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503CurrentStandingCharge => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_current_standing_charge");
    ///<summary>Gas E6E09476682323 1590806503 Next Rate</summary>
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503NextRate => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_next_rate");
    ///<summary>Gas E6E09476682323 1590806503 Previous Accumulative Consumption</summary>
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503PreviousAccumulativeConsumption => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_previous_accumulative_consumption");
    ///<summary>Gas E6E09476682323 1590806503 Previous Accumulative Consumption (kWh)</summary>
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503PreviousAccumulativeConsumptionKwh => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_previous_accumulative_consumption_kwh");
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503PreviousAccumulativeConsumptionKwhCost => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_previous_accumulative_consumption_kwh_cost");
    ///<summary>Gas E6E09476682323 1590806503 Previous Accumulative Cost</summary>
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503PreviousAccumulativeCost => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_previous_accumulative_cost");
    ///<summary>Gas E6E09476682323 1590806503 Previous Accumulative Cost Override</summary>
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503PreviousAccumulativeCostOverride => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_previous_accumulative_cost_override");
    ///<summary>Gas E6E09476682323 1590806503 Previous Rate</summary>
    public NumericSensorEntity OctopusEnergyGasE6e094766823231590806503PreviousRate => new(_haContext, "sensor.octopus_energy_gas_e6e09476682323_1590806503_previous_rate");
    ///<summary>OnePlus5T RX</summary>
    public NumericSensorEntity Oneplus5tRx => new(_haContext, "sensor.oneplus5t_rx");
    ///<summary>OnePlus5T TX</summary>
    public NumericSensorEntity Oneplus5tTx => new(_haContext, "sensor.oneplus5t_tx");
    ///<summary>RX</summary>
    public NumericSensorEntity PamSA32Rx => new(_haContext, "sensor.pam_s_a32_rx");
    ///<summary>TX</summary>
    public NumericSensorEntity PamSA32Tx => new(_haContext, "sensor.pam_s_a32_tx");
    ///<summary>Patio Camera Disk Write Rate</summary>
    public NumericSensorEntity PatioCameraDiskWriteRate => new(_haContext, "sensor.patio_camera_disk_write_rate");
    ///<summary>Patio Camera Microphone Level</summary>
    public NumericSensorEntity PatioCameraMicrophoneLevel => new(_haContext, "sensor.patio_camera_microphone_level");
    ///<summary>Patio Camera RX</summary>
    public NumericSensorEntity PatioCameraRx => new(_haContext, "sensor.patio_camera_rx");
    ///<summary>Patio Camera Storage Used</summary>
    public NumericSensorEntity PatioCameraStorageUsed => new(_haContext, "sensor.patio_camera_storage_used");
    ///<summary>Patio Camera TX</summary>
    public NumericSensorEntity PatioCameraTx => new(_haContext, "sensor.patio_camera_tx");
    ///<summary>Pixel 6 Battery level</summary>
    public NumericSensorEntity Pixel6BatteryLevel => new(_haContext, "sensor.pixel_6_battery_level");
    ///<summary>Pixel-6 RX</summary>
    public NumericSensorEntity Pixel6Rx => new(_haContext, "sensor.pixel_6_rx");
    ///<summary>Pixel-6 RX</summary>
    public NumericSensorEntity Pixel6Rx2 => new(_haContext, "sensor.pixel_6_rx_2");
    ///<summary>Pixel-6 RX</summary>
    public NumericSensorEntity Pixel6Rx3 => new(_haContext, "sensor.pixel_6_rx_3");
    ///<summary>Pixel-6 RX</summary>
    public NumericSensorEntity Pixel6Rx4 => new(_haContext, "sensor.pixel_6_rx_4");
    ///<summary>Pixel-6 RX</summary>
    public NumericSensorEntity Pixel6Rx5 => new(_haContext, "sensor.pixel_6_rx_5");
    ///<summary>Pixel-6 TX</summary>
    public NumericSensorEntity Pixel6Tx => new(_haContext, "sensor.pixel_6_tx");
    ///<summary>Pixel-6 TX</summary>
    public NumericSensorEntity Pixel6Tx2 => new(_haContext, "sensor.pixel_6_tx_2");
    ///<summary>Pixel-6 TX</summary>
    public NumericSensorEntity Pixel6Tx3 => new(_haContext, "sensor.pixel_6_tx_3");
    ///<summary>Pixel-6 TX</summary>
    public NumericSensorEntity Pixel6Tx4 => new(_haContext, "sensor.pixel_6_tx_4");
    ///<summary>Pixel-6 TX</summary>
    public NumericSensorEntity Pixel6Tx5 => new(_haContext, "sensor.pixel_6_tx_5");
    ///<summary>Presence-Sensor-FP2-8D3C RX</summary>
    public NumericSensorEntity PresenceSensorFp28d3cRx => new(_haContext, "sensor.presence_sensor_fp2_8d3c_rx");
    ///<summary>Presence-Sensor-FP2-8D3C TX</summary>
    public NumericSensorEntity PresenceSensorFp28d3cTx => new(_haContext, "sensor.presence_sensor_fp2_8d3c_tx");
    ///<summary>Presence-Sensor-FP2-CEBC RX</summary>
    public NumericSensorEntity PresenceSensorFp2CebcRx => new(_haContext, "sensor.presence_sensor_fp2_cebc_rx");
    ///<summary>Presence-Sensor-FP2-CEBC TX</summary>
    public NumericSensorEntity PresenceSensorFp2CebcTx => new(_haContext, "sensor.presence_sensor_fp2_cebc_tx");
    ///<summary>Cat Feeder Last amount</summary>
    public NumericSensorEntity RojecoPetFeederLastAmount => new(_haContext, "sensor.rojeco_pet_feeder_last_amount");
    ///<summary>Hallway Tablet RX</summary>
    public NumericSensorEntity Rx => new(_haContext, "sensor.rx");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx10 => new(_haContext, "sensor.rx_10");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx11 => new(_haContext, "sensor.rx_11");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx12 => new(_haContext, "sensor.rx_12");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx13 => new(_haContext, "sensor.rx_13");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx14 => new(_haContext, "sensor.rx_14");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx15 => new(_haContext, "sensor.rx_15");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx16 => new(_haContext, "sensor.rx_16");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx17 => new(_haContext, "sensor.rx_17");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx18 => new(_haContext, "sensor.rx_18");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx19 => new(_haContext, "sensor.rx_19");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx2 => new(_haContext, "sensor.rx_2");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx20 => new(_haContext, "sensor.rx_20");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx21 => new(_haContext, "sensor.rx_21");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx22 => new(_haContext, "sensor.rx_22");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx23 => new(_haContext, "sensor.rx_23");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx24 => new(_haContext, "sensor.rx_24");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx25 => new(_haContext, "sensor.rx_25");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx26 => new(_haContext, "sensor.rx_26");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx27 => new(_haContext, "sensor.rx_27");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx28 => new(_haContext, "sensor.rx_28");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx29 => new(_haContext, "sensor.rx_29");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx3 => new(_haContext, "sensor.rx_3");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx30 => new(_haContext, "sensor.rx_30");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx31 => new(_haContext, "sensor.rx_31");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx32 => new(_haContext, "sensor.rx_32");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx33 => new(_haContext, "sensor.rx_33");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx34 => new(_haContext, "sensor.rx_34");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx35 => new(_haContext, "sensor.rx_35");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx36 => new(_haContext, "sensor.rx_36");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx37 => new(_haContext, "sensor.rx_37");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx38 => new(_haContext, "sensor.rx_38");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx39 => new(_haContext, "sensor.rx_39");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx4 => new(_haContext, "sensor.rx_4");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx40 => new(_haContext, "sensor.rx_40");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx41 => new(_haContext, "sensor.rx_41");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx42 => new(_haContext, "sensor.rx_42");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx43 => new(_haContext, "sensor.rx_43");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx44 => new(_haContext, "sensor.rx_44");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx45 => new(_haContext, "sensor.rx_45");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx46 => new(_haContext, "sensor.rx_46");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx47 => new(_haContext, "sensor.rx_47");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx48 => new(_haContext, "sensor.rx_48");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx49 => new(_haContext, "sensor.rx_49");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx5 => new(_haContext, "sensor.rx_5");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx50 => new(_haContext, "sensor.rx_50");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx51 => new(_haContext, "sensor.rx_51");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx52 => new(_haContext, "sensor.rx_52");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx53 => new(_haContext, "sensor.rx_53");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx54 => new(_haContext, "sensor.rx_54");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx55 => new(_haContext, "sensor.rx_55");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx56 => new(_haContext, "sensor.rx_56");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx57 => new(_haContext, "sensor.rx_57");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx58 => new(_haContext, "sensor.rx_58");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx59 => new(_haContext, "sensor.rx_59");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx6 => new(_haContext, "sensor.rx_6");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx60 => new(_haContext, "sensor.rx_60");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx61 => new(_haContext, "sensor.rx_61");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx62 => new(_haContext, "sensor.rx_62");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx63 => new(_haContext, "sensor.rx_63");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx64 => new(_haContext, "sensor.rx_64");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx65 => new(_haContext, "sensor.rx_65");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx66 => new(_haContext, "sensor.rx_66");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx7 => new(_haContext, "sensor.rx_7");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx8 => new(_haContext, "sensor.rx_8");
    ///<summary>RX</summary>
    public NumericSensorEntity Rx9 => new(_haContext, "sensor.rx_9");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity S424d3be485e872ccc483cEstimatedDistance => new(_haContext, "sensor.s424d3be485e872ccc_483c_estimated_distance");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity S56bd949cabb74974cCa91EstimatedDistance => new(_haContext, "sensor.s56bd949cabb74974c_ca91_estimated_distance");
    ///<summary>AdGuard Home Safe searches enforced</summary>
    public NumericSensorEntity SearchesSafeSearchEnforced => new(_haContext, "sensor.searches_safe_search_enforced");
    ///<summary>Estimated Distance</summary>
    public NumericSensorEntity Sfd85968e835924d1c6058EstimatedDistance => new(_haContext, "sensor.sfd85968e835924d1c_6058_estimated_distance");
    ///<summary>Shed Camera Disk Write Rate</summary>
    public NumericSensorEntity ShedCameraDiskWriteRate => new(_haContext, "sensor.shed_camera_disk_write_rate");
    ///<summary>Shed Camera Microphone Level</summary>
    public NumericSensorEntity ShedCameraMicrophoneLevel => new(_haContext, "sensor.shed_camera_microphone_level");
    ///<summary>Shed Camera Storage Used</summary>
    public NumericSensorEntity ShedCameraStorageUsed => new(_haContext, "sensor.shed_camera_storage_used");
    ///<summary>Shed current</summary>
    public NumericSensorEntity ShedCurrent => new(_haContext, "sensor.shed_current");
    ///<summary>Shed Current Temperature</summary>
    public NumericSensorEntity ShedCurrentTemperature => new(_haContext, "sensor.shed_current_temperature");
    ///<summary>Shed device temperature</summary>
    public NumericSensorEntity ShedDeviceTemperature => new(_haContext, "sensor.shed_device_temperature");
    ///<summary>Shed Echo Input RX</summary>
    public NumericSensorEntity ShedEchoInputRx => new(_haContext, "sensor.shed_echo_input_rx");
    ///<summary>Shed Echo Input TX</summary>
    public NumericSensorEntity ShedEchoInputTx => new(_haContext, "sensor.shed_echo_input_tx");
    ///<summary>Shed energy</summary>
    public NumericSensorEntity ShedEnergy => new(_haContext, "sensor.shed_energy");
    ///<summary>Shed Floor Temperature</summary>
    public NumericSensorEntity ShedFloorTemperature => new(_haContext, "sensor.shed_floor_temperature");
    ///<summary>Shed frequency</summary>
    public NumericSensorEntity ShedFrequency => new(_haContext, "sensor.shed_frequency");
    ///<summary>Shed power</summary>
    public NumericSensorEntity ShedPower => new(_haContext, "sensor.shed_power");
    ///<summary>Shed Camera RX</summary>
    public NumericSensorEntity ShedRx => new(_haContext, "sensor.shed_rx");
    ///<summary>Shed Thermostat RX</summary>
    public NumericSensorEntity ShedThermostatRx => new(_haContext, "sensor.shed_thermostat_rx");
    ///<summary>Shed Thermostat TX</summary>
    public NumericSensorEntity ShedThermostatTx => new(_haContext, "sensor.shed_thermostat_tx");
    ///<summary>Shed Camera TX</summary>
    public NumericSensorEntity ShedTx => new(_haContext, "sensor.shed_tx");
    ///<summary>Shed voltage</summary>
    public NumericSensorEntity ShedVoltage => new(_haContext, "sensor.shed_voltage");
    ///<summary>Shelly Shed Lights RX</summary>
    public NumericSensorEntity ShellyShedLightsRx => new(_haContext, "sensor.shelly_shed_lights_rx");
    ///<summary>Shelly Shed Lights TX</summary>
    public NumericSensorEntity ShellyShedLightsTx => new(_haContext, "sensor.shelly_shed_lights_tx");
    ///<summary>Shelly Shed Sockets RX</summary>
    public NumericSensorEntity ShellyShedSocketsRx => new(_haContext, "sensor.shelly_shed_sockets_rx");
    ///<summary>Shelly Shed Sockets TX</summary>
    public NumericSensorEntity ShellyShedSocketsTx => new(_haContext, "sensor.shelly_shed_sockets_tx");
    ///<summary>Shelly Upstairs Lights 1 RX</summary>
    public NumericSensorEntity ShellyUpstairsLights1Rx => new(_haContext, "sensor.shelly_upstairs_lights_1_rx");
    ///<summary>Shelly Upstairs Lights 1 TX</summary>
    public NumericSensorEntity ShellyUpstairsLights1Tx => new(_haContext, "sensor.shelly_upstairs_lights_1_tx");
    ///<summary>SM-R860 RX</summary>
    public NumericSensorEntity SmR860Rx => new(_haContext, "sensor.sm_r860_rx");
    ///<summary>SM-R860 TX</summary>
    public NumericSensorEntity SmR860Tx => new(_haContext, "sensor.sm_r860_tx");
    ///<summary>Signal Strength</summary>
    public NumericSensorEntity SmartSeries700047aeSignalStrength => new(_haContext, "sensor.smart_series_7000_47ae_signal_strength");
    ///<summary>Time</summary>
    public NumericSensorEntity SmartSeries700047aeTime => new(_haContext, "sensor.smart_series_7000_47ae_time");
    ///<summary>Snug Illuminance</summary>
    public NumericSensorEntity SnugIllumenance => new(_haContext, "sensor.snug_illumenance");
    ///<summary>Snug Led Strip Linkquality</summary>
    public NumericSensorEntity SnugLedStripLinkquality => new(_haContext, "sensor.snug_led_strip_linkquality");
    ///<summary>Snug Switch Battery</summary>
    public NumericSensorEntity SnugSwitchBattery => new(_haContext, "sensor.snug_switch_battery");
    ///<summary>Sonoff-Basement-1 RX</summary>
    public NumericSensorEntity SonoffBasement1Rx => new(_haContext, "sensor.sonoff_basement_1_rx");
    ///<summary>Sonoff Basement 1 Signal</summary>
    public NumericSensorEntity SonoffBasement1Signal => new(_haContext, "sensor.sonoff_basement_1_signal");
    ///<summary>Sonoff-Basement-1 TX</summary>
    public NumericSensorEntity SonoffBasement1Tx => new(_haContext, "sensor.sonoff_basement_1_tx");
    ///<summary>Sonoff Basement 1 Uptime</summary>
    public NumericSensorEntity SonoffBasement1Uptime => new(_haContext, "sensor.sonoff_basement_1_uptime");
    ///<summary>Sonoff-Basement-2 RX</summary>
    public NumericSensorEntity SonoffBasement2Rx => new(_haContext, "sensor.sonoff_basement_2_rx");
    ///<summary>Sonoff Basement 2 Signal</summary>
    public NumericSensorEntity SonoffBasement2Signal => new(_haContext, "sensor.sonoff_basement_2_signal");
    ///<summary>Sonoff-Basement-2 TX</summary>
    public NumericSensorEntity SonoffBasement2Tx => new(_haContext, "sensor.sonoff_basement_2_tx");
    ///<summary>Sonoff Basement 2 Uptime</summary>
    public NumericSensorEntity SonoffBasement2Uptime => new(_haContext, "sensor.sonoff_basement_2_uptime");
    ///<summary>Sonoff Bridge 1 status</summary>
    public NumericSensorEntity SonoffBridge1Status => new(_haContext, "sensor.sonoff_bridge_1_status");
    ///<summary>Sonoff-Downstairs-1 RX</summary>
    public NumericSensorEntity SonoffDownstairs1Rx => new(_haContext, "sensor.sonoff_downstairs_1_rx");
    ///<summary>Sonoff Downstairs 1 Signal</summary>
    public NumericSensorEntity SonoffDownstairs1Signal => new(_haContext, "sensor.sonoff_downstairs_1_signal");
    ///<summary>Sonoff-Downstairs-1 TX</summary>
    public NumericSensorEntity SonoffDownstairs1Tx => new(_haContext, "sensor.sonoff_downstairs_1_tx");
    ///<summary>Sonoff Downstairs 1 Uptime</summary>
    public NumericSensorEntity SonoffDownstairs1Uptime => new(_haContext, "sensor.sonoff_downstairs_1_uptime");
    ///<summary>Sonoff-Downstairs-2 RX</summary>
    public NumericSensorEntity SonoffDownstairs2Rx => new(_haContext, "sensor.sonoff_downstairs_2_rx");
    ///<summary>Sonoff Downstairs 2 Signal</summary>
    public NumericSensorEntity SonoffDownstairs2Signal => new(_haContext, "sensor.sonoff_downstairs_2_signal");
    ///<summary>Sonoff-Downstairs-2 TX</summary>
    public NumericSensorEntity SonoffDownstairs2Tx => new(_haContext, "sensor.sonoff_downstairs_2_tx");
    ///<summary>Sonoff Downstairs 2 Uptime</summary>
    public NumericSensorEntity SonoffDownstairs2Uptime => new(_haContext, "sensor.sonoff_downstairs_2_uptime");
    ///<summary>Sonoff-Outside-1 RX</summary>
    public NumericSensorEntity SonoffOutside1Rx => new(_haContext, "sensor.sonoff_outside_1_rx");
    ///<summary>Sonoff Outside 1 Signal</summary>
    public NumericSensorEntity SonoffOutside1Signal => new(_haContext, "sensor.sonoff_outside_1_signal");
    ///<summary>Sonoff-Outside-1 TX</summary>
    public NumericSensorEntity SonoffOutside1Tx => new(_haContext, "sensor.sonoff_outside_1_tx");
    ///<summary>Sonoff Outside 1 Uptime</summary>
    public NumericSensorEntity SonoffOutside1Uptime => new(_haContext, "sensor.sonoff_outside_1_uptime");
    ///<summary>Sonoff-Upstairs-2 RX</summary>
    public NumericSensorEntity SonoffUpstairs2Rx => new(_haContext, "sensor.sonoff_upstairs_2_rx");
    ///<summary>Sonoff Upstairs 2 Signal</summary>
    public NumericSensorEntity SonoffUpstairs2Signal => new(_haContext, "sensor.sonoff_upstairs_2_signal");
    ///<summary>Sonoff-Upstairs-2 TX</summary>
    public NumericSensorEntity SonoffUpstairs2Tx => new(_haContext, "sensor.sonoff_upstairs_2_tx");
    ///<summary>Sonoff Upstairs 2 Uptime</summary>
    public NumericSensorEntity SonoffUpstairs2Uptime => new(_haContext, "sensor.sonoff_upstairs_2_uptime");
    ///<summary>SpeedTest Download</summary>
    public NumericSensorEntity SpeedtestDownload => new(_haContext, "sensor.speedtest_download");
    ///<summary>SpeedTest Ping</summary>
    public NumericSensorEntity SpeedtestPing => new(_haContext, "sensor.speedtest_ping");
    ///<summary>SpeedTest Upload</summary>
    public NumericSensorEntity SpeedtestUpload => new(_haContext, "sensor.speedtest_upload");
    ///<summary>Squeezebox Dining Room RX</summary>
    public NumericSensorEntity SqueezeboxDiningRoomRx => new(_haContext, "sensor.squeezebox_dining_room_rx");
    ///<summary>Squeezebox Dining Room TX</summary>
    public NumericSensorEntity SqueezeboxDiningRoomTx => new(_haContext, "sensor.squeezebox_dining_room_tx");
    ///<summary>studio-bluetooth-proxy Free Mem</summary>
    public NumericSensorEntity StudioBluetoothProxyFreeMem => new(_haContext, "sensor.studio_bluetooth_proxy_free_mem");
    ///<summary>studio-bluetooth-proxy RX</summary>
    public NumericSensorEntity StudioBluetoothProxyRx => new(_haContext, "sensor.studio_bluetooth_proxy_rx");
    ///<summary>studio-bluetooth-proxy TX</summary>
    public NumericSensorEntity StudioBluetoothProxyTx => new(_haContext, "sensor.studio_bluetooth_proxy_tx");
    ///<summary>studio-bluetooth-proxy Uptime</summary>
    public NumericSensorEntity StudioBluetoothProxyUptime2 => new(_haContext, "sensor.studio_bluetooth_proxy_uptime_2");
    ///<summary>Sump-Alarm RX</summary>
    public NumericSensorEntity SumpAlarmRx => new(_haContext, "sensor.sump_alarm_rx");
    ///<summary>Sump-Alarm TX</summary>
    public NumericSensorEntity SumpAlarmTx => new(_haContext, "sensor.sump_alarm_tx");
    ///<summary>Sump Alarm Uptime</summary>
    public NumericSensorEntity SumpAlarmUptime => new(_haContext, "sensor.sump_alarm_uptime");
    ///<summary>Sump Alarm WiFi Signal</summary>
    public NumericSensorEntity SumpAlarmWifiSignal => new(_haContext, "sensor.sump_alarm_wifi_signal");
    ///<summary>Toilet Door Battery</summary>
    public NumericSensorEntity ToiletDoorBattery => new(_haContext, "sensor.toilet_door_battery");
    ///<summary>Toilet Door Linkquality</summary>
    public NumericSensorEntity ToiletDoorLinkquality => new(_haContext, "sensor.toilet_door_linkquality");
    ///<summary>Toilet Door Voltage</summary>
    public NumericSensorEntity ToiletDoorVoltage => new(_haContext, "sensor.toilet_door_voltage");
    ///<summary>Hallway Tablet TX</summary>
    public NumericSensorEntity Tx => new(_haContext, "sensor.tx");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx10 => new(_haContext, "sensor.tx_10");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx11 => new(_haContext, "sensor.tx_11");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx12 => new(_haContext, "sensor.tx_12");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx13 => new(_haContext, "sensor.tx_13");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx14 => new(_haContext, "sensor.tx_14");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx15 => new(_haContext, "sensor.tx_15");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx16 => new(_haContext, "sensor.tx_16");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx17 => new(_haContext, "sensor.tx_17");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx18 => new(_haContext, "sensor.tx_18");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx19 => new(_haContext, "sensor.tx_19");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx2 => new(_haContext, "sensor.tx_2");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx20 => new(_haContext, "sensor.tx_20");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx21 => new(_haContext, "sensor.tx_21");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx22 => new(_haContext, "sensor.tx_22");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx23 => new(_haContext, "sensor.tx_23");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx24 => new(_haContext, "sensor.tx_24");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx25 => new(_haContext, "sensor.tx_25");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx26 => new(_haContext, "sensor.tx_26");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx27 => new(_haContext, "sensor.tx_27");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx28 => new(_haContext, "sensor.tx_28");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx29 => new(_haContext, "sensor.tx_29");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx3 => new(_haContext, "sensor.tx_3");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx30 => new(_haContext, "sensor.tx_30");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx31 => new(_haContext, "sensor.tx_31");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx32 => new(_haContext, "sensor.tx_32");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx33 => new(_haContext, "sensor.tx_33");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx34 => new(_haContext, "sensor.tx_34");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx35 => new(_haContext, "sensor.tx_35");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx36 => new(_haContext, "sensor.tx_36");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx37 => new(_haContext, "sensor.tx_37");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx38 => new(_haContext, "sensor.tx_38");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx39 => new(_haContext, "sensor.tx_39");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx4 => new(_haContext, "sensor.tx_4");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx40 => new(_haContext, "sensor.tx_40");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx41 => new(_haContext, "sensor.tx_41");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx42 => new(_haContext, "sensor.tx_42");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx43 => new(_haContext, "sensor.tx_43");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx44 => new(_haContext, "sensor.tx_44");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx45 => new(_haContext, "sensor.tx_45");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx46 => new(_haContext, "sensor.tx_46");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx47 => new(_haContext, "sensor.tx_47");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx48 => new(_haContext, "sensor.tx_48");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx49 => new(_haContext, "sensor.tx_49");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx5 => new(_haContext, "sensor.tx_5");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx50 => new(_haContext, "sensor.tx_50");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx51 => new(_haContext, "sensor.tx_51");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx52 => new(_haContext, "sensor.tx_52");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx53 => new(_haContext, "sensor.tx_53");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx54 => new(_haContext, "sensor.tx_54");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx55 => new(_haContext, "sensor.tx_55");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx56 => new(_haContext, "sensor.tx_56");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx57 => new(_haContext, "sensor.tx_57");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx58 => new(_haContext, "sensor.tx_58");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx59 => new(_haContext, "sensor.tx_59");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx6 => new(_haContext, "sensor.tx_6");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx60 => new(_haContext, "sensor.tx_60");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx61 => new(_haContext, "sensor.tx_61");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx62 => new(_haContext, "sensor.tx_62");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx63 => new(_haContext, "sensor.tx_63");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx64 => new(_haContext, "sensor.tx_64");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx65 => new(_haContext, "sensor.tx_65");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx66 => new(_haContext, "sensor.tx_66");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx7 => new(_haContext, "sensor.tx_7");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx8 => new(_haContext, "sensor.tx_8");
    ///<summary>TX</summary>
    public NumericSensorEntity Tx9 => new(_haContext, "sensor.tx_9");
    ///<summary>UDMPRO Cpu Temperature</summary>
    public NumericSensorEntity UdmproCpuTemperature => new(_haContext, "sensor.udmpro_cpu_temperature");
    ///<summary>UDMPRO Cpu Utilization</summary>
    public NumericSensorEntity UdmproCpuUtilization => new(_haContext, "sensor.udmpro_cpu_utilization");
    ///<summary>UDMPRO Memory Utilization</summary>
    public NumericSensorEntity UdmproMemoryUtilization => new(_haContext, "sensor.udmpro_memory_utilization");
    ///<summary>UDMPRO Recording Capacity</summary>
    public NumericSensorEntity UdmproRecordingCapacity => new(_haContext, "sensor.udmpro_recording_capacity");
    ///<summary>UDMPRO Resolution: 4K Video</summary>
    public NumericSensorEntity UdmproResolution4kVideo => new(_haContext, "sensor.udmpro_resolution_4k_video");
    ///<summary>UDMPRO Resolution: Free Space</summary>
    public NumericSensorEntity UdmproResolutionFreeSpace => new(_haContext, "sensor.udmpro_resolution_free_space");
    ///<summary>UDMPRO Resolution: Hd Video</summary>
    public NumericSensorEntity UdmproResolutionHdVideo => new(_haContext, "sensor.udmpro_resolution_hd_video");
    ///<summary>UDMPRO Storage Utilization</summary>
    public NumericSensorEntity UdmproStorageUtilization => new(_haContext, "sensor.udmpro_storage_utilization");
    ///<summary>UDMPRO Type: Continuous Video</summary>
    public NumericSensorEntity UdmproTypeContinuousVideo => new(_haContext, "sensor.udmpro_type_continuous_video");
    ///<summary>UDMPRO Type: Detections Video</summary>
    public NumericSensorEntity UdmproTypeDetectionsVideo => new(_haContext, "sensor.udmpro_type_detections_video");
    ///<summary>UDMPRO Type: Timelapse Video</summary>
    public NumericSensorEntity UdmproTypeTimelapseVideo => new(_haContext, "sensor.udmpro_type_timelapse_video");
    ///<summary>UniFi Dream Machine Download speed</summary>
    public NumericSensorEntity UnifiDreamMachineKibSReceived => new(_haContext, "sensor.unifi_dream_machine_kib_s_received");
    ///<summary>UniFi Dream Machine Upload speed</summary>
    public NumericSensorEntity UnifiDreamMachineKibSSent => new(_haContext, "sensor.unifi_dream_machine_kib_s_sent");
    ///<summary>Upstairs Alarm Panel RX</summary>
    public NumericSensorEntity UpstairsAlarmPanelRx => new(_haContext, "sensor.upstairs_alarm_panel_rx");
    ///<summary>Upstairs Alarm Panel TX</summary>
    public NumericSensorEntity UpstairsAlarmPanelTx => new(_haContext, "sensor.upstairs_alarm_panel_tx");
    ///<summary>Upstairs Humidity</summary>
    public NumericSensorEntity UpstairsHumidity => new(_haContext, "sensor.upstairs_humidity");
    ///<summary>Upstairs Temperature</summary>
    public NumericSensorEntity UpstairsTemperature => new(_haContext, "sensor.upstairs_temperature");
    ///<summary>Upstairs Thermostat RX</summary>
    public NumericSensorEntity UpstairsThermostatRx => new(_haContext, "sensor.upstairs_thermostat_rx");
    ///<summary>Upstairs Thermostat TX</summary>
    public NumericSensorEntity UpstairsThermostatTx => new(_haContext, "sensor.upstairs_thermostat_tx");
    ///<summary>Utility Room Echo Dot RX</summary>
    public NumericSensorEntity UtilityRoomEchoDotRx => new(_haContext, "sensor.utility_room_echo_dot_rx");
    ///<summary>Utility Room Echo Dot TX</summary>
    public NumericSensorEntity UtilityRoomEchoDotTx => new(_haContext, "sensor.utility_room_echo_dot_tx");
    ///<summary>VacuumRobot RX</summary>
    public NumericSensorEntity VacuumrobotRx => new(_haContext, "sensor.vacuumrobot_rx");
    ///<summary>VacuumRobot TX</summary>
    public NumericSensorEntity VacuumrobotTx => new(_haContext, "sensor.vacuumrobot_tx");
    ///<summary>Weather Station Ambient Light</summary>
    public NumericSensorEntity WeatherStationAmbientLight => new(_haContext, "sensor.weather_station_ambient_light");
    ///<summary>Weather Station Pressure</summary>
    public NumericSensorEntity WeatherStationPressure => new(_haContext, "sensor.weather_station_pressure");
    ///<summary>Weather Station Relative Humidity</summary>
    public NumericSensorEntity WeatherStationRelativeHumidity => new(_haContext, "sensor.weather_station_relative_humidity");
    ///<summary>Weather-Station RX</summary>
    public NumericSensorEntity WeatherStationRx => new(_haContext, "sensor.weather_station_rx");
    ///<summary>Weather Station Temperature</summary>
    public NumericSensorEntity WeatherStationTemperature => new(_haContext, "sensor.weather_station_temperature");
    ///<summary>Weather-Station TX</summary>
    public NumericSensorEntity WeatherStationTx => new(_haContext, "sensor.weather_station_tx");
    ///<summary>Weather Station Uptime</summary>
    public NumericSensorEntity WeatherStationUptime => new(_haContext, "sensor.weather_station_uptime");
    ///<summary>Weather Station WiFi Signal</summary>
    public NumericSensorEntity WeatherStationWifiSignal => new(_haContext, "sensor.weather_station_wifi_signal");
    ///<summary>WIFI smart CO alarm Battery</summary>
    public NumericSensorEntity WifiSmartCoAlarmBattery => new(_haContext, "sensor.wifi_smart_co_alarm_battery");
    ///<summary>WIFI smart CO alarm Carbon monoxide</summary>
    public NumericSensorEntity WifiSmartCoAlarmCarbonMonoxide => new(_haContext, "sensor.wifi_smart_co_alarm_carbon_monoxide");
    ///<summary>wlan0 RX</summary>
    public NumericSensorEntity Wlan0Rx => new(_haContext, "sensor.wlan0_rx");
    ///<summary>wlan0 TX</summary>
    public NumericSensorEntity Wlan0Tx => new(_haContext, "sensor.wlan0_tx");
    ///<summary>Yeelight Basement Stairs Light RX</summary>
    public NumericSensorEntity YeelightBasementStairsLightRx => new(_haContext, "sensor.yeelight_basement_stairs_light_rx");
    ///<summary>Yeelight Basement Stairs Light TX</summary>
    public NumericSensorEntity YeelightBasementStairsLightTx => new(_haContext, "sensor.yeelight_basement_stairs_light_tx");
    ///<summary>Yeelight Bedroom Lamp RX</summary>
    public NumericSensorEntity YeelightBedroomLampRx => new(_haContext, "sensor.yeelight_bedroom_lamp_rx");
    ///<summary>Yeelight Bedroom Lamp TX</summary>
    public NumericSensorEntity YeelightBedroomLampTx => new(_haContext, "sensor.yeelight_bedroom_lamp_tx");
    ///<summary>Yeelight Hallway Lamp RX</summary>
    public NumericSensorEntity YeelightHallwayLampRx => new(_haContext, "sensor.yeelight_hallway_lamp_rx");
    ///<summary>Yeelight Hallway Lamp TX</summary>
    public NumericSensorEntity YeelightHallwayLampTx => new(_haContext, "sensor.yeelight_hallway_lamp_tx");
    ///<summary>Yeelight Kitchen Lamp RX</summary>
    public NumericSensorEntity YeelightKitchenLampRx => new(_haContext, "sensor.yeelight_kitchen_lamp_rx");
    ///<summary>Yeelight Kitchen Lamp TX</summary>
    public NumericSensorEntity YeelightKitchenLampTx => new(_haContext, "sensor.yeelight_kitchen_lamp_tx");
    ///<summary>Yeelight Lounge Floor Lamp RX</summary>
    public NumericSensorEntity YeelightLoungeFloorLampRx => new(_haContext, "sensor.yeelight_lounge_floor_lamp_rx");
    ///<summary>Yeelight Lounge Floor Lamp TX</summary>
    public NumericSensorEntity YeelightLoungeFloorLampTx => new(_haContext, "sensor.yeelight_lounge_floor_lamp_tx");
    ///<summary>Yeelight Lounge Lamp RX</summary>
    public NumericSensorEntity YeelightLoungeLampRx => new(_haContext, "sensor.yeelight_lounge_lamp_rx");
    ///<summary>Yeelight Lounge Lamp TX</summary>
    public NumericSensorEntity YeelightLoungeLampTx => new(_haContext, "sensor.yeelight_lounge_lamp_tx");
    ///<summary>Yeelight Snug Floor Lamp RX</summary>
    public NumericSensorEntity YeelightSnugFloorLampRx => new(_haContext, "sensor.yeelight_snug_floor_lamp_rx");
    ///<summary>Yeelight Snug Floor Lamp TX</summary>
    public NumericSensorEntity YeelightSnugFloorLampTx => new(_haContext, "sensor.yeelight_snug_floor_lamp_tx");
    ///<summary>yeelink-light-color1_miio313150241 RX</summary>
    public NumericSensorEntity YeelinkLightColor1Miio313150241Rx => new(_haContext, "sensor.yeelink_light_color1_miio313150241_rx");
    ///<summary>yeelink-light-color1_miio313150241 TX</summary>
    public NumericSensorEntity YeelinkLightColor1Miio313150241Tx => new(_haContext, "sensor.yeelink_light_color1_miio313150241_tx");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>AdGuard Home Filtering</summary>
    public SwitchEntity AdguardFiltering => new(_haContext, "switch.adguard_filtering");
    ///<summary>AdGuard Home Parental control</summary>
    public SwitchEntity AdguardParentalControl => new(_haContext, "switch.adguard_parental_control");
    ///<summary>AdGuard Home Protection</summary>
    public SwitchEntity AdguardProtection => new(_haContext, "switch.adguard_protection");
    ///<summary>AdGuard Home Query log</summary>
    public SwitchEntity AdguardQueryLog => new(_haContext, "switch.adguard_query_log");
    ///<summary>AdGuard Home Safe browsing</summary>
    public SwitchEntity AdguardSafeBrowsing => new(_haContext, "switch.adguard_safe_browsing");
    ///<summary>AdGuard Home Safe search</summary>
    public SwitchEntity AdguardSafeSearch => new(_haContext, "switch.adguard_safe_search");
    ///<summary>All Speakers do not disturb switch</summary>
    public SwitchEntity AllSpeakersDoNotDisturbSwitch => new(_haContext, "switch.all_speakers_do_not_disturb_switch");
    ///<summary>All Speakers repeat switch</summary>
    public SwitchEntity AllSpeakersRepeatSwitch => new(_haContext, "switch.all_speakers_repeat_switch");
    ///<summary>All Speakers shuffle switch</summary>
    public SwitchEntity AllSpeakersShuffleSwitch => new(_haContext, "switch.all_speakers_shuffle_switch");
    ///<summary>Andrew&apos;s Echo Buds do not disturb switch</summary>
    public SwitchEntity AndrewSEchoBudsDoNotDisturbSwitch => new(_haContext, "switch.andrew_s_echo_buds_do_not_disturb_switch");
    ///<summary>Snug Fire TV do not disturb switch</summary>
    public SwitchEntity AndrewSFireTvDoNotDisturbSwitch => new(_haContext, "switch.andrew_s_fire_tv_do_not_disturb_switch");
    ///<summary>Andrew&apos;s Samsung TV 2020-U do not disturb switch</summary>
    public SwitchEntity AndrewSSamsungTv2020UDoNotDisturbSwitch => new(_haContext, "switch.andrew_s_samsung_tv_2020_u_do_not_disturb_switch");
    ///<summary>Andrew&apos;s Samsung TV 2020-U repeat switch</summary>
    public SwitchEntity AndrewSSamsungTv2020URepeatSwitch => new(_haContext, "switch.andrew_s_samsung_tv_2020_u_repeat_switch");
    ///<summary>Andrew&apos;s Samsung TV 2020-U shuffle switch</summary>
    public SwitchEntity AndrewSSamsungTv2020UShuffleSwitch => new(_haContext, "switch.andrew_s_samsung_tv_2020_u_shuffle_switch");
    ///<summary>Basement do not disturb switch</summary>
    public SwitchEntity BasementDoNotDisturbSwitch => new(_haContext, "switch.basement_do_not_disturb_switch");
    ///<summary>Basement repeat switch</summary>
    public SwitchEntity BasementRepeatSwitch => new(_haContext, "switch.basement_repeat_switch");
    ///<summary>Basement shuffle switch</summary>
    public SwitchEntity BasementShuffleSwitch => new(_haContext, "switch.basement_shuffle_switch");
    ///<summary>Bathroom Fan</summary>
    public SwitchEntity BathroomFan => new(_haContext, "switch.bathroom_fan");
    ///<summary>Bedroom Echo Show do not disturb switch</summary>
    public SwitchEntity BedroomEchoShowDoNotDisturbSwitch => new(_haContext, "switch.bedroom_echo_show_do_not_disturb_switch");
    ///<summary>Bedroom Echo Show repeat switch</summary>
    public SwitchEntity BedroomEchoShowRepeatSwitch => new(_haContext, "switch.bedroom_echo_show_repeat_switch");
    ///<summary>Bedroom Echo Show shuffle switch</summary>
    public SwitchEntity BedroomEchoShowShuffleSwitch => new(_haContext, "switch.bedroom_echo_show_shuffle_switch");
    ///<summary>Coffee Machine</summary>
    public SwitchEntity CoffeeMachine => new(_haContext, "switch.coffee_machine");
    ///<summary>Cold Frame</summary>
    public SwitchEntity ColdFrame => new(_haContext, "switch.cold_frame");
    ///<summary>Decking Socket</summary>
    public SwitchEntity DeckingSocket => new(_haContext, "switch.decking_socket");
    ///<summary>Dining Room Echo Input do not disturb switch</summary>
    public SwitchEntity DiningRoomEchoInputDoNotDisturbSwitch => new(_haContext, "switch.dining_room_echo_input_do_not_disturb_switch");
    ///<summary>Dining Room Echo Input repeat switch</summary>
    public SwitchEntity DiningRoomEchoInputRepeatSwitch => new(_haContext, "switch.dining_room_echo_input_repeat_switch");
    ///<summary>Dining Room Echo Input shuffle switch</summary>
    public SwitchEntity DiningRoomEchoInputShuffleSwitch => new(_haContext, "switch.dining_room_echo_input_shuffle_switch");
    ///<summary>Display Cabinet Light</summary>
    public SwitchEntity DisplayCabinetLight => new(_haContext, "switch.display_cabinet_light");
    ///<summary>Doorbell Chime</summary>
    public SwitchEntity DoorbellChime => new(_haContext, "switch.doorbell_chime");
    ///<summary>Doorbell Chime Active</summary>
    public SwitchEntity DoorbellChimeActive => new(_haContext, "switch.doorbell_chime_active");
    ///<summary>Doorbell Restart</summary>
    public SwitchEntity DoorbellRestart => new(_haContext, "switch.doorbell_restart");
    ///<summary>Downstairs do not disturb switch</summary>
    public SwitchEntity DownstairsDoNotDisturbSwitch => new(_haContext, "switch.downstairs_do_not_disturb_switch");
    ///<summary>Downstairs repeat switch</summary>
    public SwitchEntity DownstairsRepeatSwitch => new(_haContext, "switch.downstairs_repeat_switch");
    ///<summary>Downstairs shuffle switch</summary>
    public SwitchEntity DownstairsShuffleSwitch => new(_haContext, "switch.downstairs_shuffle_switch");
    ///<summary>Drawing Room Echo Dot do not disturb switch</summary>
    public SwitchEntity DrawingRoomEchoDotDoNotDisturbSwitch => new(_haContext, "switch.drawing_room_echo_dot_do_not_disturb_switch");
    ///<summary>Drawing Room Echo Dot repeat switch</summary>
    public SwitchEntity DrawingRoomEchoDotRepeatSwitch => new(_haContext, "switch.drawing_room_echo_dot_repeat_switch");
    ///<summary>Drawing Room Echo Dot shuffle switch</summary>
    public SwitchEntity DrawingRoomEchoDotShuffleSwitch => new(_haContext, "switch.drawing_room_echo_dot_shuffle_switch");
    ///<summary>Dressing Room Echo Dot do not disturb switch</summary>
    public SwitchEntity DressingRoomEchoDotDoNotDisturbSwitch => new(_haContext, "switch.dressing_room_echo_dot_do_not_disturb_switch");
    ///<summary>Dressing Room Echo Dot repeat switch</summary>
    public SwitchEntity DressingRoomEchoDotRepeatSwitch => new(_haContext, "switch.dressing_room_echo_dot_repeat_switch");
    ///<summary>Dressing Room Echo Dot shuffle switch</summary>
    public SwitchEntity DressingRoomEchoDotShuffleSwitch => new(_haContext, "switch.dressing_room_echo_dot_shuffle_switch");
    ///<summary>ESPresense Bedroom Active Scan</summary>
    public SwitchEntity EspresenseBedroomActiveScan => new(_haContext, "switch.espresense_bedroom_active_scan");
    ///<summary>ESPresense Bedroom Arduino OTA</summary>
    public SwitchEntity EspresenseBedroomArduinoOta => new(_haContext, "switch.espresense_bedroom_arduino_ota");
    ///<summary>ESPresense Bedroom Auto Update</summary>
    public SwitchEntity EspresenseBedroomAutoUpdate => new(_haContext, "switch.espresense_bedroom_auto_update");
    ///<summary>ESPresense Bedroom OTA Update</summary>
    public SwitchEntity EspresenseBedroomOtaUpdate => new(_haContext, "switch.espresense_bedroom_ota_update");
    ///<summary>ESPresense Bedroom Prerelease</summary>
    public SwitchEntity EspresenseBedroomPrerelease => new(_haContext, "switch.espresense_bedroom_prerelease");
    ///<summary>ESPresense Bedroom Query</summary>
    public SwitchEntity EspresenseBedroomQuery => new(_haContext, "switch.espresense_bedroom_query");
    ///<summary>ESPresense Bedroom Status LED</summary>
    public SwitchEntity EspresenseBedroomStatusLed => new(_haContext, "switch.espresense_bedroom_status_led");
    ///<summary>ESPresense DrawingRoom Active Scan</summary>
    public SwitchEntity EspresenseDrawingroomActiveScan => new(_haContext, "switch.espresense_drawingroom_active_scan");
    ///<summary>ESPresense DrawingRoom Query</summary>
    public SwitchEntity EspresenseDrawingroomQuery => new(_haContext, "switch.espresense_drawingroom_query");
    ///<summary>ESPresense Kitchen Active Scan</summary>
    public SwitchEntity EspresenseKitchenActiveScan => new(_haContext, "switch.espresense_kitchen_active_scan");
    ///<summary>ESPresense Kitchen Arduino OTA</summary>
    public SwitchEntity EspresenseKitchenArduinoOta => new(_haContext, "switch.espresense_kitchen_arduino_ota");
    ///<summary>ESPresense Kitchen Auto Update</summary>
    public SwitchEntity EspresenseKitchenAutoUpdate => new(_haContext, "switch.espresense_kitchen_auto_update");
    ///<summary>ESPresense Kitchen Prerelease</summary>
    public SwitchEntity EspresenseKitchenPrerelease => new(_haContext, "switch.espresense_kitchen_prerelease");
    ///<summary>ESPresense Kitchen Query</summary>
    public SwitchEntity EspresenseKitchenQuery => new(_haContext, "switch.espresense_kitchen_query");
    ///<summary>ESPresense Kitchen Status LED</summary>
    public SwitchEntity EspresenseKitchenStatusLed => new(_haContext, "switch.espresense_kitchen_status_led");
    ///<summary>ESPresense Lounge Active Scan</summary>
    public SwitchEntity EspresenseLoungeActiveScan => new(_haContext, "switch.espresense_lounge_active_scan");
    ///<summary>ESPresense Lounge Arduino OTA</summary>
    public SwitchEntity EspresenseLoungeArduinoOta => new(_haContext, "switch.espresense_lounge_arduino_ota");
    ///<summary>ESPresense Lounge Auto Update</summary>
    public SwitchEntity EspresenseLoungeAutoUpdate => new(_haContext, "switch.espresense_lounge_auto_update");
    ///<summary>ESPresense Lounge OTA Update</summary>
    public SwitchEntity EspresenseLoungeOtaUpdate => new(_haContext, "switch.espresense_lounge_ota_update");
    ///<summary>ESPresense Lounge Prerelease</summary>
    public SwitchEntity EspresenseLoungePrerelease => new(_haContext, "switch.espresense_lounge_prerelease");
    ///<summary>ESPresense Lounge Query</summary>
    public SwitchEntity EspresenseLoungeQuery => new(_haContext, "switch.espresense_lounge_query");
    ///<summary>ESPresense Lounge Status LED</summary>
    public SwitchEntity EspresenseLoungeStatusLed => new(_haContext, "switch.espresense_lounge_status_led");
    ///<summary>ESPresense Snug Active Scan</summary>
    public SwitchEntity EspresenseSnugActiveScan => new(_haContext, "switch.espresense_snug_active_scan");
    ///<summary>ESPresense Snug Arduino OTA</summary>
    public SwitchEntity EspresenseSnugArduinoOta => new(_haContext, "switch.espresense_snug_arduino_ota");
    ///<summary>ESPresense Snug Auto Update</summary>
    public SwitchEntity EspresenseSnugAutoUpdate => new(_haContext, "switch.espresense_snug_auto_update");
    ///<summary>ESPresense Snug Prerelease</summary>
    public SwitchEntity EspresenseSnugPrerelease => new(_haContext, "switch.espresense_snug_prerelease");
    ///<summary>ESPresense Snug Query</summary>
    public SwitchEntity EspresenseSnugQuery => new(_haContext, "switch.espresense_snug_query");
    ///<summary>ESPresense Snug Status LED</summary>
    public SwitchEntity EspresenseSnugStatusLed => new(_haContext, "switch.espresense_snug_status_led");
    ///<summary>studio-bluetooth-proxy Query</summary>
    public SwitchEntity EspresenseStudioQuery => new(_haContext, "switch.espresense_studio_query");
    ///<summary>Garden do not disturb switch</summary>
    public SwitchEntity GardenDoNotDisturbSwitch => new(_haContext, "switch.garden_do_not_disturb_switch");
    ///<summary>Garden repeat switch</summary>
    public SwitchEntity GardenRepeatSwitch => new(_haContext, "switch.garden_repeat_switch");
    ///<summary>Garden shuffle switch</summary>
    public SwitchEntity GardenShuffleSwitch => new(_haContext, "switch.garden_shuffle_switch");
    ///<summary>Garden Sockets</summary>
    public SwitchEntity GardenSockets => new(_haContext, "switch.garden_sockets");
    ///<summary>Gate Socket</summary>
    public SwitchEntity GateSocket => new(_haContext, "switch.gate_socket");
    ///<summary>Guest Room Bedside Lamp</summary>
    public SwitchEntity GuestRoomBedsideLamp => new(_haContext, "switch.guest_room_bedside_lamp");
    ///<summary>Guest Room Echo Show do not disturb switch</summary>
    public SwitchEntity GuestRoomEchoShowDoNotDisturbSwitch => new(_haContext, "switch.guest_room_echo_show_do_not_disturb_switch");
    ///<summary>Guest Room Echo Show repeat switch</summary>
    public SwitchEntity GuestRoomEchoShowRepeatSwitch => new(_haContext, "switch.guest_room_echo_show_repeat_switch");
    ///<summary>Guest Room Echo Show shuffle switch</summary>
    public SwitchEntity GuestRoomEchoShowShuffleSwitch => new(_haContext, "switch.guest_room_echo_show_shuffle_switch");
    ///<summary>Hall Tablet do not disturb switch</summary>
    public SwitchEntity HallTabletDoNotDisturbSwitch => new(_haContext, "switch.hall_tablet_do_not_disturb_switch");
    ///<summary>Hallway Tablet Kiosk lock</summary>
    public SwitchEntity HallwayTabletKioskLock => new(_haContext, "switch.hallway_tablet_kiosk_lock");
    ///<summary>Hallway Tablet Maintenance mode</summary>
    public SwitchEntity HallwayTabletMaintenanceMode => new(_haContext, "switch.hallway_tablet_maintenance_mode");
    ///<summary>Hallway Tablet Motion detection</summary>
    public SwitchEntity HallwayTabletMotionDetection => new(_haContext, "switch.hallway_tablet_motion_detection");
    ///<summary>Hallway Tablet Screen</summary>
    public SwitchEntity HallwayTabletScreen => new(_haContext, "switch.hallway_tablet_screen");
    ///<summary>Hallway Tablet Screensaver</summary>
    public SwitchEntity HallwayTabletScreensaver => new(_haContext, "switch.hallway_tablet_screensaver");
    ///<summary>homeassistant</summary>
    public SwitchEntity HomeassistantActive => new(_haContext, "switch.homeassistant_active");
    ///<summary>Kitchen Echo Show do not disturb switch</summary>
    public SwitchEntity KitchenEchoShowDoNotDisturbSwitch => new(_haContext, "switch.kitchen_echo_show_do_not_disturb_switch");
    ///<summary>Kitchen Echo Show repeat switch</summary>
    public SwitchEntity KitchenEchoShowRepeatSwitch => new(_haContext, "switch.kitchen_echo_show_repeat_switch");
    ///<summary>Kitchen Echo Show shuffle switch</summary>
    public SwitchEntity KitchenEchoShowShuffleSwitch => new(_haContext, "switch.kitchen_echo_show_shuffle_switch");
    ///<summary>Landing Tablet do not disturb switch</summary>
    public SwitchEntity LandingTabletDoNotDisturbSwitch => new(_haContext, "switch.landing_tablet_do_not_disturb_switch");
    ///<summary>Lounge Echo Plus do not disturb switch</summary>
    public SwitchEntity LoungeEchoPlusDoNotDisturbSwitch => new(_haContext, "switch.lounge_echo_plus_do_not_disturb_switch");
    ///<summary>Lounge Echo Plus repeat switch</summary>
    public SwitchEntity LoungeEchoPlusRepeatSwitch => new(_haContext, "switch.lounge_echo_plus_repeat_switch");
    ///<summary>Lounge Echo Plus shuffle switch</summary>
    public SwitchEntity LoungeEchoPlusShuffleSwitch => new(_haContext, "switch.lounge_echo_plus_shuffle_switch");
    ///<summary>Lounge Fire TV do not disturb switch</summary>
    public SwitchEntity LoungeFireTvDoNotDisturbSwitch => new(_haContext, "switch.lounge_fire_tv_do_not_disturb_switch");
    ///<summary>Lounge TV</summary>
    public SwitchEntity LoungeTv => new(_haContext, "switch.lounge_tv");
    ///<summary>Schedule</summary>
    public SwitchEntity MarkSchedule => new(_haContext, "switch.mark_schedule");
    ///<summary>nspanel Confirmation Message</summary>
    public SwitchEntity NspanelConfirmationMessage => new(_haContext, "switch.nspanel_confirmation_message");
    ///<summary>nspanel Nextion inited</summary>
    public SwitchEntity NspanelNextionInited => new(_haContext, "switch.nspanel_nextion_inited");
    ///<summary>nspanel Notification sound</summary>
    public SwitchEntity NspanelNotificationSound => new(_haContext, "switch.nspanel_notification_sound");
    ///<summary>nspanel Notification unread</summary>
    public SwitchEntity NspanelNotificationUnread => new(_haContext, "switch.nspanel_notification_unread");
    ///<summary>nspanel Relay 1</summary>
    public SwitchEntity NspanelRelay1 => new(_haContext, "switch.nspanel_relay_1");
    ///<summary>nspanel Relay 1 Local Fallback</summary>
    public SwitchEntity NspanelRelay1LocalFallback => new(_haContext, "switch.nspanel_relay_1_local_fallback");
    ///<summary>nspanel Relay 2</summary>
    public SwitchEntity NspanelRelay2 => new(_haContext, "switch.nspanel_relay_2");
    ///<summary>nspanel Relay 2 Local Fallback</summary>
    public SwitchEntity NspanelRelay2LocalFallback => new(_haContext, "switch.nspanel_relay_2_local_fallback");
    ///<summary>nspanel Sleep Modus</summary>
    public SwitchEntity NspanelSleepModus => new(_haContext, "switch.nspanel_sleep_modus");
    ///<summary>nspanel Update TFT display</summary>
    public SwitchEntity NspanelUpdateTftDisplay => new(_haContext, "switch.nspanel_update_tft_display");
    ///<summary>Offices do not disturb switch</summary>
    public SwitchEntity OfficesDoNotDisturbSwitch => new(_haContext, "switch.offices_do_not_disturb_switch");
    ///<summary>Offices repeat switch</summary>
    public SwitchEntity OfficesRepeatSwitch => new(_haContext, "switch.offices_repeat_switch");
    ///<summary>Offices shuffle switch</summary>
    public SwitchEntity OfficesShuffleSwitch => new(_haContext, "switch.offices_shuffle_switch");
    ///<summary>Patio do not disturb switch</summary>
    public SwitchEntity PatioDoNotDisturbSwitch => new(_haContext, "switch.patio_do_not_disturb_switch");
    ///<summary>Patio repeat switch</summary>
    public SwitchEntity PatioRepeatSwitch => new(_haContext, "switch.patio_repeat_switch");
    ///<summary>Patio shuffle switch</summary>
    public SwitchEntity PatioShuffleSwitch => new(_haContext, "switch.patio_shuffle_switch");
    ///<summary>Restart Sonoff Basement 1</summary>
    public SwitchEntity RestartSonoffBasement1 => new(_haContext, "switch.restart_sonoff_basement_1");
    ///<summary>Restart Sonoff Basement 2</summary>
    public SwitchEntity RestartSonoffBasement2 => new(_haContext, "switch.restart_sonoff_basement_2");
    ///<summary>Restart Sonoff Downstairs 1</summary>
    public SwitchEntity RestartSonoffDownstairs1 => new(_haContext, "switch.restart_sonoff_downstairs_1");
    ///<summary>Restart Sonoff Downstairs 2</summary>
    public SwitchEntity RestartSonoffDownstairs2 => new(_haContext, "switch.restart_sonoff_downstairs_2");
    ///<summary>Restart Sonoff Outside 1</summary>
    public SwitchEntity RestartSonoffOutside1 => new(_haContext, "switch.restart_sonoff_outside_1");
    ///<summary>Restart Sonoff Upstairs 2</summary>
    public SwitchEntity RestartSonoffUpstairs2 => new(_haContext, "switch.restart_sonoff_upstairs_2");
    ///<summary>Restart Weather Station</summary>
    public SwitchEntity RestartWeatherStation => new(_haContext, "switch.restart_weather_station");
    ///<summary>Cat Feeder Slow feed</summary>
    public SwitchEntity RojecoPetFeederSlowFeed => new(_haContext, "switch.rojeco_pet_feeder_slow_feed");
    ///<summary>Shed Echo Input do not disturb switch</summary>
    public SwitchEntity ShedEchoInputDoNotDisturbSwitch => new(_haContext, "switch.shed_echo_input_do_not_disturb_switch");
    ///<summary>Shed Echo Input repeat switch</summary>
    public SwitchEntity ShedEchoInputRepeatSwitch => new(_haContext, "switch.shed_echo_input_repeat_switch");
    ///<summary>Shed Echo Input shuffle switch</summary>
    public SwitchEntity ShedEchoInputShuffleSwitch => new(_haContext, "switch.shed_echo_input_shuffle_switch");
    ///<summary>Snug Echo Show do not disturb switch</summary>
    public SwitchEntity SnugEchoShowDoNotDisturbSwitch => new(_haContext, "switch.snug_echo_show_do_not_disturb_switch");
    ///<summary>Snug Echo Show repeat switch</summary>
    public SwitchEntity SnugEchoShowRepeatSwitch => new(_haContext, "switch.snug_echo_show_repeat_switch");
    ///<summary>Snug Echo Show shuffle switch</summary>
    public SwitchEntity SnugEchoShowShuffleSwitch => new(_haContext, "switch.snug_echo_show_shuffle_switch");
    ///<summary>Sonoff Basement 1 Basement Hall</summary>
    public SwitchEntity SonoffBasement1BasementHall => new(_haContext, "switch.sonoff_basement_1_basement_hall");
    ///<summary>Sonoff Basement 1 Brewery</summary>
    public SwitchEntity SonoffBasement1Brewery => new(_haContext, "switch.sonoff_basement_1_brewery");
    ///<summary>Sonoff Basement 1 Toilet</summary>
    public SwitchEntity SonoffBasement1Toilet => new(_haContext, "switch.sonoff_basement_1_toilet");
    ///<summary>Sonoff Basement 1 Utility Room</summary>
    public SwitchEntity SonoffBasement1UtilityRoom => new(_haContext, "switch.sonoff_basement_1_utility_room");
    ///<summary>Sonoff Basement 2 Dining Room</summary>
    public SwitchEntity SonoffBasement2DiningRoom => new(_haContext, "switch.sonoff_basement_2_dining_room");
    ///<summary>Sonoff Basement 2 Snug</summary>
    public SwitchEntity SonoffBasement2Snug => new(_haContext, "switch.sonoff_basement_2_snug");
    ///<summary>Sonoff Basement 2 Spare Ch3</summary>
    public SwitchEntity SonoffBasement2SpareCh3 => new(_haContext, "switch.sonoff_basement_2_spare_ch3");
    ///<summary>Sonoff Basement 2 Spare Ch4</summary>
    public SwitchEntity SonoffBasement2SpareCh4 => new(_haContext, "switch.sonoff_basement_2_spare_ch4");
    ///<summary>Sonoff Downstairs 1 Bookshelf Light</summary>
    public SwitchEntity SonoffDownstairs1BookshelfLight => new(_haContext, "switch.sonoff_downstairs_1_bookshelf_light");
    ///<summary>Sonoff Downstairs 1 Extractor Fan</summary>
    public SwitchEntity SonoffDownstairs1ExtractorFan => new(_haContext, "switch.sonoff_downstairs_1_extractor_fan");
    ///<summary>Sonoff Downstairs 1 Hallway Light</summary>
    public SwitchEntity SonoffDownstairs1HallwayLight => new(_haContext, "switch.sonoff_downstairs_1_hallway_light");
    ///<summary>Sonoff Downstairs 1 Lounge Light</summary>
    public SwitchEntity SonoffDownstairs1LoungeLight => new(_haContext, "switch.sonoff_downstairs_1_lounge_light");
    ///<summary>Sonoff Downstairs 2 Cabinet Light</summary>
    public SwitchEntity SonoffDownstairs2CabinetLight => new(_haContext, "switch.sonoff_downstairs_2_cabinet_light");
    ///<summary>Sonoff Downstairs 2 Drawing Room Light</summary>
    public SwitchEntity SonoffDownstairs2DrawingRoomLight => new(_haContext, "switch.sonoff_downstairs_2_drawing_room_light");
    ///<summary>Sonoff Downstairs 2 Kitchen Light</summary>
    public SwitchEntity SonoffDownstairs2KitchenLight => new(_haContext, "switch.sonoff_downstairs_2_kitchen_light");
    ///<summary>Sonoff Downstairs 2 Spare Ch1</summary>
    public SwitchEntity SonoffDownstairs2SpareCh1 => new(_haContext, "switch.sonoff_downstairs_2_spare_ch1");
    ///<summary>Sonoff Outside 1 Back Door</summary>
    public SwitchEntity SonoffOutside1BackDoor => new(_haContext, "switch.sonoff_outside_1_back_door");
    ///<summary>Sonoff Outside 1 Cellar Door</summary>
    public SwitchEntity SonoffOutside1CellarDoor => new(_haContext, "switch.sonoff_outside_1_cellar_door");
    ///<summary>Sonoff Outside 1 Patio</summary>
    public SwitchEntity SonoffOutside1Patio => new(_haContext, "switch.sonoff_outside_1_patio");
    ///<summary>Sonoff Outside 1 Porch</summary>
    public SwitchEntity SonoffOutside1Porch => new(_haContext, "switch.sonoff_outside_1_porch");
    ///<summary>Sonoff Upstairs 2 Bathroom Light</summary>
    public SwitchEntity SonoffUpstairs2BathroomLight => new(_haContext, "switch.sonoff_upstairs_2_bathroom_light");
    ///<summary>Sonoff Upstairs 2 Bedroom Light</summary>
    public SwitchEntity SonoffUpstairs2BedroomLight => new(_haContext, "switch.sonoff_upstairs_2_bedroom_light");
    ///<summary>Sonoff Upstairs 2 Mirror Light</summary>
    public SwitchEntity SonoffUpstairs2MirrorLight => new(_haContext, "switch.sonoff_upstairs_2_mirror_light");
    ///<summary>Sonoff Upstairs 2 Studio Light</summary>
    public SwitchEntity SonoffUpstairs2StudioLight => new(_haContext, "switch.sonoff_upstairs_2_studio_light");
    ///<summary>studio-bluetooth-proxy Active Scan</summary>
    public SwitchEntity StudioBluetoothProxyActiveScan => new(_haContext, "switch.studio_bluetooth_proxy_active_scan");
    ///<summary>studio-bluetooth-proxy Arduino OTA</summary>
    public SwitchEntity StudioBluetoothProxyArduinoOta => new(_haContext, "switch.studio_bluetooth_proxy_arduino_ota");
    ///<summary>studio-bluetooth-proxy Auto Update</summary>
    public SwitchEntity StudioBluetoothProxyAutoUpdate => new(_haContext, "switch.studio_bluetooth_proxy_auto_update");
    ///<summary>studio-bluetooth-proxy Prerelease</summary>
    public SwitchEntity StudioBluetoothProxyPrerelease => new(_haContext, "switch.studio_bluetooth_proxy_prerelease");
    ///<summary>Sump Alarm Reset</summary>
    public SwitchEntity SumpAlarmReset => new(_haContext, "switch.sump_alarm_reset");
    ///<summary>Sump Alarm Restart</summary>
    public SwitchEntity SumpAlarmRestart => new(_haContext, "switch.sump_alarm_restart");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch => new(_haContext, "switch.this_device_do_not_disturb_switch");
    ///<summary>Upstairs do not disturb switch</summary>
    public SwitchEntity UpstairsDoNotDisturbSwitch => new(_haContext, "switch.upstairs_do_not_disturb_switch");
    ///<summary>Upstairs repeat switch</summary>
    public SwitchEntity UpstairsRepeatSwitch => new(_haContext, "switch.upstairs_repeat_switch");
    ///<summary>Upstairs shuffle switch</summary>
    public SwitchEntity UpstairsShuffleSwitch => new(_haContext, "switch.upstairs_shuffle_switch");
    ///<summary>Utility Room Echo Dot do not disturb switch</summary>
    public SwitchEntity UtilityRoomEchoDotDoNotDisturbSwitch => new(_haContext, "switch.utility_room_echo_dot_do_not_disturb_switch");
    ///<summary>Utility Room Echo Dot repeat switch</summary>
    public SwitchEntity UtilityRoomEchoDotRepeatSwitch => new(_haContext, "switch.utility_room_echo_dot_repeat_switch");
    ///<summary>Utility Room Echo Dot shuffle switch</summary>
    public SwitchEntity UtilityRoomEchoDotShuffleSwitch => new(_haContext, "switch.utility_room_echo_dot_shuffle_switch");
}

public partial class TimerEntities
{
    private readonly IHaContext _haContext;
    public TimerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Lounge</summary>
    public TimerEntity Lounge => new(_haContext, "timer.lounge");
    ///<summary>shower</summary>
    public TimerEntity Shower => new(_haContext, "timer.shower");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>AdGuard Home Update</summary>
    public UpdateEntity AdguardHomeUpdate => new(_haContext, "update.adguard_home_update");
    ///<summary>AppDaemon Update</summary>
    public UpdateEntity AppdaemonUpdate => new(_haContext, "update.appdaemon_update");
    ///<summary>Check Home Assistant configuration Update</summary>
    public UpdateEntity CheckHomeAssistantConfigurationUpdate => new(_haContext, "update.check_home_assistant_configuration_update");
    ///<summary>Coffee Machine</summary>
    public UpdateEntity CoffeeMachine => new(_haContext, "update.coffee_machine");
    ///<summary>Display Cabinet Light</summary>
    public UpdateEntity DisplayCabinetLight => new(_haContext, "update.display_cabinet_light");
    ///<summary>Doorbell Firmware</summary>
    public UpdateEntity DoorbellFirmware => new(_haContext, "update.doorbell_firmware");
    ///<summary>ESPHome Update</summary>
    public UpdateEntity EsphomeUpdate => new(_haContext, "update.esphome_update");
    ///<summary>ESPresense Companion Update</summary>
    public UpdateEntity EspresenseCompanionUpdate => new(_haContext, "update.espresense_companion_update");
    ///<summary>File editor Update</summary>
    public UpdateEntity FileEditorUpdate => new(_haContext, "update.file_editor_update");
    ///<summary>Glances Update</summary>
    public UpdateEntity GlancesUpdate => new(_haContext, "update.glances_update");
    ///<summary>Grafana Update</summary>
    public UpdateEntity GrafanaUpdate2 => new(_haContext, "update.grafana_update_2");
    ///<summary>Grocy Update</summary>
    public UpdateEntity GrocyUpdate => new(_haContext, "update.grocy_update");
    ///<summary>Guest Room Bedside Lamp</summary>
    public UpdateEntity GuestRoomBedsideLamp => new(_haContext, "update.guest_room_bedside_lamp");
    ///<summary>Guest Room Remote</summary>
    public UpdateEntity GuestRoomRemote => new(_haContext, "update.guest_room_remote");
    ///<summary>Hallway Remote</summary>
    public UpdateEntity HallwayRemote => new(_haContext, "update.hallway_remote");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>InfluxDB Update</summary>
    public UpdateEntity InfluxdbUpdate => new(_haContext, "update.influxdb_update");
    ///<summary>Loki Update</summary>
    public UpdateEntity LokiUpdate => new(_haContext, "update.loki_update");
    ///<summary>Lounge Remote</summary>
    public UpdateEntity LoungeRemote => new(_haContext, "update.lounge_remote");
    ///<summary>MariaDB Update</summary>
    public UpdateEntity MariadbUpdate => new(_haContext, "update.mariadb_update");
    ///<summary>Matter Server Update</summary>
    public UpdateEntity MatterServerUpdate => new(_haContext, "update.matter_server_update");
    ///<summary>Meross Local Broker Addon Update</summary>
    public UpdateEntity MerossLocalBrokerAddonUpdate => new(_haContext, "update.meross_local_broker_addon_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>NetDaemon V3.1 (.NET 7) Update</summary>
    public UpdateEntity NetdaemonV31Net7Update => new(_haContext, "update.netdaemon_v3_1_net_7_update");
    ///<summary>NetDaemon V4-alpha (.NET 8) Update</summary>
    public UpdateEntity NetdaemonV4AlphaNet8Update => new(_haContext, "update.netdaemon_v4_alpha_net_8_update");
    ///<summary>Nginx Proxy Manager Update</summary>
    public UpdateEntity NginxProxyManagerUpdate => new(_haContext, "update.nginx_proxy_manager_update");
    ///<summary>Firmware</summary>
    public UpdateEntity NspanelFirmware => new(_haContext, "update.nspanel_firmware");
    ///<summary>Portainer Update</summary>
    public UpdateEntity PortainerUpdate => new(_haContext, "update.portainer_update");
    ///<summary>Prometheus Update</summary>
    public UpdateEntity PrometheusUpdate => new(_haContext, "update.prometheus_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Shelly Shed Lights Beta Firmware Update</summary>
    public UpdateEntity ShellyShedLightsBetaFirmwareUpdate => new(_haContext, "update.shelly_shed_lights_beta_firmware_update");
    ///<summary>Shelly Shed Lights firmware update</summary>
    public UpdateEntity ShellyShedLightsFirmwareUpdate => new(_haContext, "update.shelly_shed_lights_firmware_update");
    ///<summary>Shelly Shed Sockets Beta Firmware Update</summary>
    public UpdateEntity ShellyShedSocketsBetaFirmwareUpdate => new(_haContext, "update.shelly_shed_sockets_beta_firmware_update");
    ///<summary>Shelly Shed Sockets firmware update</summary>
    public UpdateEntity ShellyShedSocketsFirmwareUpdate => new(_haContext, "update.shelly_shed_sockets_firmware_update");
    ///<summary>Shelly Upstairs Lights 1 Beta Firmware Update</summary>
    public UpdateEntity ShellyUpstairsLights1BetaFirmwareUpdate => new(_haContext, "update.shelly_upstairs_lights_1_beta_firmware_update");
    ///<summary>shellypro4pm-c8f09e83a72c firmware update</summary>
    public UpdateEntity Shellypro4pmC8f09e83a72cFirmwareUpdate => new(_haContext, "update.shellypro4pm_c8f09e83a72c_firmware_update");
    ///<summary>Snug Led Strip</summary>
    public UpdateEntity SnugLedStrip => new(_haContext, "update.snug_led_strip");
    ///<summary>Sonoff-Basement-1 Firmware</summary>
    public UpdateEntity SonoffBasement1Firmware => new(_haContext, "update.sonoff_basement_1_firmware");
    ///<summary>Sonoff-Basement-2 Firmware</summary>
    public UpdateEntity SonoffBasement2Firmware => new(_haContext, "update.sonoff_basement_2_firmware");
    ///<summary>Sonoff-Downstairs-1 Firmware</summary>
    public UpdateEntity SonoffDownstairs1Firmware => new(_haContext, "update.sonoff_downstairs_1_firmware");
    ///<summary>Sonoff-Downstairs-2 Firmware</summary>
    public UpdateEntity SonoffDownstairs2Firmware => new(_haContext, "update.sonoff_downstairs_2_firmware");
    ///<summary>Sonoff-Outside-1 Firmware</summary>
    public UpdateEntity SonoffOutside1Firmware => new(_haContext, "update.sonoff_outside_1_firmware");
    ///<summary>Sonoff-Upstairs-2 Firmware</summary>
    public UpdateEntity SonoffUpstairs2Firmware => new(_haContext, "update.sonoff_upstairs_2_firmware");
    ///<summary>Firmware</summary>
    public UpdateEntity StudioBluetoothProxyFirmware => new(_haContext, "update.studio_bluetooth_proxy_firmware");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>Sump-Alarm Firmware</summary>
    public UpdateEntity SumpAlarmFirmware => new(_haContext, "update.sump_alarm_firmware");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>UAP-AC-LR-Basement</summary>
    public UpdateEntity UapAcLrBasement => new(_haContext, "update.uap_ac_lr_basement");
    ///<summary>UAP-AC-LR-Upstairs</summary>
    public UpdateEntity UapAcLrUpstairs => new(_haContext, "update.uap_ac_lr_upstairs");
    ///<summary>UAP-FlexHD-Groundfloor</summary>
    public UpdateEntity UapFlexhdGroundfloor => new(_haContext, "update.uap_flexhd_groundfloor");
    ///<summary>UAP-IW-HD-Shed</summary>
    public UpdateEntity UapIwHdShed => new(_haContext, "update.uap_iw_hd_shed");
    ///<summary>UDMPRO</summary>
    public UpdateEntity Udmpro => new(_haContext, "update.udmpro");
    ///<summary>VSCode Remote Update</summary>
    public UpdateEntity VscodeRemoteUpdate => new(_haContext, "update.vscode_remote_update");
    ///<summary>Weather-Station Firmware</summary>
    public UpdateEntity WeatherStationFirmware => new(_haContext, "update.weather_station_firmware");
    ///<summary>WireGuard Update</summary>
    public UpdateEntity WireguardUpdate => new(_haContext, "update.wireguard_update");
    ///<summary>Zigbee2MQTT Update</summary>
    public UpdateEntity Zigbee2mqttUpdate => new(_haContext, "update.zigbee2mqtt_update");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adam&apos;s</summary>
    public ZoneEntity AdamS => new(_haContext, "zone.adam_s");
    ///<summary>Amy&apos;s</summary>
    public ZoneEntity AmyS => new(_haContext, "zone.amy_s");
    ///<summary>Andy&apos;s Parent&apos;s</summary>
    public ZoneEntity AndySParentS => new(_haContext, "zone.andy_s_parent_s");
    ///<summary>Andy&apos;s Work</summary>
    public ZoneEntity AndyWork => new(_haContext, "zone.andy_work");
    ///<summary>Gym</summary>
    public ZoneEntity Gym => new(_haContext, "zone.gym");
    ///<summary>Heaton Hops</summary>
    public ZoneEntity HeatonHops => new(_haContext, "zone.heaton_hops");
    ///<summary>Heaton moor 1</summary>
    public ZoneEntity HeatonMoor1 => new(_haContext, "zone.heaton_moor_1");
    ///<summary>Heaton Moor 2</summary>
    public ZoneEntity HeatonMoor2 => new(_haContext, "zone.heaton_moor_2");
    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Leanne&apos;s House</summary>
    public ZoneEntity LeanneSHouse => new(_haContext, "zone.leanne_s_house");
    ///<summary>Rachaels</summary>
    public ZoneEntity RachaelAndChris => new(_haContext, "zone.rachael_and_chris");
}

public partial class VacuumEntities
{
    private readonly IHaContext _haContext;
    public VacuumEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public VacuumEntity Mark => new(_haContext, "vacuum.mark");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Met Office Heaton Chapel 3-Hourly</summary>
    public WeatherEntity MetOfficeHeatonChapel3Hourly => new(_haContext, "weather.met_office_heaton_chapel_3_hourly");
    ///<summary>Met Office Heaton Chapel Daily</summary>
    public WeatherEntity MetOfficeHeatonChapelDaily => new(_haContext, "weather.met_office_heaton_chapel_daily");
}

public partial class TextEntities
{
    private readonly IHaContext _haContext;
    public TextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Electricity 22J0181544 1610019557951 Previous Cost Override Tariff</summary>
    public TextEntity OctopusEnergyElectricity22j01815441610019557951PreviousAccumulativeCostOverrideTariff => new(_haContext, "text.octopus_energy_electricity_22j0181544_1610019557951_previous_accumulative_cost_override_tariff");
    ///<summary>Gas E6E09476682323 1590806503 Previous Cost Override Tariff</summary>
    public TextEntity OctopusEnergyGasE6e094766823231590806503PreviousAccumulativeCostOverrideTariff => new(_haContext, "text.octopus_energy_gas_e6e09476682323_1590806503_previous_accumulative_cost_override_tariff");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Electricity 22J0181544 1610019557951 Current Day Rates</summary>
    public EventEntity OctopusEnergyElectricity22j01815441610019557951CurrentDayRates => new(_haContext, "event.octopus_energy_electricity_22j0181544_1610019557951_current_day_rates");
    ///<summary>Electricity 22J0181544 1610019557951 Next Day Rates</summary>
    public EventEntity OctopusEnergyElectricity22j01815441610019557951NextDayRates => new(_haContext, "event.octopus_energy_electricity_22j0181544_1610019557951_next_day_rates");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Consumption Override Rates</summary>
    public EventEntity OctopusEnergyElectricity22j01815441610019557951PreviousConsumptionOverrideRates => new(_haContext, "event.octopus_energy_electricity_22j0181544_1610019557951_previous_consumption_override_rates");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Consumption Rates</summary>
    public EventEntity OctopusEnergyElectricity22j01815441610019557951PreviousConsumptionRates => new(_haContext, "event.octopus_energy_electricity_22j0181544_1610019557951_previous_consumption_rates");
    ///<summary>Electricity 22J0181544 1610019557951 Previous Day Rates</summary>
    public EventEntity OctopusEnergyElectricity22j01815441610019557951PreviousDayRates => new(_haContext, "event.octopus_energy_electricity_22j0181544_1610019557951_previous_day_rates");
    ///<summary>Gas E6E09476682323 1590806503 Current Day Rates</summary>
    public EventEntity OctopusEnergyGasE6e094766823231590806503CurrentDayRates => new(_haContext, "event.octopus_energy_gas_e6e09476682323_1590806503_current_day_rates");
    ///<summary>Gas E6E09476682323 1590806503 Next Day Rates</summary>
    public EventEntity OctopusEnergyGasE6e094766823231590806503NextDayRates => new(_haContext, "event.octopus_energy_gas_e6e09476682323_1590806503_next_day_rates");
    ///<summary>Gas E6E09476682323 1590806503 Previous Consumption Override Rates</summary>
    public EventEntity OctopusEnergyGasE6e094766823231590806503PreviousConsumptionOverrideRates => new(_haContext, "event.octopus_energy_gas_e6e09476682323_1590806503_previous_consumption_override_rates");
    ///<summary>Gas E6E09476682323 1590806503 Previous Consumption Rates</summary>
    public EventEntity OctopusEnergyGasE6e094766823231590806503PreviousConsumptionRates => new(_haContext, "event.octopus_energy_gas_e6e09476682323_1590806503_previous_consumption_rates");
    ///<summary>Gas E6E09476682323 1590806503 Previous Day Rates</summary>
    public EventEntity OctopusEnergyGasE6e094766823231590806503PreviousDayRates => new(_haContext, "event.octopus_energy_gas_e6e09476682323_1590806503_previous_day_rates");
}

public partial class TodoEntities
{
    private readonly IHaContext _haContext;
    public TodoEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home automation tasks</summary>
    public TodoEntity HomeAutomationTasks => new(_haContext, "todo.home_automation_tasks");
    ///<summary>Shopping List</summary>
    public TodoEntity ShoppingList => new(_haContext, "todo.shopping_list");
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public string? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("arm_mode")]
    public object? ArmMode { get; init; }

    [JsonPropertyName("open_sensors")]
    public object? OpenSensors { get; init; }

    [JsonPropertyName("bypassed_sensors")]
    public object? BypassedSensors { get; init; }

    [JsonPropertyName("delay")]
    public object? Delay { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("ready_to_arm_modes")]
    public IReadOnlyList<string>? ReadyToArmModes { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    [JsonPropertyName("target")]
    public string? Target { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("ignoring_battery_optimizations")]
    public bool? IgnoringBatteryOptimizations { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("contact")]
    public bool? Contact { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("tamper")]
    public bool? Tamper { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("uptime")]
    public double? Uptime { get; init; }

    [JsonPropertyName("firm")]
    public string? Firm { get; init; }

    [JsonPropertyName("rssi")]
    public double? Rssi { get; init; }

    [JsonPropertyName("ver")]
    public string? Ver { get; init; }

    [JsonPropertyName("adverts")]
    public double? Adverts { get; init; }

    [JsonPropertyName("seen")]
    public double? Seen { get; init; }

    [JsonPropertyName("queried")]
    public double? Queried { get; init; }

    [JsonPropertyName("reported")]
    public double? Reported { get; init; }

    [JsonPropertyName("freeHeap")]
    public double? FreeHeap { get; init; }

    [JsonPropertyName("maxAllocHeap")]
    public double? MaxAllocHeap { get; init; }

    [JsonPropertyName("memFrag")]
    public double? MemFrag { get; init; }

    [JsonPropertyName("resetReason")]
    public string? ResetReason { get; init; }

    [JsonPropertyName("scanHighWater")]
    public double? ScanHighWater { get; init; }

    [JsonPropertyName("reportHighWater")]
    public double? ReportHighWater { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_changed")]
    public string? LastChanged { get; init; }

    [JsonPropertyName("box")]
    public string? Box { get; init; }

    [JsonPropertyName("wasp")]
    public string? Wasp { get; init; }

    [JsonPropertyName("event_id")]
    public string? EventId { get; init; }

    [JsonPropertyName("event_score")]
    public double? EventScore { get; init; }

    [JsonPropertyName("teleFails")]
    public double? TeleFails { get; init; }

    [JsonPropertyName("occupancy")]
    public bool? Occupancy { get; init; }

    [JsonPropertyName("joined_events")]
    public IReadOnlyList<object>? JoinedEvents { get; init; }

    [JsonPropertyName("next_joined_event_start")]
    public object? NextJoinedEventStart { get; init; }

    [JsonPropertyName("next_joined_event_end")]
    public object? NextJoinedEventEnd { get; init; }

    [JsonPropertyName("next_joined_event_duration_in_minutes")]
    public object? NextJoinedEventDurationInMinutes { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("offset_reached")]
    public bool? OffsetReached { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("width")]
    public double? Width { get; init; }

    [JsonPropertyName("height")]
    public double? Height { get; init; }

    [JsonPropertyName("fps")]
    public double? Fps { get; init; }

    [JsonPropertyName("bitrate")]
    public double? Bitrate { get; init; }

    [JsonPropertyName("channel_id")]
    public double? ChannelId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("generated_at")]
    public string? GeneratedAt { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("hvac_action")]
    public string? HvacAction { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("is_lost")]
    public bool? IsLost { get; init; }

    [JsonPropertyName("last_lost_timestamp")]
    public string? LastLostTimestamp { get; init; }

    [JsonPropertyName("last_timestamp")]
    public string? LastTimestamp { get; init; }

    [JsonPropertyName("ring_state")]
    public string? RingState { get; init; }

    [JsonPropertyName("voip_state")]
    public string? VoipState { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("_is_guest_by_uap")]
    public bool? IsGuestByUap { get; init; }

    [JsonPropertyName("ap_mac")]
    public string? ApMac { get; init; }

    [JsonPropertyName("essid")]
    public string? Essid { get; init; }

    [JsonPropertyName("is_11r")]
    public bool? Is11r { get; init; }

    [JsonPropertyName("is_guest")]
    public bool? IsGuest { get; init; }

    [JsonPropertyName("qos_policy_applied")]
    public bool? QosPolicyApplied { get; init; }

    [JsonPropertyName("radio")]
    public string? Radio { get; init; }

    [JsonPropertyName("radio_proto")]
    public string? RadioProto { get; init; }

    [JsonPropertyName("vlan")]
    public double? Vlan { get; init; }

    [JsonPropertyName("hostname")]
    public string? Hostname { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("oui")]
    public string? Oui { get; init; }

    [JsonPropertyName("note")]
    public string? Note { get; init; }

    [JsonPropertyName("account_fetch_interval")]
    public double? AccountFetchInterval { get; init; }

    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    [JsonPropertyName("device_status")]
    public string? DeviceStatus { get; init; }

    [JsonPropertyName("owner_fullname")]
    public string? OwnerFullname { get; init; }

    [JsonPropertyName("battery_status")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("low_power_mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("x")]
    public double? X { get; init; }

    [JsonPropertyName("y")]
    public double? Y { get; init; }

    [JsonPropertyName("z")]
    public double? Z { get; init; }

    [JsonPropertyName("confidence")]
    public double? Confidence { get; init; }

    [JsonPropertyName("fixes")]
    public double? Fixes { get; init; }

    [JsonPropertyName("best_scenario")]
    public string? BestScenario { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("major")]
    public double? Major { get; init; }

    [JsonPropertyName("minor")]
    public double? Minor { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record EntityControllerEntity : Entity<EntityControllerEntity, EntityState<EntityControllerAttributes>, EntityControllerAttributes>
{
    public EntityControllerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EntityControllerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EntityControllerAttributes
{
    [JsonPropertyName("start")]
    public string? Start { get; init; }

    [JsonPropertyName("end")]
    public string? End { get; init; }

    [JsonPropertyName("sensor_type")]
    public string? SensorType { get; init; }

    [JsonPropertyName("delay")]
    public string? Delay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("last_triggered_by")]
    public string? LastTriggeredBy { get; init; }

    [JsonPropertyName("last_triggered_at")]
    public string? LastTriggeredAt { get; init; }

    [JsonPropertyName("expires_at")]
    public string? ExpiresAt { get; init; }

    [JsonPropertyName("service_data")]
    public object? ServiceData { get; init; }

    [JsonPropertyName("reset_at")]
    public string? ResetAt { get; init; }

    [JsonPropertyName("backoff_count")]
    public double? BackoffCount { get; init; }

    [JsonPropertyName("blocked_at")]
    public string? BlockedAt { get; init; }

    [JsonPropertyName("blocked_by")]
    public string? BlockedBy { get; init; }

    [JsonPropertyName("block_timeout")]
    public double? BlockTimeout { get; init; }
}

public partial record FanEntity : Entity<FanEntity, EntityState<FanAttributes>, FanAttributes>
{
    public FanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public FanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record FanAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record GroupEntity : Entity<GroupEntity, EntityState<GroupAttributes>, GroupAttributes>, IGroupEntityCore
{
    public GroupEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public GroupEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record GroupAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("order")]
    public double? Order { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>, IInputButtonEntityCore
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>, IInputDatetimeEntityCore
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>, IInputSelectEntityCore
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("flowing")]
    public object? Flowing { get; init; }

    [JsonPropertyName("music_mode")]
    public bool? MusicMode { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public object? UpdateAvailable { get; init; }

    [JsonPropertyName("effect")]
    public object? Effect { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("last_called")]
    public object? LastCalled { get; init; }

    [JsonPropertyName("last_called_timestamp")]
    public object? LastCalledTimestamp { get; init; }

    [JsonPropertyName("last_called_summary")]
    public object? LastCalledSummary { get; init; }

    [JsonPropertyName("connected_bluetooth")]
    public object? ConnectedBluetooth { get; init; }

    [JsonPropertyName("bluetooth_list")]
    public IReadOnlyList<string>? BluetoothList { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_track")]
    public double? MediaTrack { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("media_playlist")]
    public string? MediaPlaylist { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }
}

public partial record ProximityEntity : NumericEntity<ProximityEntity, NumericEntityState<ProximityAttributes>, ProximityAttributes>, IProximityEntityCore
{
    public ProximityEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ProximityEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ProximityAttributes
{
    [JsonPropertyName("dir_of_travel")]
    public string? DirOfTravel { get; init; }

    [JsonPropertyName("nearest")]
    public string? Nearest { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("target")]
    public string? Target { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("days")]
    public double? Days { get; init; }

    [JsonPropertyName("last_collection")]
    public string? LastCollection { get; init; }

    [JsonPropertyName("last_updated")]
    public string? LastUpdated { get; init; }

    [JsonPropertyName("next_date")]
    public string? NextDate { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Cellular Technology")]
    public string? CellularTechnology { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea_0 { get; init; }

    [JsonPropertyName("administrative_area")]
    public string? AdministrativeArea_1 { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public object? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country_0 { get; init; }

    [JsonPropertyName("country")]
    public string? Country_1 { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality_0 { get; init; }

    [JsonPropertyName("locality")]
    public string? Locality_1 { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location_0 { get; init; }

    [JsonPropertyName("location")]
    public object? Location_1 { get; init; }

    [JsonPropertyName("Name")]
    public string? Name_0 { get; init; }

    [JsonPropertyName("name")]
    public string? Name_1 { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode_0 { get; init; }

    [JsonPropertyName("postal_code")]
    public string? PostalCode_1 { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea_0 { get; init; }

    [JsonPropertyName("sub_administrative_area")]
    public string? SubAdministrativeArea_1 { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality_0 { get; init; }

    [JsonPropertyName("sub_locality")]
    public string? SubLocality_1 { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare_0 { get; init; }

    [JsonPropertyName("sub_thoroughfare")]
    public string? SubThoroughfare_1 { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare_0 { get; init; }

    [JsonPropertyName("thoroughfare")]
    public string? Thoroughfare_1 { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public object? Zones { get; init; }

    [JsonPropertyName("in_vehicle")]
    public double? InVehicle { get; init; }

    [JsonPropertyName("on_foot")]
    public double? OnFoot { get; init; }

    [JsonPropertyName("still")]
    public double? Still { get; init; }

    [JsonPropertyName("unknown")]
    public double? Unknown { get; init; }

    [JsonPropertyName("walking")]
    public double? Walking { get; init; }

    [JsonPropertyName("Advertise mode")]
    public string? Advertisemode { get; init; }

    [JsonPropertyName("Measured power")]
    public double? Measuredpower { get; init; }

    [JsonPropertyName("Supports transmitter")]
    public bool? Supportstransmitter { get; init; }

    [JsonPropertyName("Transmitting power")]
    public string? Transmittingpower { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("iso_country_code")]
    public string? IsoCountryCode { get; init; }

    [JsonPropertyName("phone")]
    public string? Phone { get; init; }

    [JsonPropertyName("premises")]
    public string? Premises { get; init; }

    [JsonPropertyName("url")]
    public string? Url { get; init; }

    [JsonPropertyName("is_hidden")]
    public bool? IsHidden { get; init; }

    [JsonPropertyName("metered")]
    public bool? Metered { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("linkquality")]
    public object? Linkquality { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("recurrence")]
    public object? Recurrence { get; init; }

    [JsonPropertyName("process_timestamp")]
    public string? ProcessTimestamp { get; init; }

    [JsonPropertyName("prior_value")]
    public object? PriorValue { get; init; }

    [JsonPropertyName("total_active")]
    public double? TotalActive { get; init; }

    [JsonPropertyName("total_all")]
    public double? TotalAll { get; init; }

    [JsonPropertyName("sorted_active")]
    public string? SortedActive { get; init; }

    [JsonPropertyName("sorted_all")]
    public string? SortedAll { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("dismissed")]
    public object? Dismissed { get; init; }

    [JsonPropertyName("reminder")]
    public object? Reminder { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public string? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }

    [JsonPropertyName("on_bicycle")]
    public double? OnBicycle { get; init; }

    [JsonPropertyName("Black bin")]
    public string? Blackbin { get; init; }

    [JsonPropertyName("daysTo")]
    public double? DaysTo { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("Brown bin")]
    public string? Brownbin { get; init; }

    [JsonPropertyName("Blue bin")]
    public string? Bluebin { get; init; }

    [JsonPropertyName("Green bin")]
    public string? Greenbin { get; init; }

    [JsonPropertyName("running")]
    public double? Running { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public object? Serial { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public object? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }

    [JsonPropertyName("e20a39f4-73f5-4bc4-1864-17d1ad07a962_40400_50805")]
    public string? E20a39f473f54bc4186417d1ad07a9624040050805 { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("last_update")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("sensor_id")]
    public string? SensorId { get; init; }

    [JsonPropertyName("site_id")]
    public string? SiteId { get; init; }

    [JsonPropertyName("site_name")]
    public string? SiteName { get; init; }

    [JsonPropertyName("full_url")]
    public string? FullUrl { get; init; }

    [JsonPropertyName("truncated")]
    public bool? Truncated { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("version_ic3")]
    public string? VersionIc3 { get; init; }

    [JsonPropertyName("version_evlog")]
    public string? VersionEvlog { get; init; }

    [JsonPropertyName("versionEvLog")]
    public string? VersionEvLog { get; init; }

    [JsonPropertyName("log_level_debug")]
    public string? LogLevelDebug { get; init; }

    [JsonPropertyName("run_mode")]
    public string? RunMode { get; init; }

    [JsonPropertyName("evlog_btn_urls")]
    public object? EvlogBtnUrls { get; init; }

    [JsonPropertyName("user_message")]
    public string? UserMessage { get; init; }

    [JsonPropertyName("update_time")]
    public string? UpdateTime { get; init; }

    [JsonPropertyName("devicename")]
    public string? Devicename { get; init; }

    [JsonPropertyName("fname")]
    public string? Fname { get; init; }

    [JsonPropertyName("fnames")]
    public object? Fnames { get; init; }

    [JsonPropertyName("filtername")]
    public string? Filtername { get; init; }

    [JsonPropertyName("names")]
    public string? Names { get; init; }

    [JsonPropertyName("logs")]
    public string? Logs { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("country_code")]
    public string? CountryCode { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    [JsonPropertyName("server_country")]
    public string? ServerCountry { get; init; }

    [JsonPropertyName("server_id")]
    public string? ServerId { get; init; }

    [JsonPropertyName("bytes_received")]
    public double? BytesReceived { get; init; }

    [JsonPropertyName("bytes_sent")]
    public double? BytesSent { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total_0 { get; init; }

    [JsonPropertyName("total")]
    public object? Total_1 { get; init; }

    [JsonPropertyName("light")]
    public double? Light { get; init; }

    [JsonPropertyName("motion")]
    public double? Motion { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("end")]
    public double? End { get; init; }

    [JsonPropertyName("start")]
    public double? Start { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("connected_not_paired_devices")]
    public IReadOnlyList<object>? ConnectedNotPairedDevices { get; init; }

    [JsonPropertyName("connected_paired_devices")]
    public object? ConnectedPairedDevices { get; init; }

    [JsonPropertyName("paired_devices")]
    public object? PairedDevices { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("contact")]
    public bool? Contact { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("linkquality")]
    public object? Linkquality { get; init; }

    [JsonPropertyName("tamper")]
    public bool? Tamper { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("account_fetch_interval")]
    public double? AccountFetchInterval { get; init; }

    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    [JsonPropertyName("device_status")]
    public string? DeviceStatus { get; init; }

    [JsonPropertyName("owner_fullname")]
    public string? OwnerFullname { get; init; }

    [JsonPropertyName("battery_status")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("low_power_mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("occupancy")]
    public bool? Occupancy { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("major")]
    public double? Major { get; init; }

    [JsonPropertyName("minor")]
    public double? Minor { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("last_update")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("sensor_id")]
    public string? SensorId { get; init; }

    [JsonPropertyName("site_id")]
    public string? SiteId { get; init; }

    [JsonPropertyName("site_name")]
    public string? SiteName { get; init; }

    [JsonPropertyName("mpan")]
    public string? Mpan { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("is_export")]
    public bool? IsExport { get; init; }

    [JsonPropertyName("is_smart_meter")]
    public bool? IsSmartMeter { get; init; }

    [JsonPropertyName("valid_from")]
    public string? ValidFrom { get; init; }

    [JsonPropertyName("valid_to")]
    public string? ValidTo { get; init; }

    [JsonPropertyName("applicable_rates")]
    public IReadOnlyList<object>? ApplicableRates { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("last_calculated_timestamp")]
    public string? LastCalculatedTimestamp { get; init; }

    [JsonPropertyName("mprn")]
    public string? Mprn { get; init; }

    [JsonPropertyName("tariff")]
    public string? Tariff { get; init; }

    [JsonPropertyName("is_capped")]
    public bool? IsCapped { get; init; }

    [JsonPropertyName("is_intelligent_adjusted")]
    public bool? IsIntelligentAdjusted { get; init; }

    [JsonPropertyName("current_day_min_rate")]
    public double? CurrentDayMinRate { get; init; }

    [JsonPropertyName("current_day_max_rate")]
    public double? CurrentDayMaxRate { get; init; }

    [JsonPropertyName("current_day_average_rate")]
    public double? CurrentDayAverageRate { get; init; }

    [JsonPropertyName("all_rates")]
    public IReadOnlyList<object>? AllRates { get; init; }

    [JsonPropertyName("tariff_code")]
    public string? TariffCode { get; init; }

    [JsonPropertyName("standing_charge")]
    public string? StandingCharge { get; init; }

    [JsonPropertyName("total_without_standing_charge")]
    public string? TotalWithoutStandingCharge { get; init; }

    [JsonPropertyName("charges")]
    public IReadOnlyList<object>? Charges { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("is_estimated")]
    public bool? IsEstimated { get; init; }

    [JsonPropertyName("calorific_value")]
    public double? CalorificValue { get; init; }

    [JsonPropertyName("total_kwh")]
    public double? TotalKwh { get; init; }

    [JsonPropertyName("total_m3")]
    public double? TotalM3 { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("target")]
    public string? Target { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TimerEntity : Entity<TimerEntity, EntityState<TimerAttributes>, TimerAttributes>, ITimerEntityCore
{
    public TimerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimerAttributes
{
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public object? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record VacuumEntity : Entity<VacuumEntity, EntityState<VacuumAttributes>, VacuumAttributes>, IVacuumEntityCore
{
    public VacuumEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VacuumEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record VacuumAttributes
{
    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("battery_icon")]
    public string? BatteryIcon { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("clean_start")]
    public string? CleanStart { get; init; }

    [JsonPropertyName("clean_stop")]
    public string? CleanStop { get; init; }

    [JsonPropertyName("clean_area")]
    public double? CleanArea { get; init; }

    [JsonPropertyName("clean_suspension_count")]
    public double? CleanSuspensionCount { get; init; }

    [JsonPropertyName("clean_suspension_time")]
    public double? CleanSuspensionTime { get; init; }

    [JsonPropertyName("clean_pause_time")]
    public double? CleanPauseTime { get; init; }

    [JsonPropertyName("clean_error_time")]
    public double? CleanErrorTime { get; init; }

    [JsonPropertyName("battery_level_at_clean_start")]
    public double? BatteryLevelAtCleanStart { get; init; }

    [JsonPropertyName("battery_level_at_clean_end")]
    public double? BatteryLevelAtCleanEnd { get; init; }

    [JsonPropertyName("launched_from")]
    public string? LaunchedFrom { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public string? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TextEntity : Entity<TextEntity, EntityState<TextAttributes>, TextAttributes>
{
    public TextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TextAttributes
{
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public string? Pattern { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("rates")]
    public IReadOnlyList<object>? Rates { get; init; }

    [JsonPropertyName("mpan")]
    public string? Mpan { get; init; }

    [JsonPropertyName("serial_number")]
    public string? SerialNumber { get; init; }

    [JsonPropertyName("tariff_code")]
    public string? TariffCode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("mprn")]
    public string? Mprn { get; init; }
}

public partial record TodoEntity : Entity<TodoEntity, EntityState<TodoAttributes>, TodoAttributes>
{
    public TodoEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TodoEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TodoAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public interface IServices
{
    AdguardServices Adguard { get; }

    AlarmControlPanelServices AlarmControlPanel { get; }

    AlarmoServices Alarmo { get; }

    AlexaMediaServices AlexaMedia { get; }

    AutomationServices Automation { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    EntityControllerServices EntityController { get; }

    EsphomeServices Esphome { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    FullyKioskServices FullyKiosk { get; }

    GoogleServices Google { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HumidifierServices Humidifier { get; }

    IcloudServices Icloud { get; }

    Icloud3Services Icloud3 { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LawnMowerServices LawnMower { get; }

    LightServices Light { get; }

    LocaltuyaServices Localtuya { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MatterServices Matter { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    OctopusEnergyServices OctopusEnergy { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    ShoppingListServices ShoppingList { get; }

    SirenServices Siren { get; }

    SpotcastServices Spotcast { get; }

    SqueezeboxServices Squeezebox { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimeServices Time { get; }

    TimerServices Timer { get; }

    TodoServices Todo { get; }

    TtsServices Tts { get; }

    UnifiServices Unifi { get; }

    UnifiprotectServices Unifiprotect { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    WasteCollectionScheduleServices WasteCollectionSchedule { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    YeelightServices Yeelight { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AdguardServices Adguard => new(_haContext);
    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AlarmoServices Alarmo => new(_haContext);
    public AlexaMediaServices AlexaMedia => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public EntityControllerServices EntityController => new(_haContext);
    public EsphomeServices Esphome => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public FullyKioskServices FullyKiosk => new(_haContext);
    public GoogleServices Google => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public IcloudServices Icloud => new(_haContext);
    public Icloud3Services Icloud3 => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LawnMowerServices LawnMower => new(_haContext);
    public LightServices Light => new(_haContext);
    public LocaltuyaServices Localtuya => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MatterServices Matter => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public OctopusEnergyServices OctopusEnergy => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public ShoppingListServices ShoppingList => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SpotcastServices Spotcast => new(_haContext);
    public SqueezeboxServices Squeezebox => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimeServices Time => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TodoServices Todo => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UnifiServices Unifi => new(_haContext);
    public UnifiprotectServices Unifiprotect => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WasteCollectionScheduleServices WasteCollectionSchedule => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public YeelightServices Yeelight => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AdguardServices
{
    private readonly IHaContext _haContext;
    public AdguardServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new filter subscription to AdGuard Home.</summary>
    public void AddUrl(AdguardAddUrlParameters data)
    {
        _haContext.CallService("adguard", "add_url", null, data);
    }

    ///<summary>Add a new filter subscription to AdGuard Home.</summary>
    ///<param name="name">The name of the filter subscription. eg: Example</param>
    ///<param name="url">The filter URL to subscribe to, containing the filter rules. eg: https://www.example.com/filter/1.txt</param>
    public void AddUrl(string name, string url)
    {
        _haContext.CallService("adguard", "add_url", null, new AdguardAddUrlParameters { Name = name, Url = url });
    }

    ///<summary>Disables a filter subscription in AdGuard Home.</summary>
    public void DisableUrl(AdguardDisableUrlParameters data)
    {
        _haContext.CallService("adguard", "disable_url", null, data);
    }

    ///<summary>Disables a filter subscription in AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to disable. eg: https://www.example.com/filter/1.txt</param>
    public void DisableUrl(string url)
    {
        _haContext.CallService("adguard", "disable_url", null, new AdguardDisableUrlParameters { Url = url });
    }

    ///<summary>Enables a filter subscription in AdGuard Home.</summary>
    public void EnableUrl(AdguardEnableUrlParameters data)
    {
        _haContext.CallService("adguard", "enable_url", null, data);
    }

    ///<summary>Enables a filter subscription in AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to enable. eg: https://www.example.com/filter/1.txt</param>
    public void EnableUrl(string url)
    {
        _haContext.CallService("adguard", "enable_url", null, new AdguardEnableUrlParameters { Url = url });
    }

    ///<summary>Refresh all filter subscriptions in AdGuard Home.</summary>
    public void Refresh(AdguardRefreshParameters data)
    {
        _haContext.CallService("adguard", "refresh", null, data);
    }

    ///<summary>Refresh all filter subscriptions in AdGuard Home.</summary>
    ///<param name="force">Force update (bypasses AdGuard Home throttling). &quot;true&quot; to force, or &quot;false&quot; to omit for a regular refresh.</param>
    public void Refresh(bool? force = null)
    {
        _haContext.CallService("adguard", "refresh", null, new AdguardRefreshParameters { Force = force });
    }

    ///<summary>Removes a filter subscription from AdGuard Home.</summary>
    public void RemoveUrl(AdguardRemoveUrlParameters data)
    {
        _haContext.CallService("adguard", "remove_url", null, data);
    }

    ///<summary>Removes a filter subscription from AdGuard Home.</summary>
    ///<param name="url">The filter subscription URL to remove. eg: https://www.example.com/filter/1.txt</param>
    public void RemoveUrl(string url)
    {
        _haContext.CallService("adguard", "remove_url", null, new AdguardRemoveUrlParameters { Url = url });
    }
}

public partial record AdguardAddUrlParameters
{
    ///<summary>The name of the filter subscription. eg: Example</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The filter URL to subscribe to, containing the filter rules. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardDisableUrlParameters
{
    ///<summary>The filter subscription URL to disable. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardEnableUrlParameters
{
    ///<summary>The filter subscription URL to enable. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record AdguardRefreshParameters
{
    ///<summary>Force update (bypasses AdGuard Home throttling). &quot;true&quot; to force, or &quot;false&quot; to omit for a regular refresh.</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record AdguardRemoveUrlParameters
{
    ///<summary>The filter subscription URL to remove. eg: https://www.example.com/filter/1.txt</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AlarmoServices
{
    private readonly IHaContext _haContext;
    public AlarmoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Arm an Alarmo entity with custom settings.</summary>
    public void Arm(AlarmoArmParameters data)
    {
        _haContext.CallService("alarmo", "arm", null, data);
    }

    ///<summary>Arm an Alarmo entity with custom settings.</summary>
    ///<param name="entityId">Name of entity that should be armed. eg: alarm_control_panel.alarm</param>
    ///<param name="code">Code to arm the alarm with. eg: 1234</param>
    ///<param name="mode">Mode to arm the alarm in. eg: away</param>
    ///<param name="skipDelay">Skip the exit delay. eg: True</param>
    ///<param name="force">Automatically bypass all sensors that prevent the arming operation. eg: True</param>
    public void Arm(string entityId, string? code = null, object? mode = null, bool? skipDelay = null, bool? force = null)
    {
        _haContext.CallService("alarmo", "arm", null, new AlarmoArmParameters { EntityId = entityId, Code = code, Mode = mode, SkipDelay = skipDelay, Force = force });
    }

    ///<summary>Block a user from arming/disarming alarmo.</summary>
    public void DisableUser(AlarmoDisableUserParameters data)
    {
        _haContext.CallService("alarmo", "disable_user", null, data);
    }

    ///<summary>Block a user from arming/disarming alarmo.</summary>
    ///<param name="name">Name of the user to disable. eg: Frank</param>
    public void DisableUser(string name)
    {
        _haContext.CallService("alarmo", "disable_user", null, new AlarmoDisableUserParameters { Name = name });
    }

    ///<summary>Disarm an Alarmo entity.</summary>
    public void Disarm(AlarmoDisarmParameters data)
    {
        _haContext.CallService("alarmo", "disarm", null, data);
    }

    ///<summary>Disarm an Alarmo entity.</summary>
    ///<param name="entityId">Name of entity that should be disarmed. eg: alarm_control_panel.alarm</param>
    ///<param name="code">Code to disarm the alarm with. eg: 1234</param>
    public void Disarm(string entityId, string? code = null)
    {
        _haContext.CallService("alarmo", "disarm", null, new AlarmoDisarmParameters { EntityId = entityId, Code = code });
    }

    ///<summary>Allow a user to arm/disarm alarmo.</summary>
    public void EnableUser(AlarmoEnableUserParameters data)
    {
        _haContext.CallService("alarmo", "enable_user", null, data);
    }

    ///<summary>Allow a user to arm/disarm alarmo.</summary>
    ///<param name="name">Name of the user to enable. eg: Frank</param>
    public void EnableUser(string name)
    {
        _haContext.CallService("alarmo", "enable_user", null, new AlarmoEnableUserParameters { Name = name });
    }
}

public partial record AlarmoArmParameters
{
    ///<summary>Name of entity that should be armed. eg: alarm_control_panel.alarm</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Code to arm the alarm with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }

    ///<summary>Mode to arm the alarm in. eg: away</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }

    ///<summary>Skip the exit delay. eg: True</summary>
    [JsonPropertyName("skip_delay")]
    public bool? SkipDelay { get; init; }

    ///<summary>Automatically bypass all sensors that prevent the arming operation. eg: True</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record AlarmoDisableUserParameters
{
    ///<summary>Name of the user to disable. eg: Frank</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record AlarmoDisarmParameters
{
    ///<summary>Name of entity that should be disarmed. eg: alarm_control_panel.alarm</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Code to disarm the alarm with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmoEnableUserParameters
{
    ///<summary>Name of the user to enable. eg: Frank</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial class AlexaMediaServices
{
    private readonly IHaContext _haContext;
    public AlexaMediaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear last entries from Alexa Voice history for each Alexa account.</summary>
    public void ClearHistory(AlexaMediaClearHistoryParameters data)
    {
        _haContext.CallService("alexa_media", "clear_history", null, data);
    }

    ///<summary>Clear last entries from Alexa Voice history for each Alexa account.</summary>
    ///<param name="email">Accounts to clear. Empty will clear all. eg: my_email@alexa.com</param>
    ///<param name="entries">Number of entries to clear from 1 to 50. If empty, clear 50. eg: 50</param>
    public void ClearHistory(object? email = null, object? entries = null)
    {
        _haContext.CallService("alexa_media", "clear_history", null, new AlexaMediaClearHistoryParameters { Email = email, Entries = entries });
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    public void ForceLogout(AlexaMediaForceLogoutParameters data)
    {
        _haContext.CallService("alexa_media", "force_logout", null, data);
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    ///<param name="email">Accounts to clear. Empty will clear all. eg: my_email@alexa.com</param>
    public void ForceLogout(object? email = null)
    {
        _haContext.CallService("alexa_media", "force_logout", null, new AlexaMediaForceLogoutParameters { Email = email });
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    public void UpdateLastCalled(AlexaMediaUpdateLastCalledParameters data)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, data);
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    ///<param name="email">List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</param>
    public void UpdateLastCalled(object? email = null)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, new AlexaMediaUpdateLastCalledParameters { Email = email });
    }
}

public partial record AlexaMediaClearHistoryParameters
{
    ///<summary>Accounts to clear. Empty will clear all. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }

    ///<summary>Number of entries to clear from 1 to 50. If empty, clear 50. eg: 50</summary>
    [JsonPropertyName("entries")]
    public object? Entries { get; init; }
}

public partial record AlexaMediaForceLogoutParameters
{
    ///<summary>Accounts to clear. Empty will clear all. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial record AlexaMediaUpdateLastCalledParameters
{
    ///<summary>List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void ListEvents(ServiceTarget target, CalendarListEventsParameters data)
    {
        _haContext.CallService("calendar", "list_events", target, data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void ListEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "list_events", target, new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarListEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    public void Process(string text, string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Configure()
    {
        _haContext.CallService("counter", "configure", null);
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class EntityControllerServices
{
    private readonly IHaContext _haContext;
    public EntityControllerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates an Entity Controller. Turns on the entity and transitions to the active_timer state. This also clears the blocked state if set.</summary>
    public void Activate(EntityControllerActivateParameters data)
    {
        _haContext.CallService("entity_controller", "activate", null, data);
    }

    ///<summary>Activates an Entity Controller. Turns on the entity and transitions to the active_timer state. This also clears the blocked state if set.</summary>
    ///<param name="entityId">Name(s) of entities to trigger. eg: entity_controller.motion_light</param>
    public void Activate(object? entityId = null)
    {
        _haContext.CallService("entity_controller", "activate", null, new EntityControllerActivateParameters { EntityId = entityId });
    }

    ///<summary>Clears the blocked state of an Entity Controller, if set</summary>
    public void ClearBlock(EntityControllerClearBlockParameters data)
    {
        _haContext.CallService("entity_controller", "clear_block", null, data);
    }

    ///<summary>Clears the blocked state of an Entity Controller, if set</summary>
    ///<param name="entityId">Name(s) of entities to change. eg: entity_controller.motion_light</param>
    public void ClearBlock(object? entityId = null)
    {
        _haContext.CallService("entity_controller", "clear_block", null, new EntityControllerClearBlockParameters { EntityId = entityId });
    }

    public void DisableStayMode()
    {
        _haContext.CallService("entity_controller", "disable_stay_mode", null);
    }

    ///<summary>Enables the blocked state of an Entity Controller, if timer is active</summary>
    public void EnableBlock(EntityControllerEnableBlockParameters data)
    {
        _haContext.CallService("entity_controller", "enable_block", null, data);
    }

    ///<summary>Enables the blocked state of an Entity Controller, if timer is active</summary>
    ///<param name="entityId">Name(s) of entities to change. eg: entity_controller.motion_light</param>
    public void EnableBlock(object? entityId = null)
    {
        _haContext.CallService("entity_controller", "enable_block", null, new EntityControllerEnableBlockParameters { EntityId = entityId });
    }

    public void EnableStayMode()
    {
        _haContext.CallService("entity_controller", "enable_stay_mode", null);
    }

    ///<summary>Change the night mode start and end times, does nothing if night mode is not defined in configuration. If both start_time and end_time are not provided, it will set both to midnight, effectivly disabling night mode.</summary>
    public void SetNightMode(EntityControllerSetNightModeParameters data)
    {
        _haContext.CallService("entity_controller", "set_night_mode", null, data);
    }

    ///<summary>Change the night mode start and end times, does nothing if night mode is not defined in configuration. If both start_time and end_time are not provided, it will set both to midnight, effectivly disabling night mode.</summary>
    ///<param name="entityId">Name(s) of entities to change. eg: entity_controller.motion_light</param>
    ///<param name="startTime">new start time to set night mode to. eg: sunset - 00:30:00 or &apos;18:30:00&apos; or now or constraint (set same as day start)</param>
    ///<param name="endTime">new end time to set night mode to. eg: sunset + 03:00:00 or &apos;21:30:00&apos; or now or constraint (set same as day end)</param>
    public void SetNightMode(object? entityId = null, object? startTime = null, object? endTime = null)
    {
        _haContext.CallService("entity_controller", "set_night_mode", null, new EntityControllerSetNightModeParameters { EntityId = entityId, StartTime = startTime, EndTime = endTime });
    }
}

public partial record EntityControllerActivateParameters
{
    ///<summary>Name(s) of entities to trigger. eg: entity_controller.motion_light</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record EntityControllerClearBlockParameters
{
    ///<summary>Name(s) of entities to change. eg: entity_controller.motion_light</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record EntityControllerEnableBlockParameters
{
    ///<summary>Name(s) of entities to change. eg: entity_controller.motion_light</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record EntityControllerSetNightModeParameters
{
    ///<summary>Name(s) of entities to change. eg: entity_controller.motion_light</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>new start time to set night mode to. eg: sunset - 00:30:00 or &apos;18:30:00&apos; or now or constraint (set same as day start)</summary>
    [JsonPropertyName("start_time")]
    public object? StartTime { get; init; }

    ///<summary>new end time to set night mode to. eg: sunset + 03:00:00 or &apos;21:30:00&apos; or now or constraint (set same as day end)</summary>
    [JsonPropertyName("end_time")]
    public object? EndTime { get; init; }
}

public partial class EsphomeServices
{
    private readonly IHaContext _haContext;
    public EsphomeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calls the service notification_clear of the node nspanel</summary>
    public void NspanelNotificationClear()
    {
        _haContext.CallService("esphome", "nspanel_notification_clear", null);
    }

    ///<summary>Calls the service notification_show of the node nspanel</summary>
    public void NspanelNotificationShow(EsphomeNspanelNotificationShowParameters data)
    {
        _haContext.CallService("esphome", "nspanel_notification_show", null, data);
    }

    ///<summary>Calls the service notification_show of the node nspanel</summary>
    ///<param name="label"> eg: Example text</param>
    ///<param name="text"> eg: Example text</param>
    public void NspanelNotificationShow(string label, string text)
    {
        _haContext.CallService("esphome", "nspanel_notification_show", null, new EsphomeNspanelNotificationShowParameters { Label = label, Text = text });
    }

    ///<summary>Calls the service play_rtttl of the node nspanel</summary>
    public void NspanelPlayRtttl(EsphomeNspanelPlayRtttlParameters data)
    {
        _haContext.CallService("esphome", "nspanel_play_rtttl", null, data);
    }

    ///<summary>Calls the service play_rtttl of the node nspanel</summary>
    ///<param name="songStr"> eg: Example text</param>
    public void NspanelPlayRtttl(string songStr)
    {
        _haContext.CallService("esphome", "nspanel_play_rtttl", null, new EsphomeNspanelPlayRtttlParameters { SongStr = songStr });
    }

    ///<summary>Calls the service qr_code of the node nspanel</summary>
    public void NspanelQrCode(EsphomeNspanelQrCodeParameters data)
    {
        _haContext.CallService("esphome", "nspanel_qr_code", null, data);
    }

    ///<summary>Calls the service qr_code of the node nspanel</summary>
    ///<param name="qrdata"> eg: Example text</param>
    public void NspanelQrCode(string qrdata)
    {
        _haContext.CallService("esphome", "nspanel_qr_code", null, new EsphomeNspanelQrCodeParameters { Qrdata = qrdata });
    }

    ///<summary>Calls the service send_command_background_color of the node nspanel</summary>
    public void NspanelSendCommandBackgroundColor(EsphomeNspanelSendCommandBackgroundColorParameters data)
    {
        _haContext.CallService("esphome", "nspanel_send_command_background_color", null, data);
    }

    ///<summary>Calls the service send_command_background_color of the node nspanel</summary>
    ///<param name="component"> eg: Example text</param>
    ///<param name="message"> eg: 42</param>
    public void NspanelSendCommandBackgroundColor(string component, long message)
    {
        _haContext.CallService("esphome", "nspanel_send_command_background_color", null, new EsphomeNspanelSendCommandBackgroundColorParameters { Component = component, Message = message });
    }

    ///<summary>Calls the service send_command_font_color of the node nspanel</summary>
    public void NspanelSendCommandFontColor(EsphomeNspanelSendCommandFontColorParameters data)
    {
        _haContext.CallService("esphome", "nspanel_send_command_font_color", null, data);
    }

    ///<summary>Calls the service send_command_font_color of the node nspanel</summary>
    ///<param name="component"> eg: Example text</param>
    ///<param name="message"> eg: 42</param>
    public void NspanelSendCommandFontColor(string component, long message)
    {
        _haContext.CallService("esphome", "nspanel_send_command_font_color", null, new EsphomeNspanelSendCommandFontColorParameters { Component = component, Message = message });
    }

    ///<summary>Calls the service send_command_hide of the node nspanel</summary>
    public void NspanelSendCommandHide(EsphomeNspanelSendCommandHideParameters data)
    {
        _haContext.CallService("esphome", "nspanel_send_command_hide", null, data);
    }

    ///<summary>Calls the service send_command_hide of the node nspanel</summary>
    ///<param name="component"> eg: Example text</param>
    public void NspanelSendCommandHide(string component)
    {
        _haContext.CallService("esphome", "nspanel_send_command_hide", null, new EsphomeNspanelSendCommandHideParameters { Component = component });
    }

    ///<summary>Calls the service send_command_printf of the node nspanel</summary>
    public void NspanelSendCommandPrintf(EsphomeNspanelSendCommandPrintfParameters data)
    {
        _haContext.CallService("esphome", "nspanel_send_command_printf", null, data);
    }

    ///<summary>Calls the service send_command_printf of the node nspanel</summary>
    ///<param name="cmd"> eg: Example text</param>
    public void NspanelSendCommandPrintf(string cmd)
    {
        _haContext.CallService("esphome", "nspanel_send_command_printf", null, new EsphomeNspanelSendCommandPrintfParameters { Cmd = cmd });
    }

    ///<summary>Calls the service send_command_show of the node nspanel</summary>
    public void NspanelSendCommandShow(EsphomeNspanelSendCommandShowParameters data)
    {
        _haContext.CallService("esphome", "nspanel_send_command_show", null, data);
    }

    ///<summary>Calls the service send_command_show of the node nspanel</summary>
    ///<param name="component"> eg: Example text</param>
    public void NspanelSendCommandShow(string component)
    {
        _haContext.CallService("esphome", "nspanel_send_command_show", null, new EsphomeNspanelSendCommandShowParameters { Component = component });
    }

    ///<summary>Calls the service send_command_show_all of the node nspanel</summary>
    public void NspanelSendCommandShowAll()
    {
        _haContext.CallService("esphome", "nspanel_send_command_show_all", null);
    }

    ///<summary>Calls the service send_command_text_printf of the node nspanel</summary>
    public void NspanelSendCommandTextPrintf(EsphomeNspanelSendCommandTextPrintfParameters data)
    {
        _haContext.CallService("esphome", "nspanel_send_command_text_printf", null, data);
    }

    ///<summary>Calls the service send_command_text_printf of the node nspanel</summary>
    ///<param name="component"> eg: Example text</param>
    ///<param name="message"> eg: Example text</param>
    public void NspanelSendCommandTextPrintf(string component, string message)
    {
        _haContext.CallService("esphome", "nspanel_send_command_text_printf", null, new EsphomeNspanelSendCommandTextPrintfParameters { Component = component, Message = message });
    }

    ///<summary>Calls the service send_command_value of the node nspanel</summary>
    public void NspanelSendCommandValue(EsphomeNspanelSendCommandValueParameters data)
    {
        _haContext.CallService("esphome", "nspanel_send_command_value", null, data);
    }

    ///<summary>Calls the service send_command_value of the node nspanel</summary>
    ///<param name="component"> eg: Example text</param>
    ///<param name="message"> eg: 42</param>
    public void NspanelSendCommandValue(string component, long message)
    {
        _haContext.CallService("esphome", "nspanel_send_command_value", null, new EsphomeNspanelSendCommandValueParameters { Component = component, Message = message });
    }

    ///<summary>Calls the service send_thermostat_cycle_state of the node nspanel</summary>
    public void NspanelSendThermostatCycleState(EsphomeNspanelSendThermostatCycleStateParameters data)
    {
        _haContext.CallService("esphome", "nspanel_send_thermostat_cycle_state", null, data);
    }

    ///<summary>Calls the service send_thermostat_cycle_state of the node nspanel</summary>
    ///<param name="value"> eg: 12.3</param>
    public void NspanelSendThermostatCycleState(double value)
    {
        _haContext.CallService("esphome", "nspanel_send_thermostat_cycle_state", null, new EsphomeNspanelSendThermostatCycleStateParameters { Value = value });
    }

    ///<summary>Calls the service set_button of the node nspanel</summary>
    public void NspanelSetButton(EsphomeNspanelSetButtonParameters data)
    {
        _haContext.CallService("esphome", "nspanel_set_button", null, data);
    }

    ///<summary>Calls the service set_button of the node nspanel</summary>
    ///<param name="btnId"> eg: Example text</param>
    ///<param name="btnPic"> eg: 42</param>
    ///<param name="btnBg"> eg: 42</param>
    ///<param name="btnIconFont"> eg: 42</param>
    ///<param name="btnTxtFont"> eg: 42</param>
    ///<param name="btnBriFont"> eg: 42</param>
    ///<param name="btnIcon"> eg: Example text</param>
    ///<param name="btnLabel"> eg: Example text</param>
    ///<param name="btnBriTxt"> eg: Example text</param>
    public void NspanelSetButton(string btnId, long btnPic, long btnBg, long btnIconFont, long btnTxtFont, long btnBriFont, string btnIcon, string btnLabel, string btnBriTxt)
    {
        _haContext.CallService("esphome", "nspanel_set_button", null, new EsphomeNspanelSetButtonParameters { BtnId = btnId, BtnPic = btnPic, BtnBg = btnBg, BtnIconFont = btnIconFont, BtnTxtFont = btnTxtFont, BtnBriFont = btnBriFont, BtnIcon = btnIcon, BtnLabel = btnLabel, BtnBriTxt = btnBriTxt });
    }

    ///<summary>Calls the service set_settings_entity of the node nspanel</summary>
    public void NspanelSetSettingsEntity(EsphomeNspanelSetSettingsEntityParameters data)
    {
        _haContext.CallService("esphome", "nspanel_set_settings_entity", null, data);
    }

    ///<summary>Calls the service set_settings_entity of the node nspanel</summary>
    ///<param name="entity"> eg: Example text</param>
    public void NspanelSetSettingsEntity(string entity)
    {
        _haContext.CallService("esphome", "nspanel_set_settings_entity", null, new EsphomeNspanelSetSettingsEntityParameters { Entity = entity });
    }

    ///<summary>Calls the service upload_tft of the node nspanel</summary>
    public void NspanelUploadTft()
    {
        _haContext.CallService("esphome", "nspanel_upload_tft", null);
    }

    ///<summary>Calls the service upload_tft_url of the node nspanel</summary>
    public void NspanelUploadTftUrl(EsphomeNspanelUploadTftUrlParameters data)
    {
        _haContext.CallService("esphome", "nspanel_upload_tft_url", null, data);
    }

    ///<summary>Calls the service upload_tft_url of the node nspanel</summary>
    ///<param name="url"> eg: Example text</param>
    public void NspanelUploadTftUrl(string url)
    {
        _haContext.CallService("esphome", "nspanel_upload_tft_url", null, new EsphomeNspanelUploadTftUrlParameters { Url = url });
    }
}

public partial record EsphomeNspanelNotificationShowParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("label")]
    public string? Label { get; init; }

    ///<summary> eg: Example text</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }
}

public partial record EsphomeNspanelPlayRtttlParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("song_str")]
    public string? SongStr { get; init; }
}

public partial record EsphomeNspanelQrCodeParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("qrdata")]
    public string? Qrdata { get; init; }
}

public partial record EsphomeNspanelSendCommandBackgroundColorParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("component")]
    public string? Component { get; init; }

    ///<summary> eg: 42</summary>
    [JsonPropertyName("message")]
    public long? Message { get; init; }
}

public partial record EsphomeNspanelSendCommandFontColorParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("component")]
    public string? Component { get; init; }

    ///<summary> eg: 42</summary>
    [JsonPropertyName("message")]
    public long? Message { get; init; }
}

public partial record EsphomeNspanelSendCommandHideParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("component")]
    public string? Component { get; init; }
}

public partial record EsphomeNspanelSendCommandPrintfParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("cmd")]
    public string? Cmd { get; init; }
}

public partial record EsphomeNspanelSendCommandShowParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("component")]
    public string? Component { get; init; }
}

public partial record EsphomeNspanelSendCommandTextPrintfParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("component")]
    public string? Component { get; init; }

    ///<summary> eg: Example text</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record EsphomeNspanelSendCommandValueParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("component")]
    public string? Component { get; init; }

    ///<summary> eg: 42</summary>
    [JsonPropertyName("message")]
    public long? Message { get; init; }
}

public partial record EsphomeNspanelSendThermostatCycleStateParameters
{
    ///<summary> eg: 12.3</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial record EsphomeNspanelSetButtonParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("btn_id")]
    public string? BtnId { get; init; }

    ///<summary> eg: 42</summary>
    [JsonPropertyName("btn_pic")]
    public long? BtnPic { get; init; }

    ///<summary> eg: 42</summary>
    [JsonPropertyName("btn_bg")]
    public long? BtnBg { get; init; }

    ///<summary> eg: 42</summary>
    [JsonPropertyName("btn_icon_font")]
    public long? BtnIconFont { get; init; }

    ///<summary> eg: 42</summary>
    [JsonPropertyName("btn_txt_font")]
    public long? BtnTxtFont { get; init; }

    ///<summary> eg: 42</summary>
    [JsonPropertyName("btn_bri_font")]
    public long? BtnBriFont { get; init; }

    ///<summary> eg: Example text</summary>
    [JsonPropertyName("btn_icon")]
    public string? BtnIcon { get; init; }

    ///<summary> eg: Example text</summary>
    [JsonPropertyName("btn_label")]
    public string? BtnLabel { get; init; }

    ///<summary> eg: Example text</summary>
    [JsonPropertyName("btn_bri_txt")]
    public string? BtnBriTxt { get; init; }
}

public partial record EsphomeNspanelSetSettingsEntityParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }
}

public partial record EsphomeNspanelUploadTftUrlParameters
{
    ///<summary> eg: Example text</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class FullyKioskServices
{
    private readonly IHaContext _haContext;
    public FullyKioskServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Loads a URL on Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    public void LoadUrl(ServiceTarget target, FullyKioskLoadUrlParameters data)
    {
        _haContext.CallService("fully_kiosk", "load_url", target, data);
    }

    ///<summary>Loads a URL on Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="url">URL to load. eg: https://home-assistant.io</param>
    public void LoadUrl(ServiceTarget target, string url)
    {
        _haContext.CallService("fully_kiosk", "load_url", target, new FullyKioskLoadUrlParameters { Url = url });
    }

    ///<summary>Sets a configuration parameter on Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetConfig(ServiceTarget target, FullyKioskSetConfigParameters data)
    {
        _haContext.CallService("fully_kiosk", "set_config", target, data);
    }

    ///<summary>Sets a configuration parameter on Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="key">Configuration parameter to set. eg: motionSensitivity</param>
    ///<param name="value">Value for the configuration parameter. eg: 90</param>
    public void SetConfig(ServiceTarget target, string key, string value)
    {
        _haContext.CallService("fully_kiosk", "set_config", target, new FullyKioskSetConfigParameters { Key = key, Value = value });
    }

    ///<summary>Starts an application on the device running Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartApplication(ServiceTarget target, FullyKioskStartApplicationParameters data)
    {
        _haContext.CallService("fully_kiosk", "start_application", target, data);
    }

    ///<summary>Starts an application on the device running Fully Kiosk Browser.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="application">Package name of the application to start. eg: de.ozerov.fully</param>
    public void StartApplication(ServiceTarget target, string application)
    {
        _haContext.CallService("fully_kiosk", "start_application", target, new FullyKioskStartApplicationParameters { Application = application });
    }
}

public partial record FullyKioskLoadUrlParameters
{
    ///<summary>URL to load. eg: https://home-assistant.io</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial record FullyKioskSetConfigParameters
{
    ///<summary>Configuration parameter to set. eg: motionSensitivity</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Value for the configuration parameter. eg: 90</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record FullyKioskStartApplicationParameters
{
    ///<summary>Package name of the application to start. eg: de.ozerov.fully</summary>
    [JsonPropertyName("application")]
    public string? Application { get; init; }
}

public partial class GoogleServices
{
    private readonly IHaContext _haContext;
    public GoogleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    public void AddEvent(GoogleAddEventParameters data)
    {
        _haContext.CallService("google", "add_event", null, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="calendarId">The id of the calendar you want. eg: Your email</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2019-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2019-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2019-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2019-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    public void AddEvent(string calendarId, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null)
    {
        _haContext.CallService("google", "add_event", null, new GoogleAddEventParameters { CalendarId = calendarId, Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in });
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, GoogleCreateEventParameters data)
    {
        _haContext.CallService("google", "create_event", target, data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("google", "create_event", target, new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public partial record GoogleAddEventParameters
{
    ///<summary>The id of the calendar you want. eg: Your email</summary>
    [JsonPropertyName("calendar_id")]
    public string? CalendarId { get; init; }

    ///<summary>Acts as the title of the event. eg: Bowling</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>The description of the event. Optional. eg: Birthday bowling</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2019-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public string? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2019-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public string? EndDateTime { get; init; }

    ///<summary>The date the whole day event should start. eg: 2019-03-10</summary>
    [JsonPropertyName("start_date")]
    public string? StartDate { get; init; }

    ///<summary>The date the whole day event should end. eg: 2019-03-11</summary>
    [JsonPropertyName("end_date")]
    public string? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }
}

public partial record GoogleCreateEventParameters
{
    ///<summary>Acts as the title of the event. eg: Bowling</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>The description of the event. Optional. eg: Birthday bowling</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public string? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public string? EndDateTime { get; init; }

    ///<summary>The date the whole day event should start. eg: 2022-03-10</summary>
    [JsonPropertyName("start_date")]
    public string? StartDate { get; init; }

    ///<summary>The date the whole day event should end. eg: 2022-03-11</summary>
    [JsonPropertyName("end_date")]
    public string? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot()
    {
        _haContext.CallService("hassio", "host_reboot", null);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown()
    {
        _haContext.CallService("hassio", "host_shutdown", null);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class IcloudServices
{
    private readonly IHaContext _haContext;
    public IcloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Displays a message on an Apple device.</summary>
    public void DisplayMessage(IcloudDisplayMessageParameters data)
    {
        _haContext.CallService("icloud", "display_message", null, data);
    }

    ///<summary>Displays a message on an Apple device.</summary>
    ///<param name="account">Your iCloud account username (email) or account name. eg: steve@apple.com</param>
    ///<param name="deviceName">The name of the Apple device to display the message. eg: stevesiphone</param>
    ///<param name="message">The content of your message. eg: Hey Steve !</param>
    ///<param name="sound">To make a sound when displaying the message.</param>
    public void DisplayMessage(string account, string deviceName, string message, bool? sound = null)
    {
        _haContext.CallService("icloud", "display_message", null, new IcloudDisplayMessageParameters { Account = account, DeviceName = deviceName, Message = message, Sound = sound });
    }

    ///<summary>Makes an Apple device in lost state.</summary>
    public void LostDevice(IcloudLostDeviceParameters data)
    {
        _haContext.CallService("icloud", "lost_device", null, data);
    }

    ///<summary>Makes an Apple device in lost state.</summary>
    ///<param name="account">Your iCloud account username (email) or account name. eg: steve@apple.com</param>
    ///<param name="deviceName">The name of the Apple device to set lost. eg: stevesiphone</param>
    ///<param name="number">The phone number to call in lost mode (must contain country code). eg: +33450020100</param>
    ///<param name="message">The message to display in lost mode. eg: Call me</param>
    public void LostDevice(string account, string deviceName, string number, string message)
    {
        _haContext.CallService("icloud", "lost_device", null, new IcloudLostDeviceParameters { Account = account, DeviceName = deviceName, Number = number, Message = message });
    }

    ///<summary>Plays sound on an Apple device.</summary>
    public void PlaySound(IcloudPlaySoundParameters data)
    {
        _haContext.CallService("icloud", "play_sound", null, data);
    }

    ///<summary>Plays sound on an Apple device.</summary>
    ///<param name="account">Your iCloud account username (email) or account name. eg: steve@apple.com</param>
    ///<param name="deviceName">The name of the Apple device to play a sound. eg: stevesiphone</param>
    public void PlaySound(string account, string deviceName)
    {
        _haContext.CallService("icloud", "play_sound", null, new IcloudPlaySoundParameters { Account = account, DeviceName = deviceName });
    }

    ///<summary>Updates iCloud devices.</summary>
    public void Update(IcloudUpdateParameters data)
    {
        _haContext.CallService("icloud", "update", null, data);
    }

    ///<summary>Updates iCloud devices.</summary>
    ///<param name="account">Your iCloud account username (email) or account name. eg: steve@apple.com</param>
    public void Update(string account)
    {
        _haContext.CallService("icloud", "update", null, new IcloudUpdateParameters { Account = account });
    }
}

public partial record IcloudDisplayMessageParameters
{
    ///<summary>Your iCloud account username (email) or account name. eg: steve@apple.com</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }

    ///<summary>The name of the Apple device to display the message. eg: stevesiphone</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    ///<summary>The content of your message. eg: Hey Steve !</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>To make a sound when displaying the message.</summary>
    [JsonPropertyName("sound")]
    public bool? Sound { get; init; }
}

public partial record IcloudLostDeviceParameters
{
    ///<summary>Your iCloud account username (email) or account name. eg: steve@apple.com</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }

    ///<summary>The name of the Apple device to set lost. eg: stevesiphone</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    ///<summary>The phone number to call in lost mode (must contain country code). eg: +33450020100</summary>
    [JsonPropertyName("number")]
    public string? Number { get; init; }

    ///<summary>The message to display in lost mode. eg: Call me</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record IcloudPlaySoundParameters
{
    ///<summary>Your iCloud account username (email) or account name. eg: steve@apple.com</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }

    ///<summary>The name of the Apple device to play a sound. eg: stevesiphone</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }
}

public partial record IcloudUpdateParameters
{
    ///<summary>Your iCloud account username (email) or account name. eg: steve@apple.com</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }
}

public partial class Icloud3Services
{
    private readonly IHaContext _haContext;
    public Icloud3Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>This service will send operational commands to iCloud3</summary>
    public void Action(Icloud3ActionParameters data)
    {
        _haContext.CallService("icloud3", "action", null, data);
    }

    ///<summary>This service will send operational commands to iCloud3</summary>
    ///<param name="command">(Required) The operational command to send to iCloud3 eg: pause</param>
    ///<param name="deviceName">(Optional) Apply all devices or only apply to the selected device eg: Gary (gary_iphone)</param>
    public void Action(object command, string? deviceName = null)
    {
        _haContext.CallService("icloud3", "action", null, new Icloud3ActionParameters { Command = command, DeviceName = deviceName });
    }

    ///<summary>This service will send an alert tone to the device that you want to find</summary>
    public void FindIphoneAlert(Icloud3FindIphoneAlertParameters data)
    {
        _haContext.CallService("icloud3", "find_iphone_alert", null, data);
    }

    ///<summary>This service will send an alert tone to the device that you want to find</summary>
    ///<param name="deviceName">Device the Find iPhone Alert and Message should be sent to eg: Gary (gary_iphone)</param>
    public void FindIphoneAlert(string deviceName)
    {
        _haContext.CallService("icloud3", "find_iphone_alert", null, new Icloud3FindIphoneAlertParameters { DeviceName = deviceName });
    }

    ///<summary>This service will send a Message and Phone number to the lost iPhone</summary>
    public void LostDeviceAlert(Icloud3LostDeviceAlertParameters data)
    {
        _haContext.CallService("icloud3", "lost_device_alert", null, data);
    }

    ///<summary>This service will send a Message and Phone number to the lost iPhone</summary>
    ///<param name="deviceName">Device the Find iPhone Alert and Message should be sent to eg: Gary (gary_iphone)</param>
    ///<param name="number">The phone number to send the message to eg: 123-456-7890</param>
    ///<param name="message">The message to be sent eg: This Phone has been lost. Please call this number to report it found.</param>
    public void LostDeviceAlert(string deviceName, string number, string message)
    {
        _haContext.CallService("icloud3", "lost_device_alert", null, new Icloud3LostDeviceAlertParameters { DeviceName = deviceName, Number = number, Message = message });
    }

    ///<summary>This service will restart iCloud3</summary>
    public void Restart()
    {
        _haContext.CallService("icloud3", "restart", null);
    }

    ///<summary>The Update service has been replaced by the Action service</summary>
    public void Update()
    {
        _haContext.CallService("icloud3", "update", null);
    }
}

public partial record Icloud3ActionParameters
{
    ///<summary>(Required) The operational command to send to iCloud3 eg: pause</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>(Optional) Apply all devices or only apply to the selected device eg: Gary (gary_iphone)</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }
}

public partial record Icloud3FindIphoneAlertParameters
{
    ///<summary>Device the Find iPhone Alert and Message should be sent to eg: Gary (gary_iphone)</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }
}

public partial record Icloud3LostDeviceAlertParameters
{
    ///<summary>Device the Find iPhone Alert and Message should be sent to eg: Gary (gary_iphone)</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    ///<summary>The phone number to send the message to eg: 123-456-7890</summary>
    [JsonPropertyName("number")]
    public string? Number { get; init; }

    ///<summary>The message to be sent eg: This Phone has been lost. Please call this number to report it found.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increments the value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LawnMowerServices
{
    private readonly IHaContext _haContext;
    public LawnMowerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the mowing task and returns to the dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Dock(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "dock", target);
    }

    ///<summary>Pauses the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "pause", target);
    }

    ///<summary>Starts the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartMowing(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "start_mowing", target);
    }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LocaltuyaServices
{
    private readonly IHaContext _haContext;
    public LocaltuyaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload localtuya and reconnect to all devices.</summary>
    public void Reload()
    {
        _haContext.CallService("localtuya", "reload", null);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    public void SetDp(LocaltuyaSetDpParameters data)
    {
        _haContext.CallService("localtuya", "set_dp", null, data);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    ///<param name="deviceId">Device ID of device to change datapoint value for eg: 11100118278aab4de001</param>
    ///<param name="dp">Datapoint index eg: 1</param>
    ///<param name="value">New value to set eg: False</param>
    public void SetDp(object? deviceId = null, object? dp = null, object? value = null)
    {
        _haContext.CallService("localtuya", "set_dp", null, new LocaltuyaSetDpParameters { DeviceId = deviceId, Dp = dp, Value = value });
    }
}

public partial record LocaltuyaSetDpParameters
{
    ///<summary>Device ID of device to change datapoint value for eg: 11100118278aab4de001</summary>
    [JsonPropertyName("device_id")]
    public object? DeviceId { get; init; }

    ///<summary>Datapoint index eg: 1</summary>
    [JsonPropertyName("dp")]
    public object? Dp { get; init; }

    ///<summary>New value to set eg: False</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MatterServices
{
    private readonly IHaContext _haContext;
    public MatterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Allows adding one of your devices to another Matter network by opening the commissioning window for this Matter device for 60 seconds.</summary>
    public void OpenCommissioningWindow(MatterOpenCommissioningWindowParameters data)
    {
        _haContext.CallService("matter", "open_commissioning_window", null, data);
    }

    ///<summary>Allows adding one of your devices to another Matter network by opening the commissioning window for this Matter device for 60 seconds.</summary>
    ///<param name="deviceId">The Matter device to add to the other Matter network.</param>
    public void OpenCommissioningWindow(string deviceId)
    {
        _haContext.CallService("matter", "open_commissioning_window", null, new MatterOpenCommissioningWindowParameters { DeviceId = deviceId });
    }
}

public partial record MatterOpenCommissioningWindowParameters
{
    ///<summary>The Matter device to add to the other Matter network.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    public void AlexaMedia(NotifyAlexaMediaParameters data)
    {
        _haContext.CallService("notify", "alexa_media", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMedia(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media", null, new NotifyAlexaMediaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_all_speakers integration.</summary>
    public void AlexaMediaAllSpeakers(NotifyAlexaMediaAllSpeakersParameters data)
    {
        _haContext.CallService("notify", "alexa_media_all_speakers", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_all_speakers integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaAllSpeakers(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_all_speakers", null, new NotifyAlexaMediaAllSpeakersParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_andrew_s_echo_buds integration.</summary>
    public void AlexaMediaAndrewSEchoBuds(NotifyAlexaMediaAndrewSEchoBudsParameters data)
    {
        _haContext.CallService("notify", "alexa_media_andrew_s_echo_buds", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_andrew_s_echo_buds integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaAndrewSEchoBuds(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_andrew_s_echo_buds", null, new NotifyAlexaMediaAndrewSEchoBudsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_andrew_s_fire_tv integration.</summary>
    public void AlexaMediaAndrewSFireTv(NotifyAlexaMediaAndrewSFireTvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_andrew_s_fire_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_andrew_s_fire_tv integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaAndrewSFireTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_andrew_s_fire_tv", null, new NotifyAlexaMediaAndrewSFireTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_andrew_s_samsung_tv_2020_u integration.</summary>
    public void AlexaMediaAndrewSSamsungTv2020U(NotifyAlexaMediaAndrewSSamsungTv2020UParameters data)
    {
        _haContext.CallService("notify", "alexa_media_andrew_s_samsung_tv_2020_u", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_andrew_s_samsung_tv_2020_u integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaAndrewSSamsungTv2020U(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_andrew_s_samsung_tv_2020_u", null, new NotifyAlexaMediaAndrewSSamsungTv2020UParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_basement integration.</summary>
    public void AlexaMediaBasement(NotifyAlexaMediaBasementParameters data)
    {
        _haContext.CallService("notify", "alexa_media_basement", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_basement integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaBasement(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_basement", null, new NotifyAlexaMediaBasementParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_bedroom_echo_show integration.</summary>
    public void AlexaMediaBedroomEchoShow(NotifyAlexaMediaBedroomEchoShowParameters data)
    {
        _haContext.CallService("notify", "alexa_media_bedroom_echo_show", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_bedroom_echo_show integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaBedroomEchoShow(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_bedroom_echo_show", null, new NotifyAlexaMediaBedroomEchoShowParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_dining_room_echo_input integration.</summary>
    public void AlexaMediaDiningRoomEchoInput(NotifyAlexaMediaDiningRoomEchoInputParameters data)
    {
        _haContext.CallService("notify", "alexa_media_dining_room_echo_input", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_dining_room_echo_input integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDiningRoomEchoInput(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_dining_room_echo_input", null, new NotifyAlexaMediaDiningRoomEchoInputParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs integration.</summary>
    public void AlexaMediaDownstairs(NotifyAlexaMediaDownstairsParameters data)
    {
        _haContext.CallService("notify", "alexa_media_downstairs", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_downstairs integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDownstairs(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_downstairs", null, new NotifyAlexaMediaDownstairsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_drawing_room_echo_dot integration.</summary>
    public void AlexaMediaDrawingRoomEchoDot(NotifyAlexaMediaDrawingRoomEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_drawing_room_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_drawing_room_echo_dot integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDrawingRoomEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_drawing_room_echo_dot", null, new NotifyAlexaMediaDrawingRoomEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_dressing_room_echo_dot integration.</summary>
    public void AlexaMediaDressingRoomEchoDot(NotifyAlexaMediaDressingRoomEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_dressing_room_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_dressing_room_echo_dot integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDressingRoomEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_dressing_room_echo_dot", null, new NotifyAlexaMediaDressingRoomEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_garden integration.</summary>
    public void AlexaMediaGarden(NotifyAlexaMediaGardenParameters data)
    {
        _haContext.CallService("notify", "alexa_media_garden", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_garden integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaGarden(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_garden", null, new NotifyAlexaMediaGardenParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_guest_room_echo_show integration.</summary>
    public void AlexaMediaGuestRoomEchoShow(NotifyAlexaMediaGuestRoomEchoShowParameters data)
    {
        _haContext.CallService("notify", "alexa_media_guest_room_echo_show", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_guest_room_echo_show integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaGuestRoomEchoShow(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_guest_room_echo_show", null, new NotifyAlexaMediaGuestRoomEchoShowParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_hall_tablet integration.</summary>
    public void AlexaMediaHallTablet(NotifyAlexaMediaHallTabletParameters data)
    {
        _haContext.CallService("notify", "alexa_media_hall_tablet", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_hall_tablet integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaHallTablet(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_hall_tablet", null, new NotifyAlexaMediaHallTabletParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen_echo_show integration.</summary>
    public void AlexaMediaKitchenEchoShow(NotifyAlexaMediaKitchenEchoShowParameters data)
    {
        _haContext.CallService("notify", "alexa_media_kitchen_echo_show", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen_echo_show integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaKitchenEchoShow(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_kitchen_echo_show", null, new NotifyAlexaMediaKitchenEchoShowParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_landing_tablet integration.</summary>
    public void AlexaMediaLandingTablet(NotifyAlexaMediaLandingTabletParameters data)
    {
        _haContext.CallService("notify", "alexa_media_landing_tablet", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_landing_tablet integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLandingTablet(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_landing_tablet", null, new NotifyAlexaMediaLandingTabletParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_lounge_echo_plus integration.</summary>
    public void AlexaMediaLoungeEchoPlus(NotifyAlexaMediaLoungeEchoPlusParameters data)
    {
        _haContext.CallService("notify", "alexa_media_lounge_echo_plus", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_lounge_echo_plus integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLoungeEchoPlus(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_lounge_echo_plus", null, new NotifyAlexaMediaLoungeEchoPlusParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_lounge_fire_tv integration.</summary>
    public void AlexaMediaLoungeFireTv(NotifyAlexaMediaLoungeFireTvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_lounge_fire_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_lounge_fire_tv integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLoungeFireTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_lounge_fire_tv", null, new NotifyAlexaMediaLoungeFireTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_offices integration.</summary>
    public void AlexaMediaOffices(NotifyAlexaMediaOfficesParameters data)
    {
        _haContext.CallService("notify", "alexa_media_offices", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_offices integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaOffices(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_offices", null, new NotifyAlexaMediaOfficesParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_patio integration.</summary>
    public void AlexaMediaPatio(NotifyAlexaMediaPatioParameters data)
    {
        _haContext.CallService("notify", "alexa_media_patio", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_patio integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaPatio(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_patio", null, new NotifyAlexaMediaPatioParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_shed_echo_input integration.</summary>
    public void AlexaMediaShedEchoInput(NotifyAlexaMediaShedEchoInputParameters data)
    {
        _haContext.CallService("notify", "alexa_media_shed_echo_input", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_shed_echo_input integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaShedEchoInput(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_shed_echo_input", null, new NotifyAlexaMediaShedEchoInputParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_snug_echo_show integration.</summary>
    public void AlexaMediaSnugEchoShow(NotifyAlexaMediaSnugEchoShowParameters data)
    {
        _haContext.CallService("notify", "alexa_media_snug_echo_show", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_snug_echo_show integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaSnugEchoShow(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_snug_echo_show", null, new NotifyAlexaMediaSnugEchoShowParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    public void AlexaMediaThisDevice(NotifyAlexaMediaThisDeviceParameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaThisDevice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, new NotifyAlexaMediaThisDeviceParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_upstairs integration.</summary>
    public void AlexaMediaUpstairs(NotifyAlexaMediaUpstairsParameters data)
    {
        _haContext.CallService("notify", "alexa_media_upstairs", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_upstairs integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaUpstairs(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_upstairs", null, new NotifyAlexaMediaUpstairsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_utility_room_echo_dot integration.</summary>
    public void AlexaMediaUtilityRoomEchoDot(NotifyAlexaMediaUtilityRoomEchoDotParameters data)
    {
        _haContext.CallService("notify", "alexa_media_utility_room_echo_dot", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_utility_room_echo_dot integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaUtilityRoomEchoDot(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_utility_room_echo_dot", null, new NotifyAlexaMediaUtilityRoomEchoDotParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_claireiphone integration.</summary>
    public void MobileAppClaireiphone(NotifyMobileAppClaireiphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_claireiphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_claireiphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppClaireiphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_claireiphone", null, new NotifyMobileAppClaireiphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_pixel_6 integration.</summary>
    public void MobileAppPixel6(NotifyMobileAppPixel6Parameters data)
    {
        _haContext.CallService("notify", "mobile_app_pixel_6", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_pixel_6 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppPixel6(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_pixel_6", null, new NotifyMobileAppPixel6Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message using the phones service.</summary>
    public void Phones(NotifyPhonesParameters data)
    {
        _haContext.CallService("notify", "phones", null, data);
    }

    ///<summary>Sends a notification message using the phones service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Phones(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "phones", null, new NotifyPhonesParameters { Message = message, Title = title, Target = target, Data = data });
    }
}

public partial record NotifyAlexaMediaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaAllSpeakersParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaAndrewSEchoBudsParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaAndrewSFireTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaAndrewSSamsungTv2020UParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaBasementParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaBedroomEchoShowParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDiningRoomEchoInputParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDownstairsParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDrawingRoomEchoDotParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDressingRoomEchoDotParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaGardenParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaGuestRoomEchoShowParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaHallTabletParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaKitchenEchoShowParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLandingTabletParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLoungeEchoPlusParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLoungeFireTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaOfficesParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaPatioParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaShedEchoInputParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaSnugEchoShowParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDeviceParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaUpstairsParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaUtilityRoomEchoDotParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppClaireiphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppPixel6Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPhonesParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class OctopusEnergyServices
{
    private readonly IHaContext _haContext;
    public OctopusEnergyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes external statistics for all meters that don&apos;t have an active tariff</summary>
    public void PurgeInvalidExternalStatisticIds()
    {
        _haContext.CallService("octopus_energy", "purge_invalid_external_statistic_ids", null);
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    ///<param name="target">The target for this service call</param>
    public void RefreshPreviousConsumptionData(ServiceTarget target, OctopusEnergyRefreshPreviousConsumptionDataParameters data)
    {
        _haContext.CallService("octopus_energy", "refresh_previous_consumption_data", target, data);
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDate">The date the data should be loaded from.</param>
    public void RefreshPreviousConsumptionData(ServiceTarget target, object startDate)
    {
        _haContext.CallService("octopus_energy", "refresh_previous_consumption_data", target, new OctopusEnergyRefreshPreviousConsumptionDataParameters { StartDate = startDate });
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateTargetConfig(ServiceTarget target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        _haContext.CallService("octopus_energy", "update_target_config", target, data);
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    public void UpdateTargetConfig(ServiceTarget target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null)
    {
        _haContext.CallService("octopus_energy", "update_target_config", target, new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset });
    }
}

public partial record OctopusEnergyRefreshPreviousConsumptionDataParameters
{
    ///<summary>The date the data should be loaded from.</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }
}

public partial record OctopusEnergyUpdateTargetConfigParameters
{
    ///<summary>The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</summary>
    [JsonPropertyName("target_hours")]
    public string? TargetHours { get; init; }

    ///<summary>The optional time the evaluation period should start. eg: 06:00</summary>
    [JsonPropertyName("target_start_time")]
    public string? TargetStartTime { get; init; }

    ///<summary>The optional time the evaluation period should end. eg: 19:00</summary>
    [JsonPropertyName("target_end_time")]
    public string? TargetEndTime { get; init; }

    ///<summary>The optional offset to apply to the target rate when it starts</summary>
    [JsonPropertyName("target_offset")]
    public string? TargetOffset { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the **Notifications** panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Applys `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters { Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Applys `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Turns the device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void AlarmTriggered()
    {
        _haContext.CallService("script", "alarm_triggered", null);
    }

    public void DoorbellAlexa()
    {
        _haContext.CallService("script", "doorbell_alexa", null);
    }

    public void EntityControllerReset()
    {
        _haContext.CallService("script", "entity_controller_reset", null);
    }

    public void FeedCats()
    {
        _haContext.CallService("script", "feed_cats", null);
    }

    public void LightEffectContinuous()
    {
        _haContext.CallService("script", "light_effect_continuous", null);
    }

    public void LightEffectTimed()
    {
        _haContext.CallService("script", "light_effect_timed", null);
    }

    ///<summary>Activates an actionable notification on a specific echo device</summary>
    public void NewScript(ScriptNewScriptParameters data)
    {
        _haContext.CallService("script", "new_script", null, data);
    }

    ///<summary>Activates an actionable notification on a specific echo device</summary>
    ///<param name="text">The text you would like alexa to speak. eg: What would you like the thermostat set to?</param>
    ///<param name="eventId">Correlation ID for event responses eg: ask_for_temperature</param>
    ///<param name="alexaDevice">Alexa device you want to trigger eg: media_player.bedroom_echo</param>
    public void NewScript(object? text = null, object? eventId = null, object? alexaDevice = null)
    {
        _haContext.CallService("script", "new_script", null, new ScriptNewScriptParameters { Text = text, EventId = eventId, AlexaDevice = alexaDevice });
    }

    public void NotifyAlexaEverywhere()
    {
        _haContext.CallService("script", "notify_alexa_everywhere", null);
    }

    public void NotifyAll()
    {
        _haContext.CallService("script", "notify_all", null);
    }

    public void NotifyPushbullet()
    {
        _haContext.CallService("script", "notify_pushbullet", null);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    public void RoomControllerReset()
    {
        _haContext.CallService("script", "room_controller_reset", null);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }
}

public partial record ScriptNewScriptParameters
{
    ///<summary>The text you would like alexa to speak. eg: What would you like the thermostat set to?</summary>
    [JsonPropertyName("text")]
    public object? Text { get; init; }

    ///<summary>Correlation ID for event responses eg: ask_for_temperature</summary>
    [JsonPropertyName("event_id")]
    public object? EventId { get; init; }

    ///<summary>Alexa device you want to trigger eg: media_player.bedroom_echo</summary>
    [JsonPropertyName("alexa_device")]
    public object? AlexaDevice { get; init; }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class ShoppingListServices
{
    private readonly IHaContext _haContext;
    public ShoppingListServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds an item to the shopping list.</summary>
    public void AddItem(ShoppingListAddItemParameters data)
    {
        _haContext.CallService("shopping_list", "add_item", null, data);
    }

    ///<summary>Adds an item to the shopping list.</summary>
    ///<param name="name">The name of the item to add. eg: Beer</param>
    public void AddItem(string name)
    {
        _haContext.CallService("shopping_list", "add_item", null, new ShoppingListAddItemParameters { Name = name });
    }

    ///<summary>Clears completed items from the shopping list.</summary>
    public void ClearCompletedItems()
    {
        _haContext.CallService("shopping_list", "clear_completed_items", null);
    }

    ///<summary>Marks all items as completed in the shopping list (without removing them from the list).</summary>
    public void CompleteAll()
    {
        _haContext.CallService("shopping_list", "complete_all", null);
    }

    ///<summary>Marks the first item with matching name as completed in the shopping list.</summary>
    public void CompleteItem(ShoppingListCompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "complete_item", null, data);
    }

    ///<summary>Marks the first item with matching name as completed in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as completed (without removing). eg: Beer</param>
    public void CompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "complete_item", null, new ShoppingListCompleteItemParameters { Name = name });
    }

    ///<summary>Marks all items as incomplete in the shopping list.</summary>
    public void IncompleteAll()
    {
        _haContext.CallService("shopping_list", "incomplete_all", null);
    }

    ///<summary>Marks the first item with matching name as incomplete in the shopping list.</summary>
    public void IncompleteItem(ShoppingListIncompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, data);
    }

    ///<summary>Marks the first item with matching name as incomplete in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as incomplete. eg: Beer</param>
    public void IncompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, new ShoppingListIncompleteItemParameters { Name = name });
    }

    ///<summary>Removes the first item with matching name from the shopping list.</summary>
    public void RemoveItem(ShoppingListRemoveItemParameters data)
    {
        _haContext.CallService("shopping_list", "remove_item", null, data);
    }

    ///<summary>Removes the first item with matching name from the shopping list.</summary>
    ///<param name="name">The name of the item to remove. eg: Beer</param>
    public void RemoveItem(string name)
    {
        _haContext.CallService("shopping_list", "remove_item", null, new ShoppingListRemoveItemParameters { Name = name });
    }

    ///<summary>Sorts all items by name in the shopping list.</summary>
    public void Sort(ShoppingListSortParameters data)
    {
        _haContext.CallService("shopping_list", "sort", null, data);
    }

    ///<summary>Sorts all items by name in the shopping list.</summary>
    ///<param name="reverse">Whether to sort in reverse (descending) order.</param>
    public void Sort(bool? reverse = null)
    {
        _haContext.CallService("shopping_list", "sort", null, new ShoppingListSortParameters { Reverse = reverse });
    }
}

public partial record ShoppingListAddItemParameters
{
    ///<summary>The name of the item to add. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListCompleteItemParameters
{
    ///<summary>The name of the item to mark as completed (without removing). eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListIncompleteItemParameters
{
    ///<summary>The name of the item to mark as incomplete. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListRemoveItemParameters
{
    ///<summary>The name of the item to remove. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListSortParameters
{
    ///<summary>Whether to sort in reverse (descending) order.</summary>
    [JsonPropertyName("reverse")]
    public bool? Reverse { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SpotcastServices
{
    private readonly IHaContext _haContext;
    public SpotcastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Starts spotify playback on chromecast devices</summary>
    public void Start(SpotcastStartParameters data)
    {
        _haContext.CallService("spotcast", "start", null, data);
    }

    ///<summary>Starts spotify playback on chromecast devices</summary>
    ///<param name="deviceName">The friendly name of the chromecast or spotify connect device. First checks spotify device list for name (not used together with entity_id and spotify_device_id). eg: Livingroom</param>
    ///<param name="spotifyDeviceId">Advanced users only. The spotify device id (not used together with entity_id or device_name). eg: 4363634563457346xcyvydgf3qwa</param>
    ///<param name="entityId">The entity_id of the chromecast mediaplayer. Friendly name MUST match the spotify connect device name (not used together with device_name and spotify_device_id). eg: media_player.vardagsrum</param>
    ///<param name="uri">Supported Spotify URI as string. None or empty uri will transfer the current/last playback (see parameter force_playback). eg: spotify:playlist:37i9dQZF1DX3yvAYDslnv8</param>
    ///<param name="category">A category to fetch playlist from. See https://developer.spotify.com/console/get-browse-categories/ for a list of categories</param>
    ///<param name="country">Country code to use with category. See https://spotipy.readthedocs.io/en/2.19.0/#spotipy.client.Spotify.country_codes for list of available codes</param>
    ///<param name="limit">Limit of playlist to fetch in a given category. Default 20</param>
    ///<param name="search">A Search request to the spotify API. Will play the most relevant search result.</param>
    ///<param name="account">Optionally starts Spotify using an alternative account specified in config. eg: my_wifes</param>
    ///<param name="forcePlayback">In case of transfering playback: If true starts playing the user&apos;s last playback even if nothing is currently playing. eg: True</param>
    ///<param name="randomSong">Starts the playback at a random position in the playlist or album. eg: True</param>
    ///<param name="repeat">Set repeat mode for playback. eg: track</param>
    ///<param name="shuffle">Set shuffle mode for playback. eg: True</param>
    ///<param name="offset">Set offset mode for playback. 0 is the first song. eg: 1</param>
    ///<param name="startVolume">Set the volume for playback in percentage. eg: 50</param>
    ///<param name="ignoreFullyPlayed">Set to ignore or not already played episodes in a podcast playlist eg: True</param>
    public void Start(string? deviceName = null, string? spotifyDeviceId = null, string? entityId = null, string? uri = null, string? category = null, string? country = null, long? limit = null, string? search = null, string? account = null, bool? forcePlayback = null, bool? randomSong = null, object? repeat = null, bool? shuffle = null, long? offset = null, long? startVolume = null, bool? ignoreFullyPlayed = null)
    {
        _haContext.CallService("spotcast", "start", null, new SpotcastStartParameters { DeviceName = deviceName, SpotifyDeviceId = spotifyDeviceId, EntityId = entityId, Uri = uri, Category = category, Country = country, Limit = limit, Search = search, Account = account, ForcePlayback = forcePlayback, RandomSong = randomSong, Repeat = repeat, Shuffle = shuffle, Offset = offset, StartVolume = startVolume, IgnoreFullyPlayed = ignoreFullyPlayed });
    }
}

public partial record SpotcastStartParameters
{
    ///<summary>The friendly name of the chromecast or spotify connect device. First checks spotify device list for name (not used together with entity_id and spotify_device_id). eg: Livingroom</summary>
    [JsonPropertyName("device_name")]
    public string? DeviceName { get; init; }

    ///<summary>Advanced users only. The spotify device id (not used together with entity_id or device_name). eg: 4363634563457346xcyvydgf3qwa</summary>
    [JsonPropertyName("spotify_device_id")]
    public string? SpotifyDeviceId { get; init; }

    ///<summary>The entity_id of the chromecast mediaplayer. Friendly name MUST match the spotify connect device name (not used together with device_name and spotify_device_id). eg: media_player.vardagsrum</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Supported Spotify URI as string. None or empty uri will transfer the current/last playback (see parameter force_playback). eg: spotify:playlist:37i9dQZF1DX3yvAYDslnv8</summary>
    [JsonPropertyName("uri")]
    public string? Uri { get; init; }

    ///<summary>A category to fetch playlist from. See https://developer.spotify.com/console/get-browse-categories/ for a list of categories</summary>
    [JsonPropertyName("category")]
    public string? Category { get; init; }

    ///<summary>Country code to use with category. See https://spotipy.readthedocs.io/en/2.19.0/#spotipy.client.Spotify.country_codes for list of available codes</summary>
    [JsonPropertyName("country")]
    public string? Country { get; init; }

    ///<summary>Limit of playlist to fetch in a given category. Default 20</summary>
    [JsonPropertyName("limit")]
    public long? Limit { get; init; }

    ///<summary>A Search request to the spotify API. Will play the most relevant search result.</summary>
    [JsonPropertyName("search")]
    public string? Search { get; init; }

    ///<summary>Optionally starts Spotify using an alternative account specified in config. eg: my_wifes</summary>
    [JsonPropertyName("account")]
    public string? Account { get; init; }

    ///<summary>In case of transfering playback: If true starts playing the user&apos;s last playback even if nothing is currently playing. eg: True</summary>
    [JsonPropertyName("force_playback")]
    public bool? ForcePlayback { get; init; }

    ///<summary>Starts the playback at a random position in the playlist or album. eg: True</summary>
    [JsonPropertyName("random_song")]
    public bool? RandomSong { get; init; }

    ///<summary>Set repeat mode for playback. eg: track</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }

    ///<summary>Set shuffle mode for playback. eg: True</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    ///<summary>Set offset mode for playback. 0 is the first song. eg: 1</summary>
    [JsonPropertyName("offset")]
    public long? Offset { get; init; }

    ///<summary>Set the volume for playback in percentage. eg: 50</summary>
    [JsonPropertyName("start_volume")]
    public long? StartVolume { get; init; }

    ///<summary>Set to ignore or not already played episodes in a podcast playlist eg: True</summary>
    [JsonPropertyName("ignore_fully_played")]
    public bool? IgnoreFullyPlayed { get; init; }
}

public partial class SqueezeboxServices
{
    private readonly IHaContext _haContext;
    public SqueezeboxServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API.</summary>
    ///<param name="target">The target for this service call</param>
    public void CallMethod(ServiceTarget target, SqueezeboxCallMethodParameters data)
    {
        _haContext.CallService("squeezebox", "call_method", target, data);
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to pass to Logitech Media Server (p0 in the CLI documentation). eg: playlist</param>
    ///<param name="parameters">Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation). . eg: [&quot;loadtracks&quot;, &quot;album.titlesearch=Revolver&quot;]</param>
    public void CallMethod(ServiceTarget target, string command, object? parameters = null)
    {
        _haContext.CallService("squeezebox", "call_method", target, new SqueezeboxCallMethodParameters { Command = command, Parameters = parameters });
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API. Result will be stored in &apos;query_result&apos; attribute of the Squeezebox entity. .</summary>
    ///<param name="target">The target for this service call</param>
    public void CallQuery(ServiceTarget target, SqueezeboxCallQueryParameters data)
    {
        _haContext.CallService("squeezebox", "call_query", target, data);
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API. Result will be stored in &apos;query_result&apos; attribute of the Squeezebox entity. .</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to pass to Logitech Media Server (p0 in the CLI documentation). eg: albums</param>
    ///<param name="parameters">Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation). . eg: [&quot;0&quot;, &quot;20&quot;, &quot;search:Revolver&quot;]</param>
    public void CallQuery(ServiceTarget target, string command, object? parameters = null)
    {
        _haContext.CallService("squeezebox", "call_query", target, new SqueezeboxCallQueryParameters { Command = command, Parameters = parameters });
    }

    ///<summary>Adds another player to this player&apos;s sync group. If the other player is already in a sync group, it will leave it. .</summary>
    ///<param name="target">The target for this service call</param>
    public void Sync(ServiceTarget target, SqueezeboxSyncParameters data)
    {
        _haContext.CallService("squeezebox", "sync", target, data);
    }

    ///<summary>Adds another player to this player&apos;s sync group. If the other player is already in a sync group, it will leave it. .</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="otherPlayer">Name of the other Squeezebox player to link. eg: media_player.living_room</param>
    public void Sync(ServiceTarget target, string otherPlayer)
    {
        _haContext.CallService("squeezebox", "sync", target, new SqueezeboxSyncParameters { OtherPlayer = otherPlayer });
    }

    ///<summary>Removes this player from its sync group.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unsync(ServiceTarget target)
    {
        _haContext.CallService("squeezebox", "unsync", target);
    }
}

public partial record SqueezeboxCallMethodParameters
{
    ///<summary>Command to pass to Logitech Media Server (p0 in the CLI documentation). eg: playlist</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation). . eg: [&quot;loadtracks&quot;, &quot;album.titlesearch=Revolver&quot;]</summary>
    [JsonPropertyName("parameters")]
    public object? Parameters { get; init; }
}

public partial record SqueezeboxCallQueryParameters
{
    ///<summary>Command to pass to Logitech Media Server (p0 in the CLI documentation). eg: albums</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation). . eg: [&quot;0&quot;, &quot;20&quot;, &quot;search:Revolver&quot;]</summary>
    [JsonPropertyName("parameters")]
    public object? Parameters { get; init; }
}

public partial record SqueezeboxSyncParameters
{
    ///<summary>Name of the other Squeezebox player to link. eg: media_player.living_room</summary>
    [JsonPropertyName("other_player")]
    public string? OtherPlayer { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimeServices
{
    private readonly IHaContext _haContext;
    public TimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TimeSetValueParameters data)
    {
        _haContext.CallService("time", "set_value", target, data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public void SetValue(ServiceTarget target, DateTime time)
    {
        _haContext.CallService("time", "set_value", target, new TimeSetValueParameters { Time = time });
    }
}

public partial record TimeSetValueParameters
{
    ///<summary>The time to set. eg: 22:15</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TodoServices
{
    private readonly IHaContext _haContext;
    public TodoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    public void AddItem(ServiceTarget target, TodoAddItemParameters data)
    {
        _haContext.CallService("todo", "add_item", target, data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    public void AddItem(ServiceTarget target, string item)
    {
        _haContext.CallService("todo", "add_item", target, new TodoAddItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveItem(ServiceTarget target, TodoRemoveItemParameters data)
    {
        _haContext.CallService("todo", "remove_item", target, data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name for the to-do list items.</param>
    public void RemoveItem(ServiceTarget target, string item)
    {
        _haContext.CallService("todo", "remove_item", target, new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateItem(ServiceTarget target, TodoUpdateItemParameters data)
    {
        _haContext.CallService("todo", "update_item", target, data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    public void UpdateItem(ServiceTarget target, string item, string? rename = null, object? status = null)
    {
        _haContext.CallService("todo", "update_item", target, new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status });
    }
}

public partial record TodoAddItemParameters
{
    ///<summary>The name that represents the to-do item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }
}

public partial record TodoRemoveItemParameters
{
    ///<summary>The name for the to-do list items.</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }
}

public partial record TodoUpdateItemParameters
{
    ///<summary>The name for the to-do list item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The new name of the to-do item eg: Something else</summary>
    [JsonPropertyName("rename")]
    public string? Rename { get; init; }

    ///<summary>A status or confirmation of the to-do item. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UnifiServices
{
    private readonly IHaContext _haContext;
    public UnifiServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tries to get wireless client to reconnect to UniFi Network.</summary>
    public void ReconnectClient(UnifiReconnectClientParameters data)
    {
        _haContext.CallService("unifi", "reconnect_client", null, data);
    }

    ///<summary>Tries to get wireless client to reconnect to UniFi Network.</summary>
    ///<param name="deviceId">Try reconnect client to wireless network.</param>
    public void ReconnectClient(string deviceId)
    {
        _haContext.CallService("unifi", "reconnect_client", null, new UnifiReconnectClientParameters { DeviceId = deviceId });
    }

    ///<summary>Cleans up clients that has only been associated with the controller for a short period of time.</summary>
    public void RemoveClients()
    {
        _haContext.CallService("unifi", "remove_clients", null);
    }
}

public partial record UnifiReconnectClientParameters
{
    ///<summary>Try reconnect client to wireless network.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial class UnifiprotectServices
{
    private readonly IHaContext _haContext;
    public UnifiprotectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new custom message for doorbells.</summary>
    public void AddDoorbellText(UnifiprotectAddDoorbellTextParameters data)
    {
        _haContext.CallService("unifiprotect", "add_doorbell_text", null, data);
    }

    ///<summary>Adds a new custom message for doorbells.</summary>
    ///<param name="deviceId">Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</param>
    ///<param name="message">New custom message to add for doorbells. Must be less than 30 characters. eg: Come In</param>
    public void AddDoorbellText(string deviceId, string message)
    {
        _haContext.CallService("unifiprotect", "add_doorbell_text", null, new UnifiprotectAddDoorbellTextParameters { DeviceId = deviceId, Message = message });
    }

    ///<summary>Removes an existing message for doorbells.</summary>
    public void RemoveDoorbellText(UnifiprotectRemoveDoorbellTextParameters data)
    {
        _haContext.CallService("unifiprotect", "remove_doorbell_text", null, data);
    }

    ///<summary>Removes an existing message for doorbells.</summary>
    ///<param name="deviceId">Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</param>
    ///<param name="message">Existing custom message to remove for doorbells. eg: Go Away!</param>
    public void RemoveDoorbellText(string deviceId, string message)
    {
        _haContext.CallService("unifiprotect", "remove_doorbell_text", null, new UnifiprotectRemoveDoorbellTextParameters { DeviceId = deviceId, Message = message });
    }

    ///<summary>Use to set the paired doorbell(s) with a smart chime.</summary>
    public void SetChimePairedDoorbells(UnifiprotectSetChimePairedDoorbellsParameters data)
    {
        _haContext.CallService("unifiprotect", "set_chime_paired_doorbells", null, data);
    }

    ///<summary>Use to set the paired doorbell(s) with a smart chime.</summary>
    ///<param name="deviceId">The chimes to link to the doorbells to.</param>
    ///<param name="doorbells">The doorbells to link to the chime. eg: binary_sensor.front_doorbell_doorbell</param>
    public void SetChimePairedDoorbells(string deviceId, object? doorbells = null)
    {
        _haContext.CallService("unifiprotect", "set_chime_paired_doorbells", null, new UnifiprotectSetChimePairedDoorbellsParameters { DeviceId = deviceId, Doorbells = doorbells });
    }

    ///<summary>Sets the default doorbell message. This will be the message that is automatically selected when a message &quot;expires&quot;.</summary>
    public void SetDefaultDoorbellText(UnifiprotectSetDefaultDoorbellTextParameters data)
    {
        _haContext.CallService("unifiprotect", "set_default_doorbell_text", null, data);
    }

    ///<summary>Sets the default doorbell message. This will be the message that is automatically selected when a message &quot;expires&quot;.</summary>
    ///<param name="deviceId">Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</param>
    ///<param name="message">The default message for your doorbell. Must be less than 30 characters. eg: Welcome!</param>
    public void SetDefaultDoorbellText(string deviceId, string message)
    {
        _haContext.CallService("unifiprotect", "set_default_doorbell_text", null, new UnifiprotectSetDefaultDoorbellTextParameters { DeviceId = deviceId, Message = message });
    }
}

public partial record UnifiprotectAddDoorbellTextParameters
{
    ///<summary>Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>New custom message to add for doorbells. Must be less than 30 characters. eg: Come In</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record UnifiprotectRemoveDoorbellTextParameters
{
    ///<summary>Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Existing custom message to remove for doorbells. eg: Go Away!</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record UnifiprotectSetChimePairedDoorbellsParameters
{
    ///<summary>The chimes to link to the doorbells to.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>The doorbells to link to the chime. eg: binary_sensor.front_doorbell_doorbell</summary>
    [JsonPropertyName("doorbells")]
    public object? Doorbells { get; init; }
}

public partial record UnifiprotectSetDefaultDoorbellTextParameters
{
    ///<summary>Any device from the UniFi Protect instance you want to change. In case you have multiple Protect Instances.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>The default message for your doorbell. Must be less than 30 characters. eg: Welcome!</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartPause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start_pause", target);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }

    public void Toggle()
    {
        _haContext.CallService("vacuum", "toggle", null);
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_off", target);
    }

    ///<summary>Starts a new cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_on", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WasteCollectionScheduleServices
{
    private readonly IHaContext _haContext;
    public WasteCollectionScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Fetch data from all sources.</summary>
    public void FetchData()
    {
        _haContext.CallService("waste_collection_schedule", "fetch_data", null);
    }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_off", target);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_on", target);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecast(ServiceTarget target, WeatherGetForecastParameters data)
    {
        _haContext.CallService("weather", "get_forecast", target, data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecast(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecast", target, new WeatherGetForecastParameters { Type = @type });
    }
}

public partial record WeatherGetForecastParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class YeelightServices
{
    private readonly IHaContext _haContext;
    public YeelightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, Set a color scene, if light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAutoDelayOffScene(ServiceTarget target, YeelightSetAutoDelayOffSceneParameters data)
    {
        _haContext.CallService("yeelight", "set_auto_delay_off_scene", target, data);
    }

    ///<summary>Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, Set a color scene, if light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="minutes">The time to wait before automatically turning the light off.</param>
    ///<param name="brightness">The brightness value to set.</param>
    public void SetAutoDelayOffScene(ServiceTarget target, long? minutes = null, long? brightness = null)
    {
        _haContext.CallService("yeelight", "set_auto_delay_off_scene", target, new YeelightSetAutoDelayOffSceneParameters { Minutes = minutes, Brightness = brightness });
    }

    ///<summary>Starts a color flow. If the light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetColorFlowScene(ServiceTarget target, YeelightSetColorFlowSceneParameters data)
    {
        _haContext.CallService("yeelight", "set_color_flow_scene", target, data);
    }

    ///<summary>Starts a color flow. If the light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="count">The number of times to run this flow (0 to run forever).</param>
    ///<param name="action">The action to take after the flow stops.</param>
    ///<param name="transitions">Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html. eg: [{ &quot;TemperatureTransition&quot;: [1900, 1000, 80] }, { &quot;TemperatureTransition&quot;: [1900, 1000, 10] }]</param>
    public void SetColorFlowScene(ServiceTarget target, long? count = null, object? action = null, object? transitions = null)
    {
        _haContext.CallService("yeelight", "set_color_flow_scene", target, new YeelightSetColorFlowSceneParameters { Count = count, Action = action, Transitions = transitions });
    }

    ///<summary>Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetColorScene(ServiceTarget target, YeelightSetColorSceneParameters data)
    {
        _haContext.CallService("yeelight", "set_color_scene", target, data);
    }

    ///<summary>Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="brightness">The brightness value to set.</param>
    public void SetColorScene(ServiceTarget target, object? rgbColor = null, long? brightness = null)
    {
        _haContext.CallService("yeelight", "set_color_scene", target, new YeelightSetColorSceneParameters { RgbColor = rgbColor, Brightness = brightness });
    }

    ///<summary>Changes the light to the specified color temperature. If the light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetColorTempScene(ServiceTarget target, YeelightSetColorTempSceneParameters data)
    {
        _haContext.CallService("yeelight", "set_color_temp_scene", target, data);
    }

    ///<summary>Changes the light to the specified color temperature. If the light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">The brightness value to set.</param>
    public void SetColorTempScene(ServiceTarget target, long? kelvin = null, long? brightness = null)
    {
        _haContext.CallService("yeelight", "set_color_temp_scene", target, new YeelightSetColorTempSceneParameters { Kelvin = kelvin, Brightness = brightness });
    }

    ///<summary>Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHsvScene(ServiceTarget target, YeelightSetHsvSceneParameters data)
    {
        _haContext.CallService("yeelight", "set_hsv_scene", target, data);
    }

    ///<summary>Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-359 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="brightness">The brightness value to set.</param>
    public void SetHsvScene(ServiceTarget target, object? hsColor = null, long? brightness = null)
    {
        _haContext.CallService("yeelight", "set_hsv_scene", target, new YeelightSetHsvSceneParameters { HsColor = hsColor, Brightness = brightness });
    }

    ///<summary>Sets a operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, YeelightSetModeParameters data)
    {
        _haContext.CallService("yeelight", "set_mode", target, data);
    }

    ///<summary>Sets a operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">Operation mode.</param>
    public void SetMode(ServiceTarget target, object mode)
    {
        _haContext.CallService("yeelight", "set_mode", target, new YeelightSetModeParameters { Mode = mode });
    }

    ///<summary>Enables or disables music_mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMusicMode(ServiceTarget target, YeelightSetMusicModeParameters data)
    {
        _haContext.CallService("yeelight", "set_music_mode", target, data);
    }

    ///<summary>Enables or disables music_mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="musicMode">Use true or false to enable / disable music_mode.</param>
    public void SetMusicMode(ServiceTarget target, bool musicMode)
    {
        _haContext.CallService("yeelight", "set_music_mode", target, new YeelightSetMusicModeParameters { MusicMode = musicMode });
    }

    ///<summary>Start a custom flow, using transitions from https://yeelight.readthedocs.io/en/stable/yeelight.html#flow-objects.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartFlow(ServiceTarget target, YeelightStartFlowParameters data)
    {
        _haContext.CallService("yeelight", "start_flow", target, data);
    }

    ///<summary>Start a custom flow, using transitions from https://yeelight.readthedocs.io/en/stable/yeelight.html#flow-objects.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="count">The number of times to run this flow (0 to run forever).</param>
    ///<param name="action">The action to take after the flow stops.</param>
    ///<param name="transitions">Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html. eg: [{ &quot;TemperatureTransition&quot;: [1900, 1000, 80] }, { &quot;TemperatureTransition&quot;: [1900, 1000, 10] }]</param>
    public void StartFlow(ServiceTarget target, long? count = null, object? action = null, object? transitions = null)
    {
        _haContext.CallService("yeelight", "start_flow", target, new YeelightStartFlowParameters { Count = count, Action = action, Transitions = transitions });
    }
}

public partial record YeelightSetAutoDelayOffSceneParameters
{
    ///<summary>The time to wait before automatically turning the light off.</summary>
    [JsonPropertyName("minutes")]
    public long? Minutes { get; init; }

    ///<summary>The brightness value to set.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record YeelightSetColorFlowSceneParameters
{
    ///<summary>The number of times to run this flow (0 to run forever).</summary>
    [JsonPropertyName("count")]
    public long? Count { get; init; }

    ///<summary>The action to take after the flow stops.</summary>
    [JsonPropertyName("action")]
    public object? Action { get; init; }

    ///<summary>Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html. eg: [{ &quot;TemperatureTransition&quot;: [1900, 1000, 80] }, { &quot;TemperatureTransition&quot;: [1900, 1000, 10] }]</summary>
    [JsonPropertyName("transitions")]
    public object? Transitions { get; init; }
}

public partial record YeelightSetColorSceneParameters
{
    ///<summary>Color for the light in RGB-format. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The brightness value to set.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record YeelightSetColorTempSceneParameters
{
    ///<summary>Color temperature for the light in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>The brightness value to set.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record YeelightSetHsvSceneParameters
{
    ///<summary>Color for the light in hue/sat format. Hue is 0-359 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>The brightness value to set.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }
}

public partial record YeelightSetModeParameters
{
    ///<summary>Operation mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial record YeelightSetMusicModeParameters
{
    ///<summary>Use true or false to enable / disable music_mode.</summary>
    [JsonPropertyName("music_mode")]
    public bool? MusicMode { get; init; }
}

public partial record YeelightStartFlowParameters
{
    ///<summary>The number of times to run this flow (0 to run forever).</summary>
    [JsonPropertyName("count")]
    public long? Count { get; init; }

    ///<summary>The action to take after the flow stops.</summary>
    [JsonPropertyName("action")]
    public object? Action { get; init; }

    ///<summary>Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html. eg: [{ &quot;TemperatureTransition&quot;: [1900, 1000, 80] }, { &quot;TemperatureTransition&quot;: [1900, 1000, 10] }]</summary>
    [JsonPropertyName("transitions")]
    public object? Transitions { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this ICalendarEntityCore target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class FanEntityExtensionMethods
{
    ///<summary>Decreases the speed of the fan.</summary>
    public static void DecreaseSpeed(this FanEntity target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public static void DecreaseSpeed(this FanEntity target, long? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, long? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    public static void IncreaseSpeed(this FanEntity target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public static void IncreaseSpeed(this FanEntity target, long? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, long? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    public static void Oscillate(this FanEntity target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    public static void Oscillate(this IEnumerable<FanEntity> target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public static void Oscillate(this FanEntity target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public static void Oscillate(this IEnumerable<FanEntity> target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    public static void SetDirection(this FanEntity target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    public static void SetDirection(this IEnumerable<FanEntity> target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="direction">Direction to rotate.</param>
    public static void SetDirection(this FanEntity target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="direction">Direction to rotate.</param>
    public static void SetDirection(this IEnumerable<FanEntity> target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    public static void SetPercentage(this FanEntity target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Sets the fan speed.</summary>
    public static void SetPercentage(this IEnumerable<FanEntity> target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    public static void SetPercentage(this FanEntity target, long percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    public static void SetPercentage(this IEnumerable<FanEntity> target, long percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this FanEntity target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public static void SetPresetMode(this FanEntity target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    public static void Toggle(this FanEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the fan on/off.</summary>
    public static void Toggle(this IEnumerable<FanEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns fan off.</summary>
    public static void TurnOff(this FanEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns fan off.</summary>
    public static void TurnOff(this IEnumerable<FanEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns fan on.</summary>
    public static void TurnOn(this FanEntity target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns fan on.</summary>
    public static void TurnOn(this IEnumerable<FanEntity> target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public static void TurnOn(this FanEntity target, long? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public static void TurnOn(this IEnumerable<FanEntity> target, long? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public static class GoogleEntityExtensionMethods
{
    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, GoogleCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, GoogleCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IInputButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IEnumerable<IInputButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IInputDatetimeEntityCore target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IInputDatetimeEntityCore to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IInputDatetimeEntityCore target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;IInputDatetimeEntityCore&gt; to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IInputNumberEntityCore target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increments the value by 1 step.</summary>
    public static void Increment(this IInputNumberEntityCore target)
    {
        target.CallService("increment");
    }

    ///<summary>Increments the value by 1 step.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("increment");
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IInputSelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IInputSelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IInputSelectEntityCore target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IInputSelectEntityCore target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IInputSelectEntityCore target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IInputSelectEntityCore target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IInputSelectEntityCore target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IInputSelectEntityCore target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_up");
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class OctopusEnergyEntityExtensionMethods
{
    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    public static void RefreshPreviousConsumptionData(this ISensorEntityCore target, OctopusEnergyRefreshPreviousConsumptionDataParameters data)
    {
        target.CallService("refresh_previous_consumption_data", data);
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    public static void RefreshPreviousConsumptionData(this IEnumerable<ISensorEntityCore> target, OctopusEnergyRefreshPreviousConsumptionDataParameters data)
    {
        target.CallService("refresh_previous_consumption_data", data);
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="startDate">The date the data should be loaded from.</param>
    public static void RefreshPreviousConsumptionData(this ISensorEntityCore target, object startDate)
    {
        target.CallService("refresh_previous_consumption_data", new OctopusEnergyRefreshPreviousConsumptionDataParameters { StartDate = startDate });
    }

    ///<summary>Refreshes the previous consumption data for a given entity from a given date.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="startDate">The date the data should be loaded from.</param>
    public static void RefreshPreviousConsumptionData(this IEnumerable<ISensorEntityCore> target, object startDate)
    {
        target.CallService("refresh_previous_consumption_data", new OctopusEnergyRefreshPreviousConsumptionDataParameters { StartDate = startDate });
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    public static void UpdateTargetConfig(this IBinarySensorEntityCore target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        target.CallService("update_target_config", data);
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    public static void UpdateTargetConfig(this IEnumerable<IBinarySensorEntityCore> target, OctopusEnergyUpdateTargetConfigParameters data)
    {
        target.CallService("update_target_config", data);
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    ///<param name="target">The IBinarySensorEntityCore to call this service for</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    public static void UpdateTargetConfig(this IBinarySensorEntityCore target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null)
    {
        target.CallService("update_target_config", new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset });
    }

    ///<summary>Updates a given target rate&apos;s config. Please note this is temporary and will not persist between restarts.</summary>
    ///<param name="target">The IEnumerable&lt;IBinarySensorEntityCore&gt; to call this service for</param>
    ///<param name="targetHours">The optional number of hours the target rate sensor should come on during a 24 hour period. eg: 1.5</param>
    ///<param name="targetStartTime">The optional time the evaluation period should start. eg: 06:00</param>
    ///<param name="targetEndTime">The optional time the evaluation period should end. eg: 19:00</param>
    ///<param name="targetOffset">The optional offset to apply to the target rate when it starts</param>
    public static void UpdateTargetConfig(this IEnumerable<IBinarySensorEntityCore> target, string? targetHours = null, string? targetStartTime = null, string? targetEndTime = null, string? targetOffset = null)
    {
        target.CallService("update_target_config", new OctopusEnergyUpdateTargetConfigParameters { TargetHours = targetHours, TargetStartTime = targetStartTime, TargetEndTime = targetEndTime, TargetOffset = targetOffset });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IRemoteEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IRemoteEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, long? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SqueezeboxEntityExtensionMethods
{
    ///<summary>Calls a custom Squeezebox JSONRPC API.</summary>
    public static void CallMethod(this IMediaPlayerEntityCore target, SqueezeboxCallMethodParameters data)
    {
        target.CallService("call_method", data);
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API.</summary>
    public static void CallMethod(this IEnumerable<IMediaPlayerEntityCore> target, SqueezeboxCallMethodParameters data)
    {
        target.CallService("call_method", data);
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="command">Command to pass to Logitech Media Server (p0 in the CLI documentation). eg: playlist</param>
    ///<param name="parameters">Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation). . eg: [&quot;loadtracks&quot;, &quot;album.titlesearch=Revolver&quot;]</param>
    public static void CallMethod(this IMediaPlayerEntityCore target, string command, object? parameters = null)
    {
        target.CallService("call_method", new SqueezeboxCallMethodParameters { Command = command, Parameters = parameters });
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="command">Command to pass to Logitech Media Server (p0 in the CLI documentation). eg: playlist</param>
    ///<param name="parameters">Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation). . eg: [&quot;loadtracks&quot;, &quot;album.titlesearch=Revolver&quot;]</param>
    public static void CallMethod(this IEnumerable<IMediaPlayerEntityCore> target, string command, object? parameters = null)
    {
        target.CallService("call_method", new SqueezeboxCallMethodParameters { Command = command, Parameters = parameters });
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API. Result will be stored in &apos;query_result&apos; attribute of the Squeezebox entity. .</summary>
    public static void CallQuery(this IMediaPlayerEntityCore target, SqueezeboxCallQueryParameters data)
    {
        target.CallService("call_query", data);
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API. Result will be stored in &apos;query_result&apos; attribute of the Squeezebox entity. .</summary>
    public static void CallQuery(this IEnumerable<IMediaPlayerEntityCore> target, SqueezeboxCallQueryParameters data)
    {
        target.CallService("call_query", data);
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API. Result will be stored in &apos;query_result&apos; attribute of the Squeezebox entity. .</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="command">Command to pass to Logitech Media Server (p0 in the CLI documentation). eg: albums</param>
    ///<param name="parameters">Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation). . eg: [&quot;0&quot;, &quot;20&quot;, &quot;search:Revolver&quot;]</param>
    public static void CallQuery(this IMediaPlayerEntityCore target, string command, object? parameters = null)
    {
        target.CallService("call_query", new SqueezeboxCallQueryParameters { Command = command, Parameters = parameters });
    }

    ///<summary>Calls a custom Squeezebox JSONRPC API. Result will be stored in &apos;query_result&apos; attribute of the Squeezebox entity. .</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="command">Command to pass to Logitech Media Server (p0 in the CLI documentation). eg: albums</param>
    ///<param name="parameters">Array of additional parameters to pass to Logitech Media Server (p1, ..., pN in the CLI documentation). . eg: [&quot;0&quot;, &quot;20&quot;, &quot;search:Revolver&quot;]</param>
    public static void CallQuery(this IEnumerable<IMediaPlayerEntityCore> target, string command, object? parameters = null)
    {
        target.CallService("call_query", new SqueezeboxCallQueryParameters { Command = command, Parameters = parameters });
    }

    ///<summary>Adds another player to this player&apos;s sync group. If the other player is already in a sync group, it will leave it. .</summary>
    public static void Sync(this IMediaPlayerEntityCore target, SqueezeboxSyncParameters data)
    {
        target.CallService("sync", data);
    }

    ///<summary>Adds another player to this player&apos;s sync group. If the other player is already in a sync group, it will leave it. .</summary>
    public static void Sync(this IEnumerable<IMediaPlayerEntityCore> target, SqueezeboxSyncParameters data)
    {
        target.CallService("sync", data);
    }

    ///<summary>Adds another player to this player&apos;s sync group. If the other player is already in a sync group, it will leave it. .</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="otherPlayer">Name of the other Squeezebox player to link. eg: media_player.living_room</param>
    public static void Sync(this IMediaPlayerEntityCore target, string otherPlayer)
    {
        target.CallService("sync", new SqueezeboxSyncParameters { OtherPlayer = otherPlayer });
    }

    ///<summary>Adds another player to this player&apos;s sync group. If the other player is already in a sync group, it will leave it. .</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="otherPlayer">Name of the other Squeezebox player to link. eg: media_player.living_room</param>
    public static void Sync(this IEnumerable<IMediaPlayerEntityCore> target, string otherPlayer)
    {
        target.CallService("sync", new SqueezeboxSyncParameters { OtherPlayer = otherPlayer });
    }

    ///<summary>Removes this player from its sync group.</summary>
    public static void Unsync(this IMediaPlayerEntityCore target)
    {
        target.CallService("unsync");
    }

    ///<summary>Removes this player from its sync group.</summary>
    public static void Unsync(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("unsync");
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class TextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this TextEntity target, TextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<TextEntity> target, TextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The TextEntity to call this service for</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public static void SetValue(this TextEntity target, string value)
    {
        target.CallService("set_value", new TextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;TextEntity&gt; to call this service for</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public static void SetValue(this IEnumerable<TextEntity> target, string value)
    {
        target.CallService("set_value", new TextSetValueParameters { Value = value });
    }
}

public static class TimerEntityExtensionMethods
{
    ///<summary>Cancels a timer.</summary>
    public static void Cancel(this ITimerEntityCore target)
    {
        target.CallService("cancel");
    }

    ///<summary>Cancels a timer.</summary>
    public static void Cancel(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("cancel");
    }

    ///<summary>Changes a timer.</summary>
    public static void Change(this ITimerEntityCore target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer.</summary>
    public static void Change(this IEnumerable<ITimerEntityCore> target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this ITimerEntityCore target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this IEnumerable<ITimerEntityCore> target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    public static void Finish(this ITimerEntityCore target)
    {
        target.CallService("finish");
    }

    ///<summary>Finishes a timer.</summary>
    public static void Finish(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("finish");
    }

    ///<summary>Pauses a timer.</summary>
    public static void Pause(this ITimerEntityCore target)
    {
        target.CallService("pause");
    }

    ///<summary>Pauses a timer.</summary>
    public static void Pause(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("pause");
    }

    ///<summary>Starts a timer.</summary>
    public static void Start(this ITimerEntityCore target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer.</summary>
    public static void Start(this IEnumerable<ITimerEntityCore> target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public static void Start(this ITimerEntityCore target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public static void Start(this IEnumerable<ITimerEntityCore> target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }
}

public static class TodoEntityExtensionMethods
{
    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this TodoEntity target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this IEnumerable<TodoEntity> target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    public static void AddItem(this TodoEntity target, string item)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item });
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    public static void AddItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this TodoEntity target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list items.</param>
    public static void RemoveItem(this TodoEntity target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list items.</param>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this TodoEntity target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    public static void UpdateItem(this TodoEntity target, string item, string? rename = null, object? status = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, string item, string? rename = null, object? status = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("skip");
    }
}

public static class VacuumEntityExtensionMethods
{
    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IVacuumEntityCore target)
    {
        target.CallService("clean_spot");
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("clean_spot");
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IVacuumEntityCore target)
    {
        target.CallService("locate");
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("locate");
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IVacuumEntityCore target)
    {
        target.CallService("pause");
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("pause");
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IVacuumEntityCore target)
    {
        target.CallService("return_to_base");
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("return_to_base");
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IVacuumEntityCore target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IVacuumEntityCore target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IVacuumEntityCore target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IVacuumEntityCore target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IVacuumEntityCore target)
    {
        target.CallService("start");
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("start");
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    public static void StartPause(this IVacuumEntityCore target)
    {
        target.CallService("start_pause");
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    public static void StartPause(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("start_pause");
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IVacuumEntityCore target)
    {
        target.CallService("stop");
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("stop");
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    public static void TurnOff(this IVacuumEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    public static void TurnOff(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Starts a new cleaning task.</summary>
    public static void TurnOn(this IVacuumEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Starts a new cleaning task.</summary>
    public static void TurnOn(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IWeatherEntityCore target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }
}

public static class YeelightEntityExtensionMethods
{
    ///<summary>Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, Set a color scene, if light is off, it will be turned on.</summary>
    public static void SetAutoDelayOffScene(this ILightEntityCore target, YeelightSetAutoDelayOffSceneParameters data)
    {
        target.CallService("set_auto_delay_off_scene", data);
    }

    ///<summary>Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, Set a color scene, if light is off, it will be turned on.</summary>
    public static void SetAutoDelayOffScene(this IEnumerable<ILightEntityCore> target, YeelightSetAutoDelayOffSceneParameters data)
    {
        target.CallService("set_auto_delay_off_scene", data);
    }

    ///<summary>Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, Set a color scene, if light is off, it will be turned on.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="minutes">The time to wait before automatically turning the light off.</param>
    ///<param name="brightness">The brightness value to set.</param>
    public static void SetAutoDelayOffScene(this ILightEntityCore target, long? minutes = null, long? brightness = null)
    {
        target.CallService("set_auto_delay_off_scene", new YeelightSetAutoDelayOffSceneParameters { Minutes = minutes, Brightness = brightness });
    }

    ///<summary>Turns the light on to the specified brightness and sets a timer to turn it back off after the given number of minutes. If the light is off, Set a color scene, if light is off, it will be turned on.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="minutes">The time to wait before automatically turning the light off.</param>
    ///<param name="brightness">The brightness value to set.</param>
    public static void SetAutoDelayOffScene(this IEnumerable<ILightEntityCore> target, long? minutes = null, long? brightness = null)
    {
        target.CallService("set_auto_delay_off_scene", new YeelightSetAutoDelayOffSceneParameters { Minutes = minutes, Brightness = brightness });
    }

    ///<summary>Starts a color flow. If the light is off, it will be turned on.</summary>
    public static void SetColorFlowScene(this ILightEntityCore target, YeelightSetColorFlowSceneParameters data)
    {
        target.CallService("set_color_flow_scene", data);
    }

    ///<summary>Starts a color flow. If the light is off, it will be turned on.</summary>
    public static void SetColorFlowScene(this IEnumerable<ILightEntityCore> target, YeelightSetColorFlowSceneParameters data)
    {
        target.CallService("set_color_flow_scene", data);
    }

    ///<summary>Starts a color flow. If the light is off, it will be turned on.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="count">The number of times to run this flow (0 to run forever).</param>
    ///<param name="action">The action to take after the flow stops.</param>
    ///<param name="transitions">Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html. eg: [{ &quot;TemperatureTransition&quot;: [1900, 1000, 80] }, { &quot;TemperatureTransition&quot;: [1900, 1000, 10] }]</param>
    public static void SetColorFlowScene(this ILightEntityCore target, long? count = null, object? action = null, object? transitions = null)
    {
        target.CallService("set_color_flow_scene", new YeelightSetColorFlowSceneParameters { Count = count, Action = action, Transitions = transitions });
    }

    ///<summary>Starts a color flow. If the light is off, it will be turned on.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="count">The number of times to run this flow (0 to run forever).</param>
    ///<param name="action">The action to take after the flow stops.</param>
    ///<param name="transitions">Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html. eg: [{ &quot;TemperatureTransition&quot;: [1900, 1000, 80] }, { &quot;TemperatureTransition&quot;: [1900, 1000, 10] }]</param>
    public static void SetColorFlowScene(this IEnumerable<ILightEntityCore> target, long? count = null, object? action = null, object? transitions = null)
    {
        target.CallService("set_color_flow_scene", new YeelightSetColorFlowSceneParameters { Count = count, Action = action, Transitions = transitions });
    }

    ///<summary>Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.</summary>
    public static void SetColorScene(this ILightEntityCore target, YeelightSetColorSceneParameters data)
    {
        target.CallService("set_color_scene", data);
    }

    ///<summary>Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.</summary>
    public static void SetColorScene(this IEnumerable<ILightEntityCore> target, YeelightSetColorSceneParameters data)
    {
        target.CallService("set_color_scene", data);
    }

    ///<summary>Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="brightness">The brightness value to set.</param>
    public static void SetColorScene(this ILightEntityCore target, object? rgbColor = null, long? brightness = null)
    {
        target.CallService("set_color_scene", new YeelightSetColorSceneParameters { RgbColor = rgbColor, Brightness = brightness });
    }

    ///<summary>Changes the light to the specified RGB color and brightness. If the light is off, it will be turned on.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="brightness">The brightness value to set.</param>
    public static void SetColorScene(this IEnumerable<ILightEntityCore> target, object? rgbColor = null, long? brightness = null)
    {
        target.CallService("set_color_scene", new YeelightSetColorSceneParameters { RgbColor = rgbColor, Brightness = brightness });
    }

    ///<summary>Changes the light to the specified color temperature. If the light is off, it will be turned on.</summary>
    public static void SetColorTempScene(this ILightEntityCore target, YeelightSetColorTempSceneParameters data)
    {
        target.CallService("set_color_temp_scene", data);
    }

    ///<summary>Changes the light to the specified color temperature. If the light is off, it will be turned on.</summary>
    public static void SetColorTempScene(this IEnumerable<ILightEntityCore> target, YeelightSetColorTempSceneParameters data)
    {
        target.CallService("set_color_temp_scene", data);
    }

    ///<summary>Changes the light to the specified color temperature. If the light is off, it will be turned on.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">The brightness value to set.</param>
    public static void SetColorTempScene(this ILightEntityCore target, long? kelvin = null, long? brightness = null)
    {
        target.CallService("set_color_temp_scene", new YeelightSetColorTempSceneParameters { Kelvin = kelvin, Brightness = brightness });
    }

    ///<summary>Changes the light to the specified color temperature. If the light is off, it will be turned on.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">The brightness value to set.</param>
    public static void SetColorTempScene(this IEnumerable<ILightEntityCore> target, long? kelvin = null, long? brightness = null)
    {
        target.CallService("set_color_temp_scene", new YeelightSetColorTempSceneParameters { Kelvin = kelvin, Brightness = brightness });
    }

    ///<summary>Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.</summary>
    public static void SetHsvScene(this ILightEntityCore target, YeelightSetHsvSceneParameters data)
    {
        target.CallService("set_hsv_scene", data);
    }

    ///<summary>Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.</summary>
    public static void SetHsvScene(this IEnumerable<ILightEntityCore> target, YeelightSetHsvSceneParameters data)
    {
        target.CallService("set_hsv_scene", data);
    }

    ///<summary>Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-359 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="brightness">The brightness value to set.</param>
    public static void SetHsvScene(this ILightEntityCore target, object? hsColor = null, long? brightness = null)
    {
        target.CallService("set_hsv_scene", new YeelightSetHsvSceneParameters { HsColor = hsColor, Brightness = brightness });
    }

    ///<summary>Changes the light to the specified HSV color and brightness. If the light is off, it will be turned on.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-359 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="brightness">The brightness value to set.</param>
    public static void SetHsvScene(this IEnumerable<ILightEntityCore> target, object? hsColor = null, long? brightness = null)
    {
        target.CallService("set_hsv_scene", new YeelightSetHsvSceneParameters { HsColor = hsColor, Brightness = brightness });
    }

    ///<summary>Sets a operation mode.</summary>
    public static void SetMode(this ILightEntityCore target, YeelightSetModeParameters data)
    {
        target.CallService("set_mode", data);
    }

    ///<summary>Sets a operation mode.</summary>
    public static void SetMode(this IEnumerable<ILightEntityCore> target, YeelightSetModeParameters data)
    {
        target.CallService("set_mode", data);
    }

    ///<summary>Sets a operation mode.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="mode">Operation mode.</param>
    public static void SetMode(this ILightEntityCore target, object mode)
    {
        target.CallService("set_mode", new YeelightSetModeParameters { Mode = mode });
    }

    ///<summary>Sets a operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="mode">Operation mode.</param>
    public static void SetMode(this IEnumerable<ILightEntityCore> target, object mode)
    {
        target.CallService("set_mode", new YeelightSetModeParameters { Mode = mode });
    }

    ///<summary>Enables or disables music_mode.</summary>
    public static void SetMusicMode(this ILightEntityCore target, YeelightSetMusicModeParameters data)
    {
        target.CallService("set_music_mode", data);
    }

    ///<summary>Enables or disables music_mode.</summary>
    public static void SetMusicMode(this IEnumerable<ILightEntityCore> target, YeelightSetMusicModeParameters data)
    {
        target.CallService("set_music_mode", data);
    }

    ///<summary>Enables or disables music_mode.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="musicMode">Use true or false to enable / disable music_mode.</param>
    public static void SetMusicMode(this ILightEntityCore target, bool musicMode)
    {
        target.CallService("set_music_mode", new YeelightSetMusicModeParameters { MusicMode = musicMode });
    }

    ///<summary>Enables or disables music_mode.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="musicMode">Use true or false to enable / disable music_mode.</param>
    public static void SetMusicMode(this IEnumerable<ILightEntityCore> target, bool musicMode)
    {
        target.CallService("set_music_mode", new YeelightSetMusicModeParameters { MusicMode = musicMode });
    }

    ///<summary>Start a custom flow, using transitions from https://yeelight.readthedocs.io/en/stable/yeelight.html#flow-objects.</summary>
    public static void StartFlow(this ILightEntityCore target, YeelightStartFlowParameters data)
    {
        target.CallService("start_flow", data);
    }

    ///<summary>Start a custom flow, using transitions from https://yeelight.readthedocs.io/en/stable/yeelight.html#flow-objects.</summary>
    public static void StartFlow(this IEnumerable<ILightEntityCore> target, YeelightStartFlowParameters data)
    {
        target.CallService("start_flow", data);
    }

    ///<summary>Start a custom flow, using transitions from https://yeelight.readthedocs.io/en/stable/yeelight.html#flow-objects.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="count">The number of times to run this flow (0 to run forever).</param>
    ///<param name="action">The action to take after the flow stops.</param>
    ///<param name="transitions">Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html. eg: [{ &quot;TemperatureTransition&quot;: [1900, 1000, 80] }, { &quot;TemperatureTransition&quot;: [1900, 1000, 10] }]</param>
    public static void StartFlow(this ILightEntityCore target, long? count = null, object? action = null, object? transitions = null)
    {
        target.CallService("start_flow", new YeelightStartFlowParameters { Count = count, Action = action, Transitions = transitions });
    }

    ///<summary>Start a custom flow, using transitions from https://yeelight.readthedocs.io/en/stable/yeelight.html#flow-objects.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="count">The number of times to run this flow (0 to run forever).</param>
    ///<param name="action">The action to take after the flow stops.</param>
    ///<param name="transitions">Array of transitions, for desired effect. Examples https://yeelight.readthedocs.io/en/stable/flow.html. eg: [{ &quot;TemperatureTransition&quot;: [1900, 1000, 80] }, { &quot;TemperatureTransition&quot;: [1900, 1000, 10] }]</param>
    public static void StartFlow(this IEnumerable<ILightEntityCore> target, long? count = null, object? action = null, object? transitions = null)
    {
        target.CallService("start_flow", new YeelightStartFlowParameters { Count = count, Action = action, Transitions = transitions });
    }
}